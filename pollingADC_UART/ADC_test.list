
ADC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08006e30  08006e30  00016e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800726c  0800726c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007274  08007274  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800727c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001e0  0800745c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  0800745c  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5fc  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac5  00000000  00000000  0002a80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002c2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  0002cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175c9  00000000  00000000  0002d320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7fd  00000000  00000000  000448e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009213e  00000000  00000000  0004f0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1224  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000337c  00000000  00000000  000e1274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e18 	.word	0x08006e18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08006e18 	.word	0x08006e18

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000ec2:	f000 fc0f 	bl	80016e4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000ec6:	f000 f86b 	bl	8000fa0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000eca:	f000 f951 	bl	8001170 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000ece:	f000 f925 	bl	800111c <MX_USART2_UART_Init>
    MX_ADC1_Init();
 8000ed2:	f000 f8d1 	bl	8001078 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */

    char cycle_s[] = "Cycle has passed.\r\n\r\n";
 8000ed6:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <main+0xbc>)
 8000ed8:	463c      	mov	r4, r7
 8000eda:	461d      	mov	r5, r3
 8000edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ee4:	6020      	str	r0, [r4, #0]
 8000ee6:	3404      	adds	r4, #4
 8000ee8:	8021      	strh	r1, [r4, #0]
    HAL_ADC_Start(&hadc1);
 8000eea:	4824      	ldr	r0, [pc, #144]	; (8000f7c <main+0xc0>)
 8000eec:	f000 fcb0 	bl	8001850 <HAL_ADC_Start>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (start_cycle)
 8000ef0:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <main+0xc4>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0fb      	beq.n	8000ef0 <main+0x34>
        {
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	481f      	ldr	r0, [pc, #124]	; (8000f7c <main+0xc0>)
 8000efe:	f000 fd5b 	bl	80019b8 <HAL_ADC_PollForConversion>
            raw_value_ADC = HAL_ADC_GetValue(&hadc1);
 8000f02:	481e      	ldr	r0, [pc, #120]	; (8000f7c <main+0xc0>)
 8000f04:	f000 fde3 	bl	8001ace <HAL_ADC_GetValue>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <main+0xc8>)
 8000f0e:	801a      	strh	r2, [r3, #0]
            temp = ((float) raw_value_ADC) / 4095 * 3300;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <main+0xc8>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f1c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000f88 <main+0xcc>
 8000f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f24:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f8c <main+0xd0>
 8000f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <main+0xd4>)
 8000f2e:	edc3 7a00 	vstr	s15, [r3]

            sprintf(msg, "ADC rawValue: %hu\r\n", raw_value_ADC);
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <main+0xc8>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4916      	ldr	r1, [pc, #88]	; (8000f94 <main+0xd8>)
 8000f3a:	4817      	ldr	r0, [pc, #92]	; (8000f98 <main+0xdc>)
 8000f3c:	f003 fcf2 	bl	8004924 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000f40:	4815      	ldr	r0, [pc, #84]	; (8000f98 <main+0xdc>)
 8000f42:	f7ff f94d 	bl	80001e0 <strlen>
 8000f46:	4603      	mov	r3, r0
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	4912      	ldr	r1, [pc, #72]	; (8000f98 <main+0xdc>)
 8000f50:	4812      	ldr	r0, [pc, #72]	; (8000f9c <main+0xe0>)
 8000f52:	f002 f840 	bl	8002fd6 <HAL_UART_Transmit>

            HAL_UART_Transmit(&huart2, (uint8_t*) cycle_s, strlen(cycle_s), HAL_MAX_DELAY);
 8000f56:	463b      	mov	r3, r7
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff f941 	bl	80001e0 <strlen>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4639      	mov	r1, r7
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <main+0xe0>)
 8000f6a:	f002 f834 	bl	8002fd6 <HAL_UART_Transmit>

            start_cycle = 0;
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <main+0xc4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
        if (start_cycle)
 8000f74:	e7bc      	b.n	8000ef0 <main+0x34>
 8000f76:	bf00      	nop
 8000f78:	08006e44 	.word	0x08006e44
 8000f7c:	200001fc 	.word	0x200001fc
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000288 	.word	0x20000288
 8000f88:	457ff000 	.word	0x457ff000
 8000f8c:	454e4000 	.word	0x454e4000
 8000f90:	2000028c 	.word	0x2000028c
 8000f94:	08006e30 	.word	0x08006e30
 8000f98:	20000290 	.word	0x20000290
 8000f9c:	20000244 	.word	0x20000244

08000fa0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 f846 	bl	8004040 <memset>
        { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
        { 0 };

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <SystemClock_Config+0xd0>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a28      	ldr	r2, [pc, #160]	; (8001070 <SystemClock_Config+0xd0>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b26      	ldr	r3, [pc, #152]	; (8001070 <SystemClock_Config+0xd0>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <SystemClock_Config+0xd4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <SystemClock_Config+0xd4>)
 8000fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <SystemClock_Config+0xd4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 8001014:	2310      	movs	r3, #16
 8001016:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001018:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800101c:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800101e:	2304      	movs	r3, #4
 8001020:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8001022:	2307      	movs	r3, #7
 8001024:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	4618      	mov	r0, r3
 800102c:	f001 faee 	bl	800260c <HAL_RCC_OscConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x9a>
    {
        Error_Handler();
 8001036:	f000 f93f 	bl	80012b8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 800103a:	230f      	movs	r3, #15
 800103c:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	2302      	movs	r3, #2
 8001040:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104a:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2102      	movs	r1, #2
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fd50 	bl	8002afc <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0xc6>
    {
        Error_Handler();
 8001062:	f000 f929 	bl	80012b8 <Error_Handler>
    }
}
 8001066:	bf00      	nop
 8001068:	3750      	adds	r7, #80	; 0x50
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig =
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <MX_ADC1_Init+0x98>)
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <MX_ADC1_Init+0x9c>)
 800108e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_ADC1_Init+0x98>)
 8001092:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001096:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_ADC1_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_ADC1_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_ADC1_Init+0x98>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_ADC1_Init+0x98>)
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <MX_ADC1_Init+0xa0>)
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_ADC1_Init+0x98>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_ADC1_Init+0x98>)
 80010da:	f000 fb75 	bl	80017c8 <HAL_ADC_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0x70>
    {
        Error_Handler();
 80010e4:	f000 f8e8 	bl	80012b8 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_ADC1_Init+0x98>)
 80010fa:	f000 fcf5 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x90>
    {
        Error_Handler();
 8001104:	f000 f8d8 	bl	80012b8 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200001fc 	.word	0x200001fc
 8001114:	40012000 	.word	0x40012000
 8001118:	0f000001 	.word	0x0f000001

0800111c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <MX_USART2_UART_Init+0x50>)
 8001124:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001154:	f001 fef2 	bl	8002f3c <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 800115e:	f000 f8ab 	bl	80012b8 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000244 	.word	0x20000244
 800116c:	40004400 	.word	0x40004400

08001170 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct =
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
        { 0 };

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <MX_GPIO_Init+0xe0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a30      	ldr	r2, [pc, #192]	; (8001250 <MX_GPIO_Init+0xe0>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <MX_GPIO_Init+0xe0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_GPIO_Init+0xe0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a29      	ldr	r2, [pc, #164]	; (8001250 <MX_GPIO_Init+0xe0>)
 80011ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_GPIO_Init+0xe0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <MX_GPIO_Init+0xe0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a22      	ldr	r2, [pc, #136]	; (8001250 <MX_GPIO_Init+0xe0>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_GPIO_Init+0xe0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_GPIO_Init+0xe0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <MX_GPIO_Init+0xe0>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_GPIO_Init+0xe0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2120      	movs	r1, #32
 80011fa:	4816      	ldr	r0, [pc, #88]	; (8001254 <MX_GPIO_Init+0xe4>)
 80011fc:	f001 f9ba 	bl	8002574 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001206:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4810      	ldr	r0, [pc, #64]	; (8001258 <MX_GPIO_Init+0xe8>)
 8001218:	f001 f828 	bl	800226c <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 800121c:	2320      	movs	r3, #32
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <MX_GPIO_Init+0xe4>)
 8001234:	f001 f81a 	bl	800226c <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2028      	movs	r0, #40	; 0x28
 800123e:	f000 ff4c 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001242:	2028      	movs	r0, #40	; 0x28
 8001244:	f000 ff65 	bl	8002112 <HAL_NVIC_EnableIRQ>

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020800 	.word	0x40020800

0800125c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == B1_Pin)
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800126c:	d11a      	bne.n	80012a4 <HAL_GPIO_EXTI_Callback+0x48>
    {
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800126e:	2120      	movs	r1, #32
 8001270:	480e      	ldr	r0, [pc, #56]	; (80012ac <HAL_GPIO_EXTI_Callback+0x50>)
 8001272:	f001 f998 	bl	80025a6 <HAL_GPIO_TogglePin>
        char my_string[] = "Button has been pressed\r\n";
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001278:	f107 040c 	add.w	r4, r7, #12
 800127c:	461d      	mov	r5, r3
 800127e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001282:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001286:	c403      	stmia	r4!, {r0, r1}
 8001288:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit_IT(&huart2, (uint8_t*) my_string, strlen(my_string));
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4618      	mov	r0, r3
 8001290:	f7fe ffa6 	bl	80001e0 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x58>)
 80012a0:	f001 ff2b 	bl	80030fa <HAL_UART_Transmit_IT>
    }
    else
    {

    }
}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bdb0      	pop	{r4, r5, r7, pc}
 80012ac:	40020000 	.word	0x40020000
 80012b0:	08006e5c 	.word	0x08006e5c
 80012b4:	20000244 	.word	0x20000244

080012b8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80012c0:	e7fe      	b.n	80012c0 <Error_Handler+0x8>
	...

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_MspInit+0x4c>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_MspInit+0x4c>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001302:	2007      	movs	r0, #7
 8001304:	f000 fede 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_ADC_MspInit+0x7c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d127      	bne.n	8001386 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_ADC_MspInit+0x80>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_ADC_MspInit+0x80>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_ADC_MspInit+0x80>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_ADC_MspInit+0x80>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_ADC_MspInit+0x80>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_ADC_MspInit+0x80>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800136e:	2301      	movs	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_ADC_MspInit+0x84>)
 8001382:	f000 ff73 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40012000 	.word	0x40012000
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000

0800139c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_UART_MspInit+0x94>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d133      	bne.n	8001426 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_UART_MspInit+0x98>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_UART_MspInit+0x98>)
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_UART_MspInit+0x98>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_UART_MspInit+0x98>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a14      	ldr	r2, [pc, #80]	; (8001434 <HAL_UART_MspInit+0x98>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_UART_MspInit+0x98>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013f6:	230c      	movs	r3, #12
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001406:	2307      	movs	r3, #7
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4809      	ldr	r0, [pc, #36]	; (8001438 <HAL_UART_MspInit+0x9c>)
 8001412:	f000 ff2b 	bl	800226c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2026      	movs	r0, #38	; 0x26
 800141c:	f000 fe5d 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001420:	2026      	movs	r0, #38	; 0x26
 8001422:	f000 fe76 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40004400 	.word	0x40004400
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <NMI_Handler+0x4>

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 f97e 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
    if (!(uwTick % 1000))
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <SysTick_Handler+0x2c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <SysTick_Handler+0x30>)
 8001492:	fba3 1302 	umull	r1, r3, r3, r2
 8001496:	099b      	lsrs	r3, r3, #6
 8001498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <SysTick_Handler+0x28>
    {
        start_cycle = 1;
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Handler+0x34>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
    }
  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200002b4 	.word	0x200002b4
 80014b4:	10624dd3 	.word	0x10624dd3
 80014b8:	20000000 	.word	0x20000000

080014bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <USART2_IRQHandler+0x10>)
 80014c2:	f001 fe5f 	bl	8003184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000244 	.word	0x20000244

080014d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014d8:	f001 f880 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	return 1;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_kill>:

int _kill(int pid, int sig)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014fa:	f002 fd77 	bl	8003fec <__errno>
 80014fe:	4603      	mov	r3, r0
 8001500:	2216      	movs	r2, #22
 8001502:	601a      	str	r2, [r3, #0]
	return -1;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_exit>:

void _exit (int status)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ffe7 	bl	80014f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001522:	e7fe      	b.n	8001522 <_exit+0x12>

08001524 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e00a      	b.n	800154c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001536:	f3af 8000 	nop.w
 800153a:	4601      	mov	r1, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	b2ca      	uxtb	r2, r1
 8001544:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbf0      	blt.n	8001536 <_read+0x12>
	}

return len;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e009      	b.n	8001584 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbf1      	blt.n	8001570 <_write+0x12>
	}
	return len;
 800158c:	687b      	ldr	r3, [r7, #4]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_close>:

int _close(int file)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	return -1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015be:	605a      	str	r2, [r3, #4]
	return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_isatty>:

int _isatty(int file)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
	return 1;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
	return 0;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f002 fcdc 	bl	8003fec <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20018000 	.word	0x20018000
 8001660:	00000400 	.word	0x00000400
 8001664:	200002b0 	.word	0x200002b0
 8001668:	200002c8 	.word	0x200002c8

0800166c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001696:	490e      	ldr	r1, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ac:	4c0b      	ldr	r4, [pc, #44]	; (80016dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ba:	f7ff ffd7 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f002 fc9b 	bl	8003ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fbfb 	bl	8000ebc <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80016d4:	0800727c 	.word	0x0800727c
  ldr r2, =_sbss
 80016d8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80016dc:	200002c8 	.word	0x200002c8

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_Init+0x40>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_Init+0x40>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_Init+0x40>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 fcd9 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fdd4 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fcf1 	bl	800212e <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 fcb9 	bl	80020da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000004 	.word	0x20000004
 8001780:	2000000c 	.word	0x2000000c
 8001784:	20000008 	.word	0x20000008

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	200002b4 	.word	0x200002b4

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200002b4 	.word	0x200002b4

080017c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e033      	b.n	8001846 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fd94 	bl	8001314 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800180e:	f023 0302 	bic.w	r3, r3, #2
 8001812:	f043 0202 	orr.w	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fa86 	bl	8001d2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
 8001836:	e001      	b.n	800183c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_ADC_Start+0x1a>
 8001866:	2302      	movs	r3, #2
 8001868:	e097      	b.n	800199a <HAL_ADC_Start+0x14a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d018      	beq.n	80018b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001890:	4b45      	ldr	r3, [pc, #276]	; (80019a8 <HAL_ADC_Start+0x158>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a45      	ldr	r2, [pc, #276]	; (80019ac <HAL_ADC_Start+0x15c>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	0c9a      	lsrs	r2, r3, #18
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018a4:	e002      	b.n	80018ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d15f      	bne.n	8001980 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018fe:	d106      	bne.n	800190e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	f023 0206 	bic.w	r2, r3, #6
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	645a      	str	r2, [r3, #68]	; 0x44
 800190c:	e002      	b.n	8001914 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_ADC_Start+0x160>)
 800191e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001928:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10f      	bne.n	8001956 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d129      	bne.n	8001998 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	e020      	b.n	8001998 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_ADC_Start+0x164>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d11b      	bne.n	8001998 <HAL_ADC_Start+0x148>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d114      	bne.n	8001998 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	e00b      	b.n	8001998 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f043 0210 	orr.w	r2, r3, #16
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000004 	.word	0x20000004
 80019ac:	431bde83 	.word	0x431bde83
 80019b0:	40012300 	.word	0x40012300
 80019b4:	40012000 	.word	0x40012000

080019b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d4:	d113      	bne.n	80019fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e4:	d10b      	bne.n	80019fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f043 0220 	orr.w	r2, r3, #32
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e063      	b.n	8001ac6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019fe:	f7ff fed7 	bl	80017b0 <HAL_GetTick>
 8001a02:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a04:	e021      	b.n	8001a4a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d01d      	beq.n	8001a4a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_ADC_PollForConversion+0x6c>
 8001a14:	f7ff fecc 	bl	80017b0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d212      	bcs.n	8001a4a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d00b      	beq.n	8001a4a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f043 0204 	orr.w	r2, r3, #4
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e03d      	b.n	8001ac6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d1d6      	bne.n	8001a06 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0212 	mvn.w	r2, #18
 8001a60:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d123      	bne.n	8001ac4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d11f      	bne.n	8001ac4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d111      	bne.n	8001ac4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d105      	bne.n	8001ac4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1c>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e105      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x228>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d925      	bls.n	8001b60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68d9      	ldr	r1, [r3, #12]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	3b1e      	subs	r3, #30
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43da      	mvns	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	400a      	ands	r2, r1
 8001b38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68d9      	ldr	r1, [r3, #12]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4403      	add	r3, r0
 8001b52:	3b1e      	subs	r3, #30
 8001b54:	409a      	lsls	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	e022      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6919      	ldr	r1, [r3, #16]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	2207      	movs	r2, #7
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	400a      	ands	r2, r1
 8001b82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6919      	ldr	r1, [r3, #16]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4403      	add	r3, r0
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d824      	bhi.n	8001bf8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b05      	subs	r3, #5
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	400a      	ands	r2, r1
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b05      	subs	r3, #5
 8001bea:	fa00 f203 	lsl.w	r2, r0, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf6:	e04c      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	d824      	bhi.n	8001c4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b23      	subs	r3, #35	; 0x23
 8001c12:	221f      	movs	r2, #31
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b23      	subs	r3, #35	; 0x23
 8001c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
 8001c48:	e023      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b41      	subs	r3, #65	; 0x41
 8001c5c:	221f      	movs	r2, #31
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	3b41      	subs	r3, #65	; 0x41
 8001c86:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_ADC_ConfigChannel+0x234>)
 8001c94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <HAL_ADC_ConfigChannel+0x238>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d109      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b12      	cmp	r3, #18
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_ADC_ConfigChannel+0x238>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d123      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x21e>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d003      	beq.n	8001cce <HAL_ADC_ConfigChannel+0x1e6>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b11      	cmp	r3, #17
 8001ccc:	d11b      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d111      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_ADC_ConfigChannel+0x23c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_ADC_ConfigChannel+0x240>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9a      	lsrs	r2, r3, #18
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf8:	e002      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f9      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40012300 	.word	0x40012300
 8001d20:	40012000 	.word	0x40012000
 8001d24:	20000004 	.word	0x20000004
 8001d28:	431bde83 	.word	0x431bde83

08001d2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d34:	4b79      	ldr	r3, [pc, #484]	; (8001f1c <ADC_Init+0x1f0>)
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	021a      	lsls	r2, r3, #8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6899      	ldr	r1, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <ADC_Init+0x1f4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d022      	beq.n	8001e0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6899      	ldr	r1, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6899      	ldr	r1, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	e00f      	b.n	8001e2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0202 	bic.w	r2, r2, #2
 8001e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7e1b      	ldrb	r3, [r3, #24]
 8001e44:	005a      	lsls	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01b      	beq.n	8001e90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6859      	ldr	r1, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	3b01      	subs	r3, #1
 8001e84:	035a      	lsls	r2, r3, #13
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	e007      	b.n	8001ea0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	051a      	lsls	r2, r3, #20
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6899      	ldr	r1, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ee2:	025a      	lsls	r2, r3, #9
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6899      	ldr	r1, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	029a      	lsls	r2, r3, #10
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40012300 	.word	0x40012300
 8001f20:	0f000001 	.word	0x0f000001

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <__NVIC_EnableIRQ+0x38>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	; (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	2b04      	cmp	r3, #4
 8002034:	bf28      	it	cs
 8002036:	2304      	movcs	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3304      	adds	r3, #4
 800203e:	2b06      	cmp	r3, #6
 8002040:	d902      	bls.n	8002048 <NVIC_EncodePriority+0x30>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3b03      	subs	r3, #3
 8002046:	e000      	b.n	800204a <NVIC_EncodePriority+0x32>
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43d9      	mvns	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	4313      	orrs	r3, r2
         );
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f7ff ff8e 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff29 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff ff3e 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff8e 	bl	8002018 <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5d 	bl	8001fc4 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff31 	bl	8001f88 <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffa2 	bl	8002080 <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff fb2c 	bl	80017b0 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d008      	beq.n	8002178 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e052      	b.n	800221e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0216 	bic.w	r2, r2, #22
 8002186:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002196:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d103      	bne.n	80021a8 <HAL_DMA_Abort+0x62>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0208 	bic.w	r2, r2, #8
 80021b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c8:	e013      	b.n	80021f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ca:	f7ff faf1 	bl	80017b0 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d90c      	bls.n	80021f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2203      	movs	r2, #3
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e015      	b.n	800221e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e4      	bne.n	80021ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002204:	223f      	movs	r2, #63	; 0x3f
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d004      	beq.n	8002244 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e00c      	b.n	800225e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2205      	movs	r2, #5
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e159      	b.n	800253c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f040 8148 	bne.w	8002536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d005      	beq.n	80022be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d130      	bne.n	8002320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 0201 	and.w	r2, r3, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b03      	cmp	r3, #3
 800232a:	d017      	beq.n	800235c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a2 	beq.w	8002536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b57      	ldr	r3, [pc, #348]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a56      	ldr	r2, [pc, #344]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b54      	ldr	r3, [pc, #336]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240e:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_GPIO_Init+0x2ec>)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a49      	ldr	r2, [pc, #292]	; (800255c <HAL_GPIO_Init+0x2f0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d019      	beq.n	800246e <HAL_GPIO_Init+0x202>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a48      	ldr	r2, [pc, #288]	; (8002560 <HAL_GPIO_Init+0x2f4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0x1fe>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a47      	ldr	r2, [pc, #284]	; (8002564 <HAL_GPIO_Init+0x2f8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00d      	beq.n	8002466 <HAL_GPIO_Init+0x1fa>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a46      	ldr	r2, [pc, #280]	; (8002568 <HAL_GPIO_Init+0x2fc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <HAL_GPIO_Init+0x1f6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a45      	ldr	r2, [pc, #276]	; (800256c <HAL_GPIO_Init+0x300>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_GPIO_Init+0x1f2>
 800245a:	2304      	movs	r3, #4
 800245c:	e008      	b.n	8002470 <HAL_GPIO_Init+0x204>
 800245e:	2307      	movs	r3, #7
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x204>
 8002462:	2303      	movs	r3, #3
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x204>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <HAL_GPIO_Init+0x204>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x204>
 800246e:	2300      	movs	r3, #0
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f002 0203 	and.w	r2, r2, #3
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	4093      	lsls	r3, r2
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002480:	4935      	ldr	r1, [pc, #212]	; (8002558 <HAL_GPIO_Init+0x2ec>)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b2:	4a2f      	ldr	r2, [pc, #188]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024dc:	4a24      	ldr	r2, [pc, #144]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002506:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_GPIO_Init+0x304>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002530:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3301      	adds	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b0f      	cmp	r3, #15
 8002540:	f67f aea2 	bls.w	8002288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40013800 	.word	0x40013800
 800255c:	40020000 	.word	0x40020000
 8002560:	40020400 	.word	0x40020400
 8002564:	40020800 	.word	0x40020800
 8002568:	40020c00 	.word	0x40020c00
 800256c:	40021000 	.word	0x40021000
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002590:	e003      	b.n	800259a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025b8:	887a      	ldrh	r2, [r7, #2]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	041a      	lsls	r2, r3, #16
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	400b      	ands	r3, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fe2e 	bl	800125c <HAL_GPIO_EXTI_Callback>
  }
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e267      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d075      	beq.n	8002716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	4b88      	ldr	r3, [pc, #544]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d00c      	beq.n	8002650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4b85      	ldr	r3, [pc, #532]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263e:	2b08      	cmp	r3, #8
 8002640:	d112      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b82      	ldr	r3, [pc, #520]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800264e:	d10b      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	4b7e      	ldr	r3, [pc, #504]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d05b      	beq.n	8002714 <HAL_RCC_OscConfig+0x108>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d157      	bne.n	8002714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e242      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002670:	d106      	bne.n	8002680 <HAL_RCC_OscConfig+0x74>
 8002672:	4b76      	ldr	r3, [pc, #472]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a75      	ldr	r2, [pc, #468]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e01d      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x98>
 800268a:	4b70      	ldr	r3, [pc, #448]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6f      	ldr	r2, [pc, #444]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6d      	ldr	r3, [pc, #436]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6c      	ldr	r2, [pc, #432]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 80026a4:	4b69      	ldr	r3, [pc, #420]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a68      	ldr	r2, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b66      	ldr	r3, [pc, #408]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff f874 	bl	80017b0 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026cc:	f7ff f870 	bl	80017b0 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e207      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b5b      	ldr	r3, [pc, #364]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0xc0>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7ff f860 	bl	80017b0 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f4:	f7ff f85c 	bl	80017b0 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1f3      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0xe8>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d063      	beq.n	80027ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b44      	ldr	r3, [pc, #272]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e1c7      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	e03a      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277c:	4b34      	ldr	r3, [pc, #208]	; (8002850 <HAL_RCC_OscConfig+0x244>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7ff f815 	bl	80017b0 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278a:	f7ff f811 	bl	80017b0 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1a8      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4925      	ldr	r1, [pc, #148]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_OscConfig+0x244>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fff4 	bl	80017b0 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe fff0 	bl	80017b0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e187      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d036      	beq.n	8002864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_RCC_OscConfig+0x248>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe ffd4 	bl	80017b0 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe ffd0 	bl	80017b0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e167      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x200>
 800282a:	e01b      	b.n	8002864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_OscConfig+0x248>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe ffbd 	bl	80017b0 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	e00e      	b.n	8002858 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe ffb9 	bl	80017b0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d907      	bls.n	8002858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e150      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
 800284c:	40023800 	.word	0x40023800
 8002850:	42470000 	.word	0x42470000
 8002854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ea      	bne.n	800283a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8097 	beq.w	80029a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b81      	ldr	r3, [pc, #516]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b7d      	ldr	r3, [pc, #500]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a7c      	ldr	r2, [pc, #496]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b77      	ldr	r3, [pc, #476]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d118      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ae:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a73      	ldr	r2, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ba:	f7fe ff79 	bl	80017b0 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7fe ff75 	bl	80017b0 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e10c      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x2ea>
 80028e8:	4b64      	ldr	r3, [pc, #400]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a63      	ldr	r2, [pc, #396]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	e01c      	b.n	8002930 <HAL_RCC_OscConfig+0x324>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x30c>
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a5e      	ldr	r2, [pc, #376]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a5b      	ldr	r2, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0x324>
 8002918:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a57      	ldr	r2, [pc, #348]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	4b55      	ldr	r3, [pc, #340]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a54      	ldr	r2, [pc, #336]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 0304 	bic.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe ff3a 	bl	80017b0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe ff36 	bl	80017b0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0cb      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ee      	beq.n	8002940 <HAL_RCC_OscConfig+0x334>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe ff24 	bl	80017b0 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe ff20 	bl	80017b0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0b5      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ee      	bne.n	800296c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	4a38      	ldr	r2, [pc, #224]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a1 	beq.w	8002aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d05c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d141      	bne.n	8002a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_RCC_OscConfig+0x478>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe fef4 	bl	80017b0 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fef0 	bl	80017b0 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e087      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	491b      	ldr	r1, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x478>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fec9 	bl	80017b0 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe fec5 	bl	80017b0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e05c      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x416>
 8002a40:	e054      	b.n	8002aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_RCC_OscConfig+0x478>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe feb2 	bl	80017b0 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe feae 	bl	80017b0 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e045      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x444>
 8002a6e:	e03d      	b.n	8002aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e038      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000
 8002a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x4ec>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d028      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d121      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d111      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800

08002afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0cc      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d90c      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b63      	ldr	r3, [pc, #396]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b8      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	494d      	ldr	r1, [pc, #308]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d044      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d119      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e07f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bca:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e067      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4934      	ldr	r1, [pc, #208]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fe fde0 	bl	80017b0 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf4:	f7fe fddc 	bl	80017b0 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e04f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 020c 	and.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1eb      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d20c      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e032      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c82:	f000 f821 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	490a      	ldr	r1, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	5ccb      	ldrb	r3, [r1, r3]
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fd40 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08006e78 	.word	0x08006e78
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b094      	sub	sp, #80	; 0x50
 8002cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd8:	2300      	movs	r3, #0
 8002cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce0:	4b79      	ldr	r3, [pc, #484]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d00d      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x40>
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	f200 80e1 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x34>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfa:	e0db      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d00:	e0db      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d06:	e0d8      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	2200      	movs	r2, #0
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
 8002d36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	462b      	mov	r3, r5
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	0159      	lsls	r1, r3, #5
 8002d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4c:	0150      	lsls	r0, r2, #5
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4621      	mov	r1, r4
 8002d54:	1a51      	subs	r1, r2, r1
 8002d56:	6139      	str	r1, [r7, #16]
 8002d58:	4629      	mov	r1, r5
 8002d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	4651      	mov	r1, sl
 8002d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d76:	4651      	mov	r1, sl
 8002d78:	018a      	lsls	r2, r1, #6
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d80:	4659      	mov	r1, fp
 8002d82:	eb63 0901 	sbc.w	r9, r3, r1
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9a:	4690      	mov	r8, r2
 8002d9c:	4699      	mov	r9, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	eb18 0303 	adds.w	r3, r8, r3
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	462b      	mov	r3, r5
 8002da8:	eb49 0303 	adc.w	r3, r9, r3
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	024b      	lsls	r3, r1, #9
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	024a      	lsls	r2, r1, #9
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dce:	2200      	movs	r2, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd8:	f7fd feee 	bl	8000bb8 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de4:	e058      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	2200      	movs	r2, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	4611      	mov	r1, r2
 8002df2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e00:	4642      	mov	r2, r8
 8002e02:	464b      	mov	r3, r9
 8002e04:	f04f 0000 	mov.w	r0, #0
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	0159      	lsls	r1, r3, #5
 8002e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e12:	0150      	lsls	r0, r2, #5
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4641      	mov	r1, r8
 8002e1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1e:	4649      	mov	r1, r9
 8002e20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e38:	ebb2 040a 	subs.w	r4, r2, sl
 8002e3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	00eb      	lsls	r3, r5, #3
 8002e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	18e3      	adds	r3, r4, r3
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	eb45 0303 	adc.w	r3, r5, r3
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e82:	2200      	movs	r2, #0
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	61fa      	str	r2, [r7, #28]
 8002e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e8c:	f7fd fe94 	bl	8000bb8 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4613      	mov	r3, r2
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3750      	adds	r7, #80	; 0x50
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	08006e88 	.word	0x08006e88

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f18:	f7ff ffdc 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0b5b      	lsrs	r3, r3, #13
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	08006e88 	.word	0x08006e88

08002f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e03f      	b.n	8002fce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe fa1a 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	; 0x24
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fdbf 	bl	8003b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b08a      	sub	sp, #40	; 0x28
 8002fda:	af02      	add	r7, sp, #8
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d17c      	bne.n	80030f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <HAL_UART_Transmit+0x2c>
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e075      	b.n	80030f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_UART_Transmit+0x3e>
 8003010:	2302      	movs	r3, #2
 8003012:	e06e      	b.n	80030f2 <HAL_UART_Transmit+0x11c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2221      	movs	r2, #33	; 0x21
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800302a:	f7fe fbc1 	bl	80017b0 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	88fa      	ldrh	r2, [r7, #6]
 800303a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003044:	d108      	bne.n	8003058 <HAL_UART_Transmit+0x82>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d104      	bne.n	8003058 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	e003      	b.n	8003060 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003068:	e02a      	b.n	80030c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2200      	movs	r2, #0
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fb3d 	bl	80036f4 <UART_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e036      	b.n	80030f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10b      	bne.n	80030a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003098:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	3302      	adds	r3, #2
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	e007      	b.n	80030b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	3301      	adds	r3, #1
 80030b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1cf      	bne.n	800306a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2140      	movs	r1, #64	; 0x40
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fb0d 	bl	80036f4 <UART_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e006      	b.n	80030f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b085      	sub	sp, #20
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	4613      	mov	r3, r2
 8003106:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b20      	cmp	r3, #32
 8003112:	d130      	bne.n	8003176 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_UART_Transmit_IT+0x26>
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e029      	b.n	8003178 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_UART_Transmit_IT+0x38>
 800312e:	2302      	movs	r3, #2
 8003130:	e022      	b.n	8003178 <HAL_UART_Transmit_IT+0x7e>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	88fa      	ldrh	r2, [r7, #6]
 800314a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2221      	movs	r2, #33	; 0x21
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003170:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b0ba      	sub	sp, #232	; 0xe8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10f      	bne.n	80031ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_UART_IRQHandler+0x66>
 80031d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fbd3 	bl	800398e <UART_Receive_IT>
      return;
 80031e8:	e256      	b.n	8003698 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80de 	beq.w	80033b0 <HAL_UART_IRQHandler+0x22c>
 80031f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003204:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80d1 	beq.w	80033b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_UART_IRQHandler+0xae>
 800321a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_UART_IRQHandler+0xd2>
 800323e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_UART_IRQHandler+0xf6>
 8003262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0204 	orr.w	r2, r3, #4
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d011      	beq.n	80032aa <HAL_UART_IRQHandler+0x126>
 8003286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d105      	bne.n	800329e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0208 	orr.w	r2, r3, #8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 81ed 	beq.w	800368e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_UART_IRQHandler+0x14e>
 80032c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fb5e 	bl	800398e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b40      	cmp	r3, #64	; 0x40
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_UART_IRQHandler+0x17a>
 80032f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04f      	beq.n	800339e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa66 	bl	80037d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d141      	bne.n	8003396 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3314      	adds	r3, #20
 8003318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800332c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800333e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800334a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1d9      	bne.n	8003312 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	2b00      	cmp	r3, #0
 8003364:	d013      	beq.n	800338e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	4a7d      	ldr	r2, [pc, #500]	; (8003560 <HAL_UART_IRQHandler+0x3dc>)
 800336c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe ff57 	bl	8002226 <HAL_DMA_Abort_IT>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003388:	4610      	mov	r0, r2
 800338a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338c:	e00e      	b.n	80033ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f99a 	bl	80036c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003394:	e00a      	b.n	80033ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f996 	bl	80036c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	e006      	b.n	80033ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f992 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033aa:	e170      	b.n	800368e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	bf00      	nop
    return;
 80033ae:	e16e      	b.n	800368e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	f040 814a 	bne.w	800364e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8143 	beq.w	800364e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 813c 	beq.w	800364e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	f040 80b4 	bne.w	8003564 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003408:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8140 	beq.w	8003692 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800341a:	429a      	cmp	r2, r3
 800341c:	f080 8139 	bcs.w	8003692 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003426:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003432:	f000 8088 	beq.w	8003546 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800344c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	330c      	adds	r3, #12
 800345e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003462:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800346e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800347a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1d9      	bne.n	8003436 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3314      	adds	r3, #20
 8003488:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3314      	adds	r3, #20
 80034a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e1      	bne.n	8003482 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3314      	adds	r3, #20
 80034de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e3      	bne.n	80034be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003516:	f023 0310 	bic.w	r3, r3, #16
 800351a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003528:	65ba      	str	r2, [r7, #88]	; 0x58
 800352a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800352e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003530:	e841 2300 	strex	r3, r2, [r1]
 8003534:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e3      	bne.n	8003504 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe fe00 	bl	8002146 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800354e:	b29b      	uxth	r3, r3
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	b29b      	uxth	r3, r3
 8003554:	4619      	mov	r1, r3
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8c0 	bl	80036dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800355c:	e099      	b.n	8003692 <HAL_UART_IRQHandler+0x50e>
 800355e:	bf00      	nop
 8003560:	08003897 	.word	0x08003897
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800356c:	b29b      	uxth	r3, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 808b 	beq.w	8003696 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8086 	beq.w	8003696 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035ae:	647a      	str	r2, [r7, #68]	; 0x44
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e3      	bne.n	800358a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3314      	adds	r3, #20
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	623b      	str	r3, [r7, #32]
   return(result);
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035e6:	633a      	str	r2, [r7, #48]	; 0x30
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e3      	bne.n	80035c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	330c      	adds	r3, #12
 800360e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	e853 3f00 	ldrex	r3, [r3]
 8003616:	60fb      	str	r3, [r7, #12]
   return(result);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0310 	bic.w	r3, r3, #16
 800361e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	330c      	adds	r3, #12
 8003628:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800362c:	61fa      	str	r2, [r7, #28]
 800362e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	69b9      	ldr	r1, [r7, #24]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	617b      	str	r3, [r7, #20]
   return(result);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e3      	bne.n	8003608 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f848 	bl	80036dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800364c:	e023      	b.n	8003696 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800364e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_UART_IRQHandler+0x4ea>
 800365a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f929 	bl	80038be <UART_Transmit_IT>
    return;
 800366c:	e014      	b.n	8003698 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <HAL_UART_IRQHandler+0x514>
 800367a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f969 	bl	800395e <UART_EndTransmit_IT>
    return;
 800368c:	e004      	b.n	8003698 <HAL_UART_IRQHandler+0x514>
    return;
 800368e:	bf00      	nop
 8003690:	e002      	b.n	8003698 <HAL_UART_IRQHandler+0x514>
      return;
 8003692:	bf00      	nop
 8003694:	e000      	b.n	8003698 <HAL_UART_IRQHandler+0x514>
      return;
 8003696:	bf00      	nop
  }
}
 8003698:	37e8      	adds	r7, #232	; 0xe8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop

080036a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b090      	sub	sp, #64	; 0x40
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003704:	e050      	b.n	80037a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d04c      	beq.n	80037a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800370e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <UART_WaitOnFlagUntilTimeout+0x30>
 8003714:	f7fe f84c 	bl	80017b0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003720:	429a      	cmp	r2, r3
 8003722:	d241      	bcs.n	80037a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003744:	637a      	str	r2, [r7, #52]	; 0x34
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800374a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e5      	bne.n	8003724 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3314      	adds	r3, #20
 800375e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	613b      	str	r3, [r7, #16]
   return(result);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3314      	adds	r3, #20
 8003776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003778:	623a      	str	r2, [r7, #32]
 800377a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	69f9      	ldr	r1, [r7, #28]
 800377e:	6a3a      	ldr	r2, [r7, #32]
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	61bb      	str	r3, [r7, #24]
   return(result);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e5      	bne.n	8003758 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e00f      	b.n	80037c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d09f      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3740      	adds	r7, #64	; 0x40
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b095      	sub	sp, #84	; 0x54
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037f8:	643a      	str	r2, [r7, #64]	; 0x40
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3314      	adds	r3, #20
 8003812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	61fb      	str	r3, [r7, #28]
   return(result);
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	64bb      	str	r3, [r7, #72]	; 0x48
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3314      	adds	r3, #20
 800382a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800382c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e5      	bne.n	800380c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	2b01      	cmp	r3, #1
 8003846:	d119      	bne.n	800387c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	330c      	adds	r3, #12
 800384e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	60bb      	str	r3, [r7, #8]
   return(result);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f023 0310 	bic.w	r3, r3, #16
 800385e:	647b      	str	r3, [r7, #68]	; 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003868:	61ba      	str	r2, [r7, #24]
 800386a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6979      	ldr	r1, [r7, #20]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	613b      	str	r3, [r7, #16]
   return(result);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e5      	bne.n	8003848 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
}
 800388a:	bf00      	nop
 800388c:	3754      	adds	r7, #84	; 0x54
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff ff09 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b21      	cmp	r3, #33	; 0x21
 80038d0:	d13e      	bne.n	8003950 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038da:	d114      	bne.n	8003906 <UART_Transmit_IT+0x48>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d110      	bne.n	8003906 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	1c9a      	adds	r2, r3, #2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	621a      	str	r2, [r3, #32]
 8003904:	e008      	b.n	8003918 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	1c59      	adds	r1, r3, #1
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6211      	str	r1, [r2, #32]
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29b      	uxth	r3, r3
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4619      	mov	r1, r3
 8003926:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10f      	bne.n	800394c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800393a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800394a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	e000      	b.n	8003952 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003950:	2302      	movs	r3, #2
  }
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003974:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fe8e 	bl	80036a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b08c      	sub	sp, #48	; 0x30
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b22      	cmp	r3, #34	; 0x22
 80039a0:	f040 80ab 	bne.w	8003afa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ac:	d117      	bne.n	80039de <UART_Receive_IT+0x50>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d113      	bne.n	80039de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	1c9a      	adds	r2, r3, #2
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
 80039dc:	e026      	b.n	8003a2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f0:	d007      	beq.n	8003a02 <UART_Receive_IT+0x74>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <UART_Receive_IT+0x82>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	e008      	b.n	8003a22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d15a      	bne.n	8003af6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0220 	bic.w	r2, r2, #32
 8003a4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d135      	bne.n	8003aec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	613b      	str	r3, [r7, #16]
   return(result);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f023 0310 	bic.w	r3, r3, #16
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa6:	623a      	str	r2, [r7, #32]
 8003aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	69f9      	ldr	r1, [r7, #28]
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e5      	bne.n	8003a86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	d10a      	bne.n	8003ade <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff fdf9 	bl	80036dc <HAL_UARTEx_RxEventCallback>
 8003aea:	e002      	b.n	8003af2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fde1 	bl	80036b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e002      	b.n	8003afc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
  }
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3730      	adds	r7, #48	; 0x30
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b0c0      	sub	sp, #256	; 0x100
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b20:	68d9      	ldr	r1, [r3, #12]
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	ea40 0301 	orr.w	r3, r0, r1
 8003b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b5c:	f021 010c 	bic.w	r1, r1, #12
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7e:	6999      	ldr	r1, [r3, #24]
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	ea40 0301 	orr.w	r3, r0, r1
 8003b8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b8f      	ldr	r3, [pc, #572]	; (8003dd0 <UART_SetConfig+0x2cc>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d005      	beq.n	8003ba4 <UART_SetConfig+0xa0>
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b8d      	ldr	r3, [pc, #564]	; (8003dd4 <UART_SetConfig+0x2d0>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d104      	bne.n	8003bae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba4:	f7ff f9b6 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8003ba8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bac:	e003      	b.n	8003bb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bae:	f7ff f99d 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8003bb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc0:	f040 810c 	bne.w	8003ddc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	1891      	adds	r1, r2, r2
 8003bdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bde:	415b      	adcs	r3, r3
 8003be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003be6:	4621      	mov	r1, r4
 8003be8:	eb12 0801 	adds.w	r8, r2, r1
 8003bec:	4629      	mov	r1, r5
 8003bee:	eb43 0901 	adc.w	r9, r3, r1
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c06:	4690      	mov	r8, r2
 8003c08:	4699      	mov	r9, r3
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	eb18 0303 	adds.w	r3, r8, r3
 8003c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c14:	462b      	mov	r3, r5
 8003c16:	eb49 0303 	adc.w	r3, r9, r3
 8003c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c32:	460b      	mov	r3, r1
 8003c34:	18db      	adds	r3, r3, r3
 8003c36:	653b      	str	r3, [r7, #80]	; 0x50
 8003c38:	4613      	mov	r3, r2
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c48:	f7fc ffb6 	bl	8000bb8 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4b61      	ldr	r3, [pc, #388]	; (8003dd8 <UART_SetConfig+0x2d4>)
 8003c52:	fba3 2302 	umull	r2, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	011c      	lsls	r4, r3, #4
 8003c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	1891      	adds	r1, r2, r2
 8003c72:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c74:	415b      	adcs	r3, r3
 8003c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c82:	4649      	mov	r1, r9
 8003c84:	eb43 0b01 	adc.w	fp, r3, r1
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c9c:	4692      	mov	sl, r2
 8003c9e:	469b      	mov	fp, r3
 8003ca0:	4643      	mov	r3, r8
 8003ca2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003caa:	464b      	mov	r3, r9
 8003cac:	eb4b 0303 	adc.w	r3, fp, r3
 8003cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	18db      	adds	r3, r3, r3
 8003ccc:	643b      	str	r3, [r7, #64]	; 0x40
 8003cce:	4613      	mov	r3, r2
 8003cd0:	eb42 0303 	adc.w	r3, r2, r3
 8003cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cde:	f7fc ff6b 	bl	8000bb8 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <UART_SetConfig+0x2d4>)
 8003cea:	fba3 2301 	umull	r2, r3, r3, r1
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2264      	movs	r2, #100	; 0x64
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	1acb      	subs	r3, r1, r3
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cfe:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <UART_SetConfig+0x2d4>)
 8003d00:	fba3 2302 	umull	r2, r3, r3, r2
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d0c:	441c      	add	r4, r3
 8003d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	1891      	adds	r1, r2, r2
 8003d26:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d30:	4641      	mov	r1, r8
 8003d32:	1851      	adds	r1, r2, r1
 8003d34:	6339      	str	r1, [r7, #48]	; 0x30
 8003d36:	4649      	mov	r1, r9
 8003d38:	414b      	adcs	r3, r1
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d48:	4659      	mov	r1, fp
 8003d4a:	00cb      	lsls	r3, r1, #3
 8003d4c:	4651      	mov	r1, sl
 8003d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d52:	4651      	mov	r1, sl
 8003d54:	00ca      	lsls	r2, r1, #3
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d64:	464b      	mov	r3, r9
 8003d66:	460a      	mov	r2, r1
 8003d68:	eb42 0303 	adc.w	r3, r2, r3
 8003d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d84:	460b      	mov	r3, r1
 8003d86:	18db      	adds	r3, r3, r3
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	eb42 0303 	adc.w	r3, r2, r3
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d9a:	f7fc ff0d 	bl	8000bb8 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <UART_SetConfig+0x2d4>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	2164      	movs	r1, #100	; 0x64
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	3332      	adds	r3, #50	; 0x32
 8003db6:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <UART_SetConfig+0x2d4>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	f003 0207 	and.w	r2, r3, #7
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4422      	add	r2, r4
 8003dca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dcc:	e105      	b.n	8003fda <UART_SetConfig+0x4d6>
 8003dce:	bf00      	nop
 8003dd0:	40011000 	.word	0x40011000
 8003dd4:	40011400 	.word	0x40011400
 8003dd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003de6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003dee:	4642      	mov	r2, r8
 8003df0:	464b      	mov	r3, r9
 8003df2:	1891      	adds	r1, r2, r2
 8003df4:	6239      	str	r1, [r7, #32]
 8003df6:	415b      	adcs	r3, r3
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dfe:	4641      	mov	r1, r8
 8003e00:	1854      	adds	r4, r2, r1
 8003e02:	4649      	mov	r1, r9
 8003e04:	eb43 0501 	adc.w	r5, r3, r1
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	00eb      	lsls	r3, r5, #3
 8003e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e16:	00e2      	lsls	r2, r4, #3
 8003e18:	4614      	mov	r4, r2
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	4643      	mov	r3, r8
 8003e1e:	18e3      	adds	r3, r4, r3
 8003e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e24:	464b      	mov	r3, r9
 8003e26:	eb45 0303 	adc.w	r3, r5, r3
 8003e2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	008b      	lsls	r3, r1, #2
 8003e4e:	4621      	mov	r1, r4
 8003e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e54:	4621      	mov	r1, r4
 8003e56:	008a      	lsls	r2, r1, #2
 8003e58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e5c:	f7fc feac 	bl	8000bb8 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4b60      	ldr	r3, [pc, #384]	; (8003fe8 <UART_SetConfig+0x4e4>)
 8003e66:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	011c      	lsls	r4, r3, #4
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	61b9      	str	r1, [r7, #24]
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e90:	4641      	mov	r1, r8
 8003e92:	1851      	adds	r1, r2, r1
 8003e94:	6139      	str	r1, [r7, #16]
 8003e96:	4649      	mov	r1, r9
 8003e98:	414b      	adcs	r3, r1
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	00cb      	lsls	r3, r1, #3
 8003eac:	4651      	mov	r1, sl
 8003eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	00ca      	lsls	r2, r1, #3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ee8:	4649      	mov	r1, r9
 8003eea:	008b      	lsls	r3, r1, #2
 8003eec:	4641      	mov	r1, r8
 8003eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	008a      	lsls	r2, r1, #2
 8003ef6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003efa:	f7fc fe5d 	bl	8000bb8 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <UART_SetConfig+0x4e4>)
 8003f04:	fba3 1302 	umull	r1, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	2164      	movs	r1, #100	; 0x64
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	3332      	adds	r3, #50	; 0x32
 8003f16:	4a34      	ldr	r2, [pc, #208]	; (8003fe8 <UART_SetConfig+0x4e4>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f22:	441c      	add	r4, r3
 8003f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f28:	2200      	movs	r2, #0
 8003f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8003f2c:	677a      	str	r2, [r7, #116]	; 0x74
 8003f2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f32:	4642      	mov	r2, r8
 8003f34:	464b      	mov	r3, r9
 8003f36:	1891      	adds	r1, r2, r2
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	415b      	adcs	r3, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f42:	4641      	mov	r1, r8
 8003f44:	1851      	adds	r1, r2, r1
 8003f46:	6039      	str	r1, [r7, #0]
 8003f48:	4649      	mov	r1, r9
 8003f4a:	414b      	adcs	r3, r1
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f5a:	4659      	mov	r1, fp
 8003f5c:	00cb      	lsls	r3, r1, #3
 8003f5e:	4651      	mov	r1, sl
 8003f60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f64:	4651      	mov	r1, sl
 8003f66:	00ca      	lsls	r2, r1, #3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4642      	mov	r2, r8
 8003f70:	189b      	adds	r3, r3, r2
 8003f72:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f74:	464b      	mov	r3, r9
 8003f76:	460a      	mov	r2, r1
 8003f78:	eb42 0303 	adc.w	r3, r2, r3
 8003f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	663b      	str	r3, [r7, #96]	; 0x60
 8003f88:	667a      	str	r2, [r7, #100]	; 0x64
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f96:	4649      	mov	r1, r9
 8003f98:	008b      	lsls	r3, r1, #2
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	008a      	lsls	r2, r1, #2
 8003fa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fa8:	f7fc fe06 	bl	8000bb8 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <UART_SetConfig+0x4e4>)
 8003fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2164      	movs	r1, #100	; 0x64
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	3332      	adds	r3, #50	; 0x32
 8003fc4:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <UART_SetConfig+0x4e4>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	f003 020f 	and.w	r2, r3, #15
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4422      	add	r2, r4
 8003fd8:	609a      	str	r2, [r3, #8]
}
 8003fda:	bf00      	nop
 8003fdc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe6:	bf00      	nop
 8003fe8:	51eb851f 	.word	0x51eb851f

08003fec <__errno>:
 8003fec:	4b01      	ldr	r3, [pc, #4]	; (8003ff4 <__errno+0x8>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000010 	.word	0x20000010

08003ff8 <__libc_init_array>:
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	4d0d      	ldr	r5, [pc, #52]	; (8004030 <__libc_init_array+0x38>)
 8003ffc:	4c0d      	ldr	r4, [pc, #52]	; (8004034 <__libc_init_array+0x3c>)
 8003ffe:	1b64      	subs	r4, r4, r5
 8004000:	10a4      	asrs	r4, r4, #2
 8004002:	2600      	movs	r6, #0
 8004004:	42a6      	cmp	r6, r4
 8004006:	d109      	bne.n	800401c <__libc_init_array+0x24>
 8004008:	4d0b      	ldr	r5, [pc, #44]	; (8004038 <__libc_init_array+0x40>)
 800400a:	4c0c      	ldr	r4, [pc, #48]	; (800403c <__libc_init_array+0x44>)
 800400c:	f002 ff04 	bl	8006e18 <_init>
 8004010:	1b64      	subs	r4, r4, r5
 8004012:	10a4      	asrs	r4, r4, #2
 8004014:	2600      	movs	r6, #0
 8004016:	42a6      	cmp	r6, r4
 8004018:	d105      	bne.n	8004026 <__libc_init_array+0x2e>
 800401a:	bd70      	pop	{r4, r5, r6, pc}
 800401c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004020:	4798      	blx	r3
 8004022:	3601      	adds	r6, #1
 8004024:	e7ee      	b.n	8004004 <__libc_init_array+0xc>
 8004026:	f855 3b04 	ldr.w	r3, [r5], #4
 800402a:	4798      	blx	r3
 800402c:	3601      	adds	r6, #1
 800402e:	e7f2      	b.n	8004016 <__libc_init_array+0x1e>
 8004030:	08007274 	.word	0x08007274
 8004034:	08007274 	.word	0x08007274
 8004038:	08007274 	.word	0x08007274
 800403c:	08007278 	.word	0x08007278

08004040 <memset>:
 8004040:	4402      	add	r2, r0
 8004042:	4603      	mov	r3, r0
 8004044:	4293      	cmp	r3, r2
 8004046:	d100      	bne.n	800404a <memset+0xa>
 8004048:	4770      	bx	lr
 800404a:	f803 1b01 	strb.w	r1, [r3], #1
 800404e:	e7f9      	b.n	8004044 <memset+0x4>

08004050 <__cvt>:
 8004050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004054:	ec55 4b10 	vmov	r4, r5, d0
 8004058:	2d00      	cmp	r5, #0
 800405a:	460e      	mov	r6, r1
 800405c:	4619      	mov	r1, r3
 800405e:	462b      	mov	r3, r5
 8004060:	bfbb      	ittet	lt
 8004062:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004066:	461d      	movlt	r5, r3
 8004068:	2300      	movge	r3, #0
 800406a:	232d      	movlt	r3, #45	; 0x2d
 800406c:	700b      	strb	r3, [r1, #0]
 800406e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004070:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004074:	4691      	mov	r9, r2
 8004076:	f023 0820 	bic.w	r8, r3, #32
 800407a:	bfbc      	itt	lt
 800407c:	4622      	movlt	r2, r4
 800407e:	4614      	movlt	r4, r2
 8004080:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004084:	d005      	beq.n	8004092 <__cvt+0x42>
 8004086:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800408a:	d100      	bne.n	800408e <__cvt+0x3e>
 800408c:	3601      	adds	r6, #1
 800408e:	2102      	movs	r1, #2
 8004090:	e000      	b.n	8004094 <__cvt+0x44>
 8004092:	2103      	movs	r1, #3
 8004094:	ab03      	add	r3, sp, #12
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	ab02      	add	r3, sp, #8
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	ec45 4b10 	vmov	d0, r4, r5
 80040a0:	4653      	mov	r3, sl
 80040a2:	4632      	mov	r2, r6
 80040a4:	f000 fcec 	bl	8004a80 <_dtoa_r>
 80040a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040ac:	4607      	mov	r7, r0
 80040ae:	d102      	bne.n	80040b6 <__cvt+0x66>
 80040b0:	f019 0f01 	tst.w	r9, #1
 80040b4:	d022      	beq.n	80040fc <__cvt+0xac>
 80040b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040ba:	eb07 0906 	add.w	r9, r7, r6
 80040be:	d110      	bne.n	80040e2 <__cvt+0x92>
 80040c0:	783b      	ldrb	r3, [r7, #0]
 80040c2:	2b30      	cmp	r3, #48	; 0x30
 80040c4:	d10a      	bne.n	80040dc <__cvt+0x8c>
 80040c6:	2200      	movs	r2, #0
 80040c8:	2300      	movs	r3, #0
 80040ca:	4620      	mov	r0, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	f7fc fd03 	bl	8000ad8 <__aeabi_dcmpeq>
 80040d2:	b918      	cbnz	r0, 80040dc <__cvt+0x8c>
 80040d4:	f1c6 0601 	rsb	r6, r6, #1
 80040d8:	f8ca 6000 	str.w	r6, [sl]
 80040dc:	f8da 3000 	ldr.w	r3, [sl]
 80040e0:	4499      	add	r9, r3
 80040e2:	2200      	movs	r2, #0
 80040e4:	2300      	movs	r3, #0
 80040e6:	4620      	mov	r0, r4
 80040e8:	4629      	mov	r1, r5
 80040ea:	f7fc fcf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80040ee:	b108      	cbz	r0, 80040f4 <__cvt+0xa4>
 80040f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80040f4:	2230      	movs	r2, #48	; 0x30
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	454b      	cmp	r3, r9
 80040fa:	d307      	bcc.n	800410c <__cvt+0xbc>
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004100:	1bdb      	subs	r3, r3, r7
 8004102:	4638      	mov	r0, r7
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	b004      	add	sp, #16
 8004108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800410c:	1c59      	adds	r1, r3, #1
 800410e:	9103      	str	r1, [sp, #12]
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e7f0      	b.n	80040f6 <__cvt+0xa6>

08004114 <__exponent>:
 8004114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004116:	4603      	mov	r3, r0
 8004118:	2900      	cmp	r1, #0
 800411a:	bfb8      	it	lt
 800411c:	4249      	neglt	r1, r1
 800411e:	f803 2b02 	strb.w	r2, [r3], #2
 8004122:	bfb4      	ite	lt
 8004124:	222d      	movlt	r2, #45	; 0x2d
 8004126:	222b      	movge	r2, #43	; 0x2b
 8004128:	2909      	cmp	r1, #9
 800412a:	7042      	strb	r2, [r0, #1]
 800412c:	dd2a      	ble.n	8004184 <__exponent+0x70>
 800412e:	f10d 0407 	add.w	r4, sp, #7
 8004132:	46a4      	mov	ip, r4
 8004134:	270a      	movs	r7, #10
 8004136:	46a6      	mov	lr, r4
 8004138:	460a      	mov	r2, r1
 800413a:	fb91 f6f7 	sdiv	r6, r1, r7
 800413e:	fb07 1516 	mls	r5, r7, r6, r1
 8004142:	3530      	adds	r5, #48	; 0x30
 8004144:	2a63      	cmp	r2, #99	; 0x63
 8004146:	f104 34ff 	add.w	r4, r4, #4294967295
 800414a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800414e:	4631      	mov	r1, r6
 8004150:	dcf1      	bgt.n	8004136 <__exponent+0x22>
 8004152:	3130      	adds	r1, #48	; 0x30
 8004154:	f1ae 0502 	sub.w	r5, lr, #2
 8004158:	f804 1c01 	strb.w	r1, [r4, #-1]
 800415c:	1c44      	adds	r4, r0, #1
 800415e:	4629      	mov	r1, r5
 8004160:	4561      	cmp	r1, ip
 8004162:	d30a      	bcc.n	800417a <__exponent+0x66>
 8004164:	f10d 0209 	add.w	r2, sp, #9
 8004168:	eba2 020e 	sub.w	r2, r2, lr
 800416c:	4565      	cmp	r5, ip
 800416e:	bf88      	it	hi
 8004170:	2200      	movhi	r2, #0
 8004172:	4413      	add	r3, r2
 8004174:	1a18      	subs	r0, r3, r0
 8004176:	b003      	add	sp, #12
 8004178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800417a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800417e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004182:	e7ed      	b.n	8004160 <__exponent+0x4c>
 8004184:	2330      	movs	r3, #48	; 0x30
 8004186:	3130      	adds	r1, #48	; 0x30
 8004188:	7083      	strb	r3, [r0, #2]
 800418a:	70c1      	strb	r1, [r0, #3]
 800418c:	1d03      	adds	r3, r0, #4
 800418e:	e7f1      	b.n	8004174 <__exponent+0x60>

08004190 <_printf_float>:
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	ed2d 8b02 	vpush	{d8}
 8004198:	b08d      	sub	sp, #52	; 0x34
 800419a:	460c      	mov	r4, r1
 800419c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80041a0:	4616      	mov	r6, r2
 80041a2:	461f      	mov	r7, r3
 80041a4:	4605      	mov	r5, r0
 80041a6:	f001 fa59 	bl	800565c <_localeconv_r>
 80041aa:	f8d0 a000 	ldr.w	sl, [r0]
 80041ae:	4650      	mov	r0, sl
 80041b0:	f7fc f816 	bl	80001e0 <strlen>
 80041b4:	2300      	movs	r3, #0
 80041b6:	930a      	str	r3, [sp, #40]	; 0x28
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	9305      	str	r3, [sp, #20]
 80041bc:	f8d8 3000 	ldr.w	r3, [r8]
 80041c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80041c4:	3307      	adds	r3, #7
 80041c6:	f023 0307 	bic.w	r3, r3, #7
 80041ca:	f103 0208 	add.w	r2, r3, #8
 80041ce:	f8c8 2000 	str.w	r2, [r8]
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80041de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041e2:	9307      	str	r3, [sp, #28]
 80041e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80041e8:	ee08 0a10 	vmov	s16, r0
 80041ec:	4b9f      	ldr	r3, [pc, #636]	; (800446c <_printf_float+0x2dc>)
 80041ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041f2:	f04f 32ff 	mov.w	r2, #4294967295
 80041f6:	f7fc fca1 	bl	8000b3c <__aeabi_dcmpun>
 80041fa:	bb88      	cbnz	r0, 8004260 <_printf_float+0xd0>
 80041fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004200:	4b9a      	ldr	r3, [pc, #616]	; (800446c <_printf_float+0x2dc>)
 8004202:	f04f 32ff 	mov.w	r2, #4294967295
 8004206:	f7fc fc7b 	bl	8000b00 <__aeabi_dcmple>
 800420a:	bb48      	cbnz	r0, 8004260 <_printf_float+0xd0>
 800420c:	2200      	movs	r2, #0
 800420e:	2300      	movs	r3, #0
 8004210:	4640      	mov	r0, r8
 8004212:	4649      	mov	r1, r9
 8004214:	f7fc fc6a 	bl	8000aec <__aeabi_dcmplt>
 8004218:	b110      	cbz	r0, 8004220 <_printf_float+0x90>
 800421a:	232d      	movs	r3, #45	; 0x2d
 800421c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004220:	4b93      	ldr	r3, [pc, #588]	; (8004470 <_printf_float+0x2e0>)
 8004222:	4894      	ldr	r0, [pc, #592]	; (8004474 <_printf_float+0x2e4>)
 8004224:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004228:	bf94      	ite	ls
 800422a:	4698      	movls	r8, r3
 800422c:	4680      	movhi	r8, r0
 800422e:	2303      	movs	r3, #3
 8004230:	6123      	str	r3, [r4, #16]
 8004232:	9b05      	ldr	r3, [sp, #20]
 8004234:	f023 0204 	bic.w	r2, r3, #4
 8004238:	6022      	str	r2, [r4, #0]
 800423a:	f04f 0900 	mov.w	r9, #0
 800423e:	9700      	str	r7, [sp, #0]
 8004240:	4633      	mov	r3, r6
 8004242:	aa0b      	add	r2, sp, #44	; 0x2c
 8004244:	4621      	mov	r1, r4
 8004246:	4628      	mov	r0, r5
 8004248:	f000 f9d8 	bl	80045fc <_printf_common>
 800424c:	3001      	adds	r0, #1
 800424e:	f040 8090 	bne.w	8004372 <_printf_float+0x1e2>
 8004252:	f04f 30ff 	mov.w	r0, #4294967295
 8004256:	b00d      	add	sp, #52	; 0x34
 8004258:	ecbd 8b02 	vpop	{d8}
 800425c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	4640      	mov	r0, r8
 8004266:	4649      	mov	r1, r9
 8004268:	f7fc fc68 	bl	8000b3c <__aeabi_dcmpun>
 800426c:	b140      	cbz	r0, 8004280 <_printf_float+0xf0>
 800426e:	464b      	mov	r3, r9
 8004270:	2b00      	cmp	r3, #0
 8004272:	bfbc      	itt	lt
 8004274:	232d      	movlt	r3, #45	; 0x2d
 8004276:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800427a:	487f      	ldr	r0, [pc, #508]	; (8004478 <_printf_float+0x2e8>)
 800427c:	4b7f      	ldr	r3, [pc, #508]	; (800447c <_printf_float+0x2ec>)
 800427e:	e7d1      	b.n	8004224 <_printf_float+0x94>
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004286:	9206      	str	r2, [sp, #24]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	d13f      	bne.n	800430c <_printf_float+0x17c>
 800428c:	2306      	movs	r3, #6
 800428e:	6063      	str	r3, [r4, #4]
 8004290:	9b05      	ldr	r3, [sp, #20]
 8004292:	6861      	ldr	r1, [r4, #4]
 8004294:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004298:	2300      	movs	r3, #0
 800429a:	9303      	str	r3, [sp, #12]
 800429c:	ab0a      	add	r3, sp, #40	; 0x28
 800429e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80042a2:	ab09      	add	r3, sp, #36	; 0x24
 80042a4:	ec49 8b10 	vmov	d0, r8, r9
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	6022      	str	r2, [r4, #0]
 80042ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042b0:	4628      	mov	r0, r5
 80042b2:	f7ff fecd 	bl	8004050 <__cvt>
 80042b6:	9b06      	ldr	r3, [sp, #24]
 80042b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042ba:	2b47      	cmp	r3, #71	; 0x47
 80042bc:	4680      	mov	r8, r0
 80042be:	d108      	bne.n	80042d2 <_printf_float+0x142>
 80042c0:	1cc8      	adds	r0, r1, #3
 80042c2:	db02      	blt.n	80042ca <_printf_float+0x13a>
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	4299      	cmp	r1, r3
 80042c8:	dd41      	ble.n	800434e <_printf_float+0x1be>
 80042ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80042ce:	fa5f fb8b 	uxtb.w	fp, fp
 80042d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042d6:	d820      	bhi.n	800431a <_printf_float+0x18a>
 80042d8:	3901      	subs	r1, #1
 80042da:	465a      	mov	r2, fp
 80042dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042e0:	9109      	str	r1, [sp, #36]	; 0x24
 80042e2:	f7ff ff17 	bl	8004114 <__exponent>
 80042e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042e8:	1813      	adds	r3, r2, r0
 80042ea:	2a01      	cmp	r2, #1
 80042ec:	4681      	mov	r9, r0
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	dc02      	bgt.n	80042f8 <_printf_float+0x168>
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	07d2      	lsls	r2, r2, #31
 80042f6:	d501      	bpl.n	80042fc <_printf_float+0x16c>
 80042f8:	3301      	adds	r3, #1
 80042fa:	6123      	str	r3, [r4, #16]
 80042fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004300:	2b00      	cmp	r3, #0
 8004302:	d09c      	beq.n	800423e <_printf_float+0xae>
 8004304:	232d      	movs	r3, #45	; 0x2d
 8004306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430a:	e798      	b.n	800423e <_printf_float+0xae>
 800430c:	9a06      	ldr	r2, [sp, #24]
 800430e:	2a47      	cmp	r2, #71	; 0x47
 8004310:	d1be      	bne.n	8004290 <_printf_float+0x100>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1bc      	bne.n	8004290 <_printf_float+0x100>
 8004316:	2301      	movs	r3, #1
 8004318:	e7b9      	b.n	800428e <_printf_float+0xfe>
 800431a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800431e:	d118      	bne.n	8004352 <_printf_float+0x1c2>
 8004320:	2900      	cmp	r1, #0
 8004322:	6863      	ldr	r3, [r4, #4]
 8004324:	dd0b      	ble.n	800433e <_printf_float+0x1ae>
 8004326:	6121      	str	r1, [r4, #16]
 8004328:	b913      	cbnz	r3, 8004330 <_printf_float+0x1a0>
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	07d0      	lsls	r0, r2, #31
 800432e:	d502      	bpl.n	8004336 <_printf_float+0x1a6>
 8004330:	3301      	adds	r3, #1
 8004332:	440b      	add	r3, r1
 8004334:	6123      	str	r3, [r4, #16]
 8004336:	65a1      	str	r1, [r4, #88]	; 0x58
 8004338:	f04f 0900 	mov.w	r9, #0
 800433c:	e7de      	b.n	80042fc <_printf_float+0x16c>
 800433e:	b913      	cbnz	r3, 8004346 <_printf_float+0x1b6>
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	07d2      	lsls	r2, r2, #31
 8004344:	d501      	bpl.n	800434a <_printf_float+0x1ba>
 8004346:	3302      	adds	r3, #2
 8004348:	e7f4      	b.n	8004334 <_printf_float+0x1a4>
 800434a:	2301      	movs	r3, #1
 800434c:	e7f2      	b.n	8004334 <_printf_float+0x1a4>
 800434e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004354:	4299      	cmp	r1, r3
 8004356:	db05      	blt.n	8004364 <_printf_float+0x1d4>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	6121      	str	r1, [r4, #16]
 800435c:	07d8      	lsls	r0, r3, #31
 800435e:	d5ea      	bpl.n	8004336 <_printf_float+0x1a6>
 8004360:	1c4b      	adds	r3, r1, #1
 8004362:	e7e7      	b.n	8004334 <_printf_float+0x1a4>
 8004364:	2900      	cmp	r1, #0
 8004366:	bfd4      	ite	le
 8004368:	f1c1 0202 	rsble	r2, r1, #2
 800436c:	2201      	movgt	r2, #1
 800436e:	4413      	add	r3, r2
 8004370:	e7e0      	b.n	8004334 <_printf_float+0x1a4>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	055a      	lsls	r2, r3, #21
 8004376:	d407      	bmi.n	8004388 <_printf_float+0x1f8>
 8004378:	6923      	ldr	r3, [r4, #16]
 800437a:	4642      	mov	r2, r8
 800437c:	4631      	mov	r1, r6
 800437e:	4628      	mov	r0, r5
 8004380:	47b8      	blx	r7
 8004382:	3001      	adds	r0, #1
 8004384:	d12c      	bne.n	80043e0 <_printf_float+0x250>
 8004386:	e764      	b.n	8004252 <_printf_float+0xc2>
 8004388:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800438c:	f240 80e0 	bls.w	8004550 <_printf_float+0x3c0>
 8004390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004394:	2200      	movs	r2, #0
 8004396:	2300      	movs	r3, #0
 8004398:	f7fc fb9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800439c:	2800      	cmp	r0, #0
 800439e:	d034      	beq.n	800440a <_printf_float+0x27a>
 80043a0:	4a37      	ldr	r2, [pc, #220]	; (8004480 <_printf_float+0x2f0>)
 80043a2:	2301      	movs	r3, #1
 80043a4:	4631      	mov	r1, r6
 80043a6:	4628      	mov	r0, r5
 80043a8:	47b8      	blx	r7
 80043aa:	3001      	adds	r0, #1
 80043ac:	f43f af51 	beq.w	8004252 <_printf_float+0xc2>
 80043b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043b4:	429a      	cmp	r2, r3
 80043b6:	db02      	blt.n	80043be <_printf_float+0x22e>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	07d8      	lsls	r0, r3, #31
 80043bc:	d510      	bpl.n	80043e0 <_printf_float+0x250>
 80043be:	ee18 3a10 	vmov	r3, s16
 80043c2:	4652      	mov	r2, sl
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b8      	blx	r7
 80043ca:	3001      	adds	r0, #1
 80043cc:	f43f af41 	beq.w	8004252 <_printf_float+0xc2>
 80043d0:	f04f 0800 	mov.w	r8, #0
 80043d4:	f104 091a 	add.w	r9, r4, #26
 80043d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	4543      	cmp	r3, r8
 80043de:	dc09      	bgt.n	80043f4 <_printf_float+0x264>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	079b      	lsls	r3, r3, #30
 80043e4:	f100 8105 	bmi.w	80045f2 <_printf_float+0x462>
 80043e8:	68e0      	ldr	r0, [r4, #12]
 80043ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043ec:	4298      	cmp	r0, r3
 80043ee:	bfb8      	it	lt
 80043f0:	4618      	movlt	r0, r3
 80043f2:	e730      	b.n	8004256 <_printf_float+0xc6>
 80043f4:	2301      	movs	r3, #1
 80043f6:	464a      	mov	r2, r9
 80043f8:	4631      	mov	r1, r6
 80043fa:	4628      	mov	r0, r5
 80043fc:	47b8      	blx	r7
 80043fe:	3001      	adds	r0, #1
 8004400:	f43f af27 	beq.w	8004252 <_printf_float+0xc2>
 8004404:	f108 0801 	add.w	r8, r8, #1
 8004408:	e7e6      	b.n	80043d8 <_printf_float+0x248>
 800440a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800440c:	2b00      	cmp	r3, #0
 800440e:	dc39      	bgt.n	8004484 <_printf_float+0x2f4>
 8004410:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <_printf_float+0x2f0>)
 8004412:	2301      	movs	r3, #1
 8004414:	4631      	mov	r1, r6
 8004416:	4628      	mov	r0, r5
 8004418:	47b8      	blx	r7
 800441a:	3001      	adds	r0, #1
 800441c:	f43f af19 	beq.w	8004252 <_printf_float+0xc2>
 8004420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004424:	4313      	orrs	r3, r2
 8004426:	d102      	bne.n	800442e <_printf_float+0x29e>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	07d9      	lsls	r1, r3, #31
 800442c:	d5d8      	bpl.n	80043e0 <_printf_float+0x250>
 800442e:	ee18 3a10 	vmov	r3, s16
 8004432:	4652      	mov	r2, sl
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	f43f af09 	beq.w	8004252 <_printf_float+0xc2>
 8004440:	f04f 0900 	mov.w	r9, #0
 8004444:	f104 0a1a 	add.w	sl, r4, #26
 8004448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800444a:	425b      	negs	r3, r3
 800444c:	454b      	cmp	r3, r9
 800444e:	dc01      	bgt.n	8004454 <_printf_float+0x2c4>
 8004450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004452:	e792      	b.n	800437a <_printf_float+0x1ea>
 8004454:	2301      	movs	r3, #1
 8004456:	4652      	mov	r2, sl
 8004458:	4631      	mov	r1, r6
 800445a:	4628      	mov	r0, r5
 800445c:	47b8      	blx	r7
 800445e:	3001      	adds	r0, #1
 8004460:	f43f aef7 	beq.w	8004252 <_printf_float+0xc2>
 8004464:	f109 0901 	add.w	r9, r9, #1
 8004468:	e7ee      	b.n	8004448 <_printf_float+0x2b8>
 800446a:	bf00      	nop
 800446c:	7fefffff 	.word	0x7fefffff
 8004470:	08006e94 	.word	0x08006e94
 8004474:	08006e98 	.word	0x08006e98
 8004478:	08006ea0 	.word	0x08006ea0
 800447c:	08006e9c 	.word	0x08006e9c
 8004480:	08006ea4 	.word	0x08006ea4
 8004484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004488:	429a      	cmp	r2, r3
 800448a:	bfa8      	it	ge
 800448c:	461a      	movge	r2, r3
 800448e:	2a00      	cmp	r2, #0
 8004490:	4691      	mov	r9, r2
 8004492:	dc37      	bgt.n	8004504 <_printf_float+0x374>
 8004494:	f04f 0b00 	mov.w	fp, #0
 8004498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800449c:	f104 021a 	add.w	r2, r4, #26
 80044a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044a2:	9305      	str	r3, [sp, #20]
 80044a4:	eba3 0309 	sub.w	r3, r3, r9
 80044a8:	455b      	cmp	r3, fp
 80044aa:	dc33      	bgt.n	8004514 <_printf_float+0x384>
 80044ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044b0:	429a      	cmp	r2, r3
 80044b2:	db3b      	blt.n	800452c <_printf_float+0x39c>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	07da      	lsls	r2, r3, #31
 80044b8:	d438      	bmi.n	800452c <_printf_float+0x39c>
 80044ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044bc:	9a05      	ldr	r2, [sp, #20]
 80044be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044c0:	1a9a      	subs	r2, r3, r2
 80044c2:	eba3 0901 	sub.w	r9, r3, r1
 80044c6:	4591      	cmp	r9, r2
 80044c8:	bfa8      	it	ge
 80044ca:	4691      	movge	r9, r2
 80044cc:	f1b9 0f00 	cmp.w	r9, #0
 80044d0:	dc35      	bgt.n	800453e <_printf_float+0x3ae>
 80044d2:	f04f 0800 	mov.w	r8, #0
 80044d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044da:	f104 0a1a 	add.w	sl, r4, #26
 80044de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	eba3 0309 	sub.w	r3, r3, r9
 80044e8:	4543      	cmp	r3, r8
 80044ea:	f77f af79 	ble.w	80043e0 <_printf_float+0x250>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4652      	mov	r2, sl
 80044f2:	4631      	mov	r1, r6
 80044f4:	4628      	mov	r0, r5
 80044f6:	47b8      	blx	r7
 80044f8:	3001      	adds	r0, #1
 80044fa:	f43f aeaa 	beq.w	8004252 <_printf_float+0xc2>
 80044fe:	f108 0801 	add.w	r8, r8, #1
 8004502:	e7ec      	b.n	80044de <_printf_float+0x34e>
 8004504:	4613      	mov	r3, r2
 8004506:	4631      	mov	r1, r6
 8004508:	4642      	mov	r2, r8
 800450a:	4628      	mov	r0, r5
 800450c:	47b8      	blx	r7
 800450e:	3001      	adds	r0, #1
 8004510:	d1c0      	bne.n	8004494 <_printf_float+0x304>
 8004512:	e69e      	b.n	8004252 <_printf_float+0xc2>
 8004514:	2301      	movs	r3, #1
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	9205      	str	r2, [sp, #20]
 800451c:	47b8      	blx	r7
 800451e:	3001      	adds	r0, #1
 8004520:	f43f ae97 	beq.w	8004252 <_printf_float+0xc2>
 8004524:	9a05      	ldr	r2, [sp, #20]
 8004526:	f10b 0b01 	add.w	fp, fp, #1
 800452a:	e7b9      	b.n	80044a0 <_printf_float+0x310>
 800452c:	ee18 3a10 	vmov	r3, s16
 8004530:	4652      	mov	r2, sl
 8004532:	4631      	mov	r1, r6
 8004534:	4628      	mov	r0, r5
 8004536:	47b8      	blx	r7
 8004538:	3001      	adds	r0, #1
 800453a:	d1be      	bne.n	80044ba <_printf_float+0x32a>
 800453c:	e689      	b.n	8004252 <_printf_float+0xc2>
 800453e:	9a05      	ldr	r2, [sp, #20]
 8004540:	464b      	mov	r3, r9
 8004542:	4442      	add	r2, r8
 8004544:	4631      	mov	r1, r6
 8004546:	4628      	mov	r0, r5
 8004548:	47b8      	blx	r7
 800454a:	3001      	adds	r0, #1
 800454c:	d1c1      	bne.n	80044d2 <_printf_float+0x342>
 800454e:	e680      	b.n	8004252 <_printf_float+0xc2>
 8004550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004552:	2a01      	cmp	r2, #1
 8004554:	dc01      	bgt.n	800455a <_printf_float+0x3ca>
 8004556:	07db      	lsls	r3, r3, #31
 8004558:	d538      	bpl.n	80045cc <_printf_float+0x43c>
 800455a:	2301      	movs	r3, #1
 800455c:	4642      	mov	r2, r8
 800455e:	4631      	mov	r1, r6
 8004560:	4628      	mov	r0, r5
 8004562:	47b8      	blx	r7
 8004564:	3001      	adds	r0, #1
 8004566:	f43f ae74 	beq.w	8004252 <_printf_float+0xc2>
 800456a:	ee18 3a10 	vmov	r3, s16
 800456e:	4652      	mov	r2, sl
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	f43f ae6b 	beq.w	8004252 <_printf_float+0xc2>
 800457c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004580:	2200      	movs	r2, #0
 8004582:	2300      	movs	r3, #0
 8004584:	f7fc faa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004588:	b9d8      	cbnz	r0, 80045c2 <_printf_float+0x432>
 800458a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800458c:	f108 0201 	add.w	r2, r8, #1
 8004590:	3b01      	subs	r3, #1
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	d10e      	bne.n	80045ba <_printf_float+0x42a>
 800459c:	e659      	b.n	8004252 <_printf_float+0xc2>
 800459e:	2301      	movs	r3, #1
 80045a0:	4652      	mov	r2, sl
 80045a2:	4631      	mov	r1, r6
 80045a4:	4628      	mov	r0, r5
 80045a6:	47b8      	blx	r7
 80045a8:	3001      	adds	r0, #1
 80045aa:	f43f ae52 	beq.w	8004252 <_printf_float+0xc2>
 80045ae:	f108 0801 	add.w	r8, r8, #1
 80045b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	4543      	cmp	r3, r8
 80045b8:	dcf1      	bgt.n	800459e <_printf_float+0x40e>
 80045ba:	464b      	mov	r3, r9
 80045bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045c0:	e6dc      	b.n	800437c <_printf_float+0x1ec>
 80045c2:	f04f 0800 	mov.w	r8, #0
 80045c6:	f104 0a1a 	add.w	sl, r4, #26
 80045ca:	e7f2      	b.n	80045b2 <_printf_float+0x422>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4642      	mov	r2, r8
 80045d0:	e7df      	b.n	8004592 <_printf_float+0x402>
 80045d2:	2301      	movs	r3, #1
 80045d4:	464a      	mov	r2, r9
 80045d6:	4631      	mov	r1, r6
 80045d8:	4628      	mov	r0, r5
 80045da:	47b8      	blx	r7
 80045dc:	3001      	adds	r0, #1
 80045de:	f43f ae38 	beq.w	8004252 <_printf_float+0xc2>
 80045e2:	f108 0801 	add.w	r8, r8, #1
 80045e6:	68e3      	ldr	r3, [r4, #12]
 80045e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045ea:	1a5b      	subs	r3, r3, r1
 80045ec:	4543      	cmp	r3, r8
 80045ee:	dcf0      	bgt.n	80045d2 <_printf_float+0x442>
 80045f0:	e6fa      	b.n	80043e8 <_printf_float+0x258>
 80045f2:	f04f 0800 	mov.w	r8, #0
 80045f6:	f104 0919 	add.w	r9, r4, #25
 80045fa:	e7f4      	b.n	80045e6 <_printf_float+0x456>

080045fc <_printf_common>:
 80045fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	4616      	mov	r6, r2
 8004602:	4699      	mov	r9, r3
 8004604:	688a      	ldr	r2, [r1, #8]
 8004606:	690b      	ldr	r3, [r1, #16]
 8004608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800460c:	4293      	cmp	r3, r2
 800460e:	bfb8      	it	lt
 8004610:	4613      	movlt	r3, r2
 8004612:	6033      	str	r3, [r6, #0]
 8004614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004618:	4607      	mov	r7, r0
 800461a:	460c      	mov	r4, r1
 800461c:	b10a      	cbz	r2, 8004622 <_printf_common+0x26>
 800461e:	3301      	adds	r3, #1
 8004620:	6033      	str	r3, [r6, #0]
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	0699      	lsls	r1, r3, #26
 8004626:	bf42      	ittt	mi
 8004628:	6833      	ldrmi	r3, [r6, #0]
 800462a:	3302      	addmi	r3, #2
 800462c:	6033      	strmi	r3, [r6, #0]
 800462e:	6825      	ldr	r5, [r4, #0]
 8004630:	f015 0506 	ands.w	r5, r5, #6
 8004634:	d106      	bne.n	8004644 <_printf_common+0x48>
 8004636:	f104 0a19 	add.w	sl, r4, #25
 800463a:	68e3      	ldr	r3, [r4, #12]
 800463c:	6832      	ldr	r2, [r6, #0]
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	42ab      	cmp	r3, r5
 8004642:	dc26      	bgt.n	8004692 <_printf_common+0x96>
 8004644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004648:	1e13      	subs	r3, r2, #0
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	bf18      	it	ne
 800464e:	2301      	movne	r3, #1
 8004650:	0692      	lsls	r2, r2, #26
 8004652:	d42b      	bmi.n	80046ac <_printf_common+0xb0>
 8004654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004658:	4649      	mov	r1, r9
 800465a:	4638      	mov	r0, r7
 800465c:	47c0      	blx	r8
 800465e:	3001      	adds	r0, #1
 8004660:	d01e      	beq.n	80046a0 <_printf_common+0xa4>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	68e5      	ldr	r5, [r4, #12]
 8004666:	6832      	ldr	r2, [r6, #0]
 8004668:	f003 0306 	and.w	r3, r3, #6
 800466c:	2b04      	cmp	r3, #4
 800466e:	bf08      	it	eq
 8004670:	1aad      	subeq	r5, r5, r2
 8004672:	68a3      	ldr	r3, [r4, #8]
 8004674:	6922      	ldr	r2, [r4, #16]
 8004676:	bf0c      	ite	eq
 8004678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800467c:	2500      	movne	r5, #0
 800467e:	4293      	cmp	r3, r2
 8004680:	bfc4      	itt	gt
 8004682:	1a9b      	subgt	r3, r3, r2
 8004684:	18ed      	addgt	r5, r5, r3
 8004686:	2600      	movs	r6, #0
 8004688:	341a      	adds	r4, #26
 800468a:	42b5      	cmp	r5, r6
 800468c:	d11a      	bne.n	80046c4 <_printf_common+0xc8>
 800468e:	2000      	movs	r0, #0
 8004690:	e008      	b.n	80046a4 <_printf_common+0xa8>
 8004692:	2301      	movs	r3, #1
 8004694:	4652      	mov	r2, sl
 8004696:	4649      	mov	r1, r9
 8004698:	4638      	mov	r0, r7
 800469a:	47c0      	blx	r8
 800469c:	3001      	adds	r0, #1
 800469e:	d103      	bne.n	80046a8 <_printf_common+0xac>
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a8:	3501      	adds	r5, #1
 80046aa:	e7c6      	b.n	800463a <_printf_common+0x3e>
 80046ac:	18e1      	adds	r1, r4, r3
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	2030      	movs	r0, #48	; 0x30
 80046b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046b6:	4422      	add	r2, r4
 80046b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046c0:	3302      	adds	r3, #2
 80046c2:	e7c7      	b.n	8004654 <_printf_common+0x58>
 80046c4:	2301      	movs	r3, #1
 80046c6:	4622      	mov	r2, r4
 80046c8:	4649      	mov	r1, r9
 80046ca:	4638      	mov	r0, r7
 80046cc:	47c0      	blx	r8
 80046ce:	3001      	adds	r0, #1
 80046d0:	d0e6      	beq.n	80046a0 <_printf_common+0xa4>
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7d9      	b.n	800468a <_printf_common+0x8e>
	...

080046d8 <_printf_i>:
 80046d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046dc:	7e0f      	ldrb	r7, [r1, #24]
 80046de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046e0:	2f78      	cmp	r7, #120	; 0x78
 80046e2:	4691      	mov	r9, r2
 80046e4:	4680      	mov	r8, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	469a      	mov	sl, r3
 80046ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046ee:	d807      	bhi.n	8004700 <_printf_i+0x28>
 80046f0:	2f62      	cmp	r7, #98	; 0x62
 80046f2:	d80a      	bhi.n	800470a <_printf_i+0x32>
 80046f4:	2f00      	cmp	r7, #0
 80046f6:	f000 80d8 	beq.w	80048aa <_printf_i+0x1d2>
 80046fa:	2f58      	cmp	r7, #88	; 0x58
 80046fc:	f000 80a3 	beq.w	8004846 <_printf_i+0x16e>
 8004700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004708:	e03a      	b.n	8004780 <_printf_i+0xa8>
 800470a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800470e:	2b15      	cmp	r3, #21
 8004710:	d8f6      	bhi.n	8004700 <_printf_i+0x28>
 8004712:	a101      	add	r1, pc, #4	; (adr r1, 8004718 <_printf_i+0x40>)
 8004714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004718:	08004771 	.word	0x08004771
 800471c:	08004785 	.word	0x08004785
 8004720:	08004701 	.word	0x08004701
 8004724:	08004701 	.word	0x08004701
 8004728:	08004701 	.word	0x08004701
 800472c:	08004701 	.word	0x08004701
 8004730:	08004785 	.word	0x08004785
 8004734:	08004701 	.word	0x08004701
 8004738:	08004701 	.word	0x08004701
 800473c:	08004701 	.word	0x08004701
 8004740:	08004701 	.word	0x08004701
 8004744:	08004891 	.word	0x08004891
 8004748:	080047b5 	.word	0x080047b5
 800474c:	08004873 	.word	0x08004873
 8004750:	08004701 	.word	0x08004701
 8004754:	08004701 	.word	0x08004701
 8004758:	080048b3 	.word	0x080048b3
 800475c:	08004701 	.word	0x08004701
 8004760:	080047b5 	.word	0x080047b5
 8004764:	08004701 	.word	0x08004701
 8004768:	08004701 	.word	0x08004701
 800476c:	0800487b 	.word	0x0800487b
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	602a      	str	r2, [r5, #0]
 8004778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800477c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004780:	2301      	movs	r3, #1
 8004782:	e0a3      	b.n	80048cc <_printf_i+0x1f4>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	6829      	ldr	r1, [r5, #0]
 8004788:	0606      	lsls	r6, r0, #24
 800478a:	f101 0304 	add.w	r3, r1, #4
 800478e:	d50a      	bpl.n	80047a6 <_printf_i+0xce>
 8004790:	680e      	ldr	r6, [r1, #0]
 8004792:	602b      	str	r3, [r5, #0]
 8004794:	2e00      	cmp	r6, #0
 8004796:	da03      	bge.n	80047a0 <_printf_i+0xc8>
 8004798:	232d      	movs	r3, #45	; 0x2d
 800479a:	4276      	negs	r6, r6
 800479c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a0:	485e      	ldr	r0, [pc, #376]	; (800491c <_printf_i+0x244>)
 80047a2:	230a      	movs	r3, #10
 80047a4:	e019      	b.n	80047da <_printf_i+0x102>
 80047a6:	680e      	ldr	r6, [r1, #0]
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047ae:	bf18      	it	ne
 80047b0:	b236      	sxthne	r6, r6
 80047b2:	e7ef      	b.n	8004794 <_printf_i+0xbc>
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	1d19      	adds	r1, r3, #4
 80047ba:	6029      	str	r1, [r5, #0]
 80047bc:	0601      	lsls	r1, r0, #24
 80047be:	d501      	bpl.n	80047c4 <_printf_i+0xec>
 80047c0:	681e      	ldr	r6, [r3, #0]
 80047c2:	e002      	b.n	80047ca <_printf_i+0xf2>
 80047c4:	0646      	lsls	r6, r0, #25
 80047c6:	d5fb      	bpl.n	80047c0 <_printf_i+0xe8>
 80047c8:	881e      	ldrh	r6, [r3, #0]
 80047ca:	4854      	ldr	r0, [pc, #336]	; (800491c <_printf_i+0x244>)
 80047cc:	2f6f      	cmp	r7, #111	; 0x6f
 80047ce:	bf0c      	ite	eq
 80047d0:	2308      	moveq	r3, #8
 80047d2:	230a      	movne	r3, #10
 80047d4:	2100      	movs	r1, #0
 80047d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047da:	6865      	ldr	r5, [r4, #4]
 80047dc:	60a5      	str	r5, [r4, #8]
 80047de:	2d00      	cmp	r5, #0
 80047e0:	bfa2      	ittt	ge
 80047e2:	6821      	ldrge	r1, [r4, #0]
 80047e4:	f021 0104 	bicge.w	r1, r1, #4
 80047e8:	6021      	strge	r1, [r4, #0]
 80047ea:	b90e      	cbnz	r6, 80047f0 <_printf_i+0x118>
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	d04d      	beq.n	800488c <_printf_i+0x1b4>
 80047f0:	4615      	mov	r5, r2
 80047f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80047f6:	fb03 6711 	mls	r7, r3, r1, r6
 80047fa:	5dc7      	ldrb	r7, [r0, r7]
 80047fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004800:	4637      	mov	r7, r6
 8004802:	42bb      	cmp	r3, r7
 8004804:	460e      	mov	r6, r1
 8004806:	d9f4      	bls.n	80047f2 <_printf_i+0x11a>
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10b      	bne.n	8004824 <_printf_i+0x14c>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	07de      	lsls	r6, r3, #31
 8004810:	d508      	bpl.n	8004824 <_printf_i+0x14c>
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6861      	ldr	r1, [r4, #4]
 8004816:	4299      	cmp	r1, r3
 8004818:	bfde      	ittt	le
 800481a:	2330      	movle	r3, #48	; 0x30
 800481c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004820:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004824:	1b52      	subs	r2, r2, r5
 8004826:	6122      	str	r2, [r4, #16]
 8004828:	f8cd a000 	str.w	sl, [sp]
 800482c:	464b      	mov	r3, r9
 800482e:	aa03      	add	r2, sp, #12
 8004830:	4621      	mov	r1, r4
 8004832:	4640      	mov	r0, r8
 8004834:	f7ff fee2 	bl	80045fc <_printf_common>
 8004838:	3001      	adds	r0, #1
 800483a:	d14c      	bne.n	80048d6 <_printf_i+0x1fe>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	b004      	add	sp, #16
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	4835      	ldr	r0, [pc, #212]	; (800491c <_printf_i+0x244>)
 8004848:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800484c:	6829      	ldr	r1, [r5, #0]
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	f851 6b04 	ldr.w	r6, [r1], #4
 8004854:	6029      	str	r1, [r5, #0]
 8004856:	061d      	lsls	r5, r3, #24
 8004858:	d514      	bpl.n	8004884 <_printf_i+0x1ac>
 800485a:	07df      	lsls	r7, r3, #31
 800485c:	bf44      	itt	mi
 800485e:	f043 0320 	orrmi.w	r3, r3, #32
 8004862:	6023      	strmi	r3, [r4, #0]
 8004864:	b91e      	cbnz	r6, 800486e <_printf_i+0x196>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	f023 0320 	bic.w	r3, r3, #32
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	2310      	movs	r3, #16
 8004870:	e7b0      	b.n	80047d4 <_printf_i+0xfc>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f043 0320 	orr.w	r3, r3, #32
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	2378      	movs	r3, #120	; 0x78
 800487c:	4828      	ldr	r0, [pc, #160]	; (8004920 <_printf_i+0x248>)
 800487e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004882:	e7e3      	b.n	800484c <_printf_i+0x174>
 8004884:	0659      	lsls	r1, r3, #25
 8004886:	bf48      	it	mi
 8004888:	b2b6      	uxthmi	r6, r6
 800488a:	e7e6      	b.n	800485a <_printf_i+0x182>
 800488c:	4615      	mov	r5, r2
 800488e:	e7bb      	b.n	8004808 <_printf_i+0x130>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	6826      	ldr	r6, [r4, #0]
 8004894:	6961      	ldr	r1, [r4, #20]
 8004896:	1d18      	adds	r0, r3, #4
 8004898:	6028      	str	r0, [r5, #0]
 800489a:	0635      	lsls	r5, r6, #24
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	d501      	bpl.n	80048a4 <_printf_i+0x1cc>
 80048a0:	6019      	str	r1, [r3, #0]
 80048a2:	e002      	b.n	80048aa <_printf_i+0x1d2>
 80048a4:	0670      	lsls	r0, r6, #25
 80048a6:	d5fb      	bpl.n	80048a0 <_printf_i+0x1c8>
 80048a8:	8019      	strh	r1, [r3, #0]
 80048aa:	2300      	movs	r3, #0
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	4615      	mov	r5, r2
 80048b0:	e7ba      	b.n	8004828 <_printf_i+0x150>
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	1d1a      	adds	r2, r3, #4
 80048b6:	602a      	str	r2, [r5, #0]
 80048b8:	681d      	ldr	r5, [r3, #0]
 80048ba:	6862      	ldr	r2, [r4, #4]
 80048bc:	2100      	movs	r1, #0
 80048be:	4628      	mov	r0, r5
 80048c0:	f7fb fc96 	bl	80001f0 <memchr>
 80048c4:	b108      	cbz	r0, 80048ca <_printf_i+0x1f2>
 80048c6:	1b40      	subs	r0, r0, r5
 80048c8:	6060      	str	r0, [r4, #4]
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	2300      	movs	r3, #0
 80048d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d4:	e7a8      	b.n	8004828 <_printf_i+0x150>
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	462a      	mov	r2, r5
 80048da:	4649      	mov	r1, r9
 80048dc:	4640      	mov	r0, r8
 80048de:	47d0      	blx	sl
 80048e0:	3001      	adds	r0, #1
 80048e2:	d0ab      	beq.n	800483c <_printf_i+0x164>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	079b      	lsls	r3, r3, #30
 80048e8:	d413      	bmi.n	8004912 <_printf_i+0x23a>
 80048ea:	68e0      	ldr	r0, [r4, #12]
 80048ec:	9b03      	ldr	r3, [sp, #12]
 80048ee:	4298      	cmp	r0, r3
 80048f0:	bfb8      	it	lt
 80048f2:	4618      	movlt	r0, r3
 80048f4:	e7a4      	b.n	8004840 <_printf_i+0x168>
 80048f6:	2301      	movs	r3, #1
 80048f8:	4632      	mov	r2, r6
 80048fa:	4649      	mov	r1, r9
 80048fc:	4640      	mov	r0, r8
 80048fe:	47d0      	blx	sl
 8004900:	3001      	adds	r0, #1
 8004902:	d09b      	beq.n	800483c <_printf_i+0x164>
 8004904:	3501      	adds	r5, #1
 8004906:	68e3      	ldr	r3, [r4, #12]
 8004908:	9903      	ldr	r1, [sp, #12]
 800490a:	1a5b      	subs	r3, r3, r1
 800490c:	42ab      	cmp	r3, r5
 800490e:	dcf2      	bgt.n	80048f6 <_printf_i+0x21e>
 8004910:	e7eb      	b.n	80048ea <_printf_i+0x212>
 8004912:	2500      	movs	r5, #0
 8004914:	f104 0619 	add.w	r6, r4, #25
 8004918:	e7f5      	b.n	8004906 <_printf_i+0x22e>
 800491a:	bf00      	nop
 800491c:	08006ea6 	.word	0x08006ea6
 8004920:	08006eb7 	.word	0x08006eb7

08004924 <siprintf>:
 8004924:	b40e      	push	{r1, r2, r3}
 8004926:	b500      	push	{lr}
 8004928:	b09c      	sub	sp, #112	; 0x70
 800492a:	ab1d      	add	r3, sp, #116	; 0x74
 800492c:	9002      	str	r0, [sp, #8]
 800492e:	9006      	str	r0, [sp, #24]
 8004930:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004934:	4809      	ldr	r0, [pc, #36]	; (800495c <siprintf+0x38>)
 8004936:	9107      	str	r1, [sp, #28]
 8004938:	9104      	str	r1, [sp, #16]
 800493a:	4909      	ldr	r1, [pc, #36]	; (8004960 <siprintf+0x3c>)
 800493c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004940:	9105      	str	r1, [sp, #20]
 8004942:	6800      	ldr	r0, [r0, #0]
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	a902      	add	r1, sp, #8
 8004948:	f001 fb78 	bl	800603c <_svfiprintf_r>
 800494c:	9b02      	ldr	r3, [sp, #8]
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	b01c      	add	sp, #112	; 0x70
 8004954:	f85d eb04 	ldr.w	lr, [sp], #4
 8004958:	b003      	add	sp, #12
 800495a:	4770      	bx	lr
 800495c:	20000010 	.word	0x20000010
 8004960:	ffff0208 	.word	0xffff0208

08004964 <quorem>:
 8004964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004968:	6903      	ldr	r3, [r0, #16]
 800496a:	690c      	ldr	r4, [r1, #16]
 800496c:	42a3      	cmp	r3, r4
 800496e:	4607      	mov	r7, r0
 8004970:	f2c0 8081 	blt.w	8004a76 <quorem+0x112>
 8004974:	3c01      	subs	r4, #1
 8004976:	f101 0814 	add.w	r8, r1, #20
 800497a:	f100 0514 	add.w	r5, r0, #20
 800497e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004988:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800498c:	3301      	adds	r3, #1
 800498e:	429a      	cmp	r2, r3
 8004990:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004998:	fbb2 f6f3 	udiv	r6, r2, r3
 800499c:	d331      	bcc.n	8004a02 <quorem+0x9e>
 800499e:	f04f 0e00 	mov.w	lr, #0
 80049a2:	4640      	mov	r0, r8
 80049a4:	46ac      	mov	ip, r5
 80049a6:	46f2      	mov	sl, lr
 80049a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80049ac:	b293      	uxth	r3, r2
 80049ae:	fb06 e303 	mla	r3, r6, r3, lr
 80049b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	ebaa 0303 	sub.w	r3, sl, r3
 80049bc:	f8dc a000 	ldr.w	sl, [ip]
 80049c0:	0c12      	lsrs	r2, r2, #16
 80049c2:	fa13 f38a 	uxtah	r3, r3, sl
 80049c6:	fb06 e202 	mla	r2, r6, r2, lr
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	9b00      	ldr	r3, [sp, #0]
 80049ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049d2:	b292      	uxth	r2, r2
 80049d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80049d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80049e0:	4581      	cmp	r9, r0
 80049e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049e6:	f84c 3b04 	str.w	r3, [ip], #4
 80049ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80049ee:	d2db      	bcs.n	80049a8 <quorem+0x44>
 80049f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80049f4:	b92b      	cbnz	r3, 8004a02 <quorem+0x9e>
 80049f6:	9b01      	ldr	r3, [sp, #4]
 80049f8:	3b04      	subs	r3, #4
 80049fa:	429d      	cmp	r5, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	d32e      	bcc.n	8004a5e <quorem+0xfa>
 8004a00:	613c      	str	r4, [r7, #16]
 8004a02:	4638      	mov	r0, r7
 8004a04:	f001 f8c6 	bl	8005b94 <__mcmp>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	db24      	blt.n	8004a56 <quorem+0xf2>
 8004a0c:	3601      	adds	r6, #1
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f04f 0c00 	mov.w	ip, #0
 8004a14:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a18:	f8d0 e000 	ldr.w	lr, [r0]
 8004a1c:	b293      	uxth	r3, r2
 8004a1e:	ebac 0303 	sub.w	r3, ip, r3
 8004a22:	0c12      	lsrs	r2, r2, #16
 8004a24:	fa13 f38e 	uxtah	r3, r3, lr
 8004a28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a36:	45c1      	cmp	r9, r8
 8004a38:	f840 3b04 	str.w	r3, [r0], #4
 8004a3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a40:	d2e8      	bcs.n	8004a14 <quorem+0xb0>
 8004a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a4a:	b922      	cbnz	r2, 8004a56 <quorem+0xf2>
 8004a4c:	3b04      	subs	r3, #4
 8004a4e:	429d      	cmp	r5, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	d30a      	bcc.n	8004a6a <quorem+0x106>
 8004a54:	613c      	str	r4, [r7, #16]
 8004a56:	4630      	mov	r0, r6
 8004a58:	b003      	add	sp, #12
 8004a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	3b04      	subs	r3, #4
 8004a62:	2a00      	cmp	r2, #0
 8004a64:	d1cc      	bne.n	8004a00 <quorem+0x9c>
 8004a66:	3c01      	subs	r4, #1
 8004a68:	e7c7      	b.n	80049fa <quorem+0x96>
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	3b04      	subs	r3, #4
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	d1f0      	bne.n	8004a54 <quorem+0xf0>
 8004a72:	3c01      	subs	r4, #1
 8004a74:	e7eb      	b.n	8004a4e <quorem+0xea>
 8004a76:	2000      	movs	r0, #0
 8004a78:	e7ee      	b.n	8004a58 <quorem+0xf4>
 8004a7a:	0000      	movs	r0, r0
 8004a7c:	0000      	movs	r0, r0
	...

08004a80 <_dtoa_r>:
 8004a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	ed2d 8b04 	vpush	{d8-d9}
 8004a88:	ec57 6b10 	vmov	r6, r7, d0
 8004a8c:	b093      	sub	sp, #76	; 0x4c
 8004a8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004a94:	9106      	str	r1, [sp, #24]
 8004a96:	ee10 aa10 	vmov	sl, s0
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8004aa0:	46bb      	mov	fp, r7
 8004aa2:	b975      	cbnz	r5, 8004ac2 <_dtoa_r+0x42>
 8004aa4:	2010      	movs	r0, #16
 8004aa6:	f000 fddd 	bl	8005664 <malloc>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6260      	str	r0, [r4, #36]	; 0x24
 8004aae:	b920      	cbnz	r0, 8004aba <_dtoa_r+0x3a>
 8004ab0:	4ba7      	ldr	r3, [pc, #668]	; (8004d50 <_dtoa_r+0x2d0>)
 8004ab2:	21ea      	movs	r1, #234	; 0xea
 8004ab4:	48a7      	ldr	r0, [pc, #668]	; (8004d54 <_dtoa_r+0x2d4>)
 8004ab6:	f001 fbd1 	bl	800625c <__assert_func>
 8004aba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004abe:	6005      	str	r5, [r0, #0]
 8004ac0:	60c5      	str	r5, [r0, #12]
 8004ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac4:	6819      	ldr	r1, [r3, #0]
 8004ac6:	b151      	cbz	r1, 8004ade <_dtoa_r+0x5e>
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	604a      	str	r2, [r1, #4]
 8004acc:	2301      	movs	r3, #1
 8004ace:	4093      	lsls	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f000 fe1c 	bl	8005710 <_Bfree>
 8004ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	1e3b      	subs	r3, r7, #0
 8004ae0:	bfaa      	itet	ge
 8004ae2:	2300      	movge	r3, #0
 8004ae4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004ae8:	f8c8 3000 	strge.w	r3, [r8]
 8004aec:	4b9a      	ldr	r3, [pc, #616]	; (8004d58 <_dtoa_r+0x2d8>)
 8004aee:	bfbc      	itt	lt
 8004af0:	2201      	movlt	r2, #1
 8004af2:	f8c8 2000 	strlt.w	r2, [r8]
 8004af6:	ea33 030b 	bics.w	r3, r3, fp
 8004afa:	d11b      	bne.n	8004b34 <_dtoa_r+0xb4>
 8004afc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004afe:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b08:	4333      	orrs	r3, r6
 8004b0a:	f000 8592 	beq.w	8005632 <_dtoa_r+0xbb2>
 8004b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b10:	b963      	cbnz	r3, 8004b2c <_dtoa_r+0xac>
 8004b12:	4b92      	ldr	r3, [pc, #584]	; (8004d5c <_dtoa_r+0x2dc>)
 8004b14:	e022      	b.n	8004b5c <_dtoa_r+0xdc>
 8004b16:	4b92      	ldr	r3, [pc, #584]	; (8004d60 <_dtoa_r+0x2e0>)
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	9801      	ldr	r0, [sp, #4]
 8004b22:	b013      	add	sp, #76	; 0x4c
 8004b24:	ecbd 8b04 	vpop	{d8-d9}
 8004b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2c:	4b8b      	ldr	r3, [pc, #556]	; (8004d5c <_dtoa_r+0x2dc>)
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	3303      	adds	r3, #3
 8004b32:	e7f3      	b.n	8004b1c <_dtoa_r+0x9c>
 8004b34:	2200      	movs	r2, #0
 8004b36:	2300      	movs	r3, #0
 8004b38:	4650      	mov	r0, sl
 8004b3a:	4659      	mov	r1, fp
 8004b3c:	f7fb ffcc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b40:	ec4b ab19 	vmov	d9, sl, fp
 8004b44:	4680      	mov	r8, r0
 8004b46:	b158      	cbz	r0, 8004b60 <_dtoa_r+0xe0>
 8004b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 856b 	beq.w	800562c <_dtoa_r+0xbac>
 8004b56:	4883      	ldr	r0, [pc, #524]	; (8004d64 <_dtoa_r+0x2e4>)
 8004b58:	6018      	str	r0, [r3, #0]
 8004b5a:	1e43      	subs	r3, r0, #1
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	e7df      	b.n	8004b20 <_dtoa_r+0xa0>
 8004b60:	ec4b ab10 	vmov	d0, sl, fp
 8004b64:	aa10      	add	r2, sp, #64	; 0x40
 8004b66:	a911      	add	r1, sp, #68	; 0x44
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f001 f8b9 	bl	8005ce0 <__d2b>
 8004b6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004b72:	ee08 0a10 	vmov	s16, r0
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	f000 8084 	beq.w	8004c84 <_dtoa_r+0x204>
 8004b7c:	ee19 3a90 	vmov	r3, s19
 8004b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004b88:	4656      	mov	r6, sl
 8004b8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004b8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004b96:	4b74      	ldr	r3, [pc, #464]	; (8004d68 <_dtoa_r+0x2e8>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	f7fb fb7b 	bl	8000298 <__aeabi_dsub>
 8004ba2:	a365      	add	r3, pc, #404	; (adr r3, 8004d38 <_dtoa_r+0x2b8>)
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f7fb fd2e 	bl	8000608 <__aeabi_dmul>
 8004bac:	a364      	add	r3, pc, #400	; (adr r3, 8004d40 <_dtoa_r+0x2c0>)
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f7fb fb73 	bl	800029c <__adddf3>
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	4628      	mov	r0, r5
 8004bba:	460f      	mov	r7, r1
 8004bbc:	f7fb fcba 	bl	8000534 <__aeabi_i2d>
 8004bc0:	a361      	add	r3, pc, #388	; (adr r3, 8004d48 <_dtoa_r+0x2c8>)
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f7fb fd1f 	bl	8000608 <__aeabi_dmul>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4630      	mov	r0, r6
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	f7fb fb63 	bl	800029c <__adddf3>
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	460f      	mov	r7, r1
 8004bda:	f7fb ffc5 	bl	8000b68 <__aeabi_d2iz>
 8004bde:	2200      	movs	r2, #0
 8004be0:	9000      	str	r0, [sp, #0]
 8004be2:	2300      	movs	r3, #0
 8004be4:	4630      	mov	r0, r6
 8004be6:	4639      	mov	r1, r7
 8004be8:	f7fb ff80 	bl	8000aec <__aeabi_dcmplt>
 8004bec:	b150      	cbz	r0, 8004c04 <_dtoa_r+0x184>
 8004bee:	9800      	ldr	r0, [sp, #0]
 8004bf0:	f7fb fca0 	bl	8000534 <__aeabi_i2d>
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	463b      	mov	r3, r7
 8004bf8:	f7fb ff6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bfc:	b910      	cbnz	r0, 8004c04 <_dtoa_r+0x184>
 8004bfe:	9b00      	ldr	r3, [sp, #0]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	9b00      	ldr	r3, [sp, #0]
 8004c06:	2b16      	cmp	r3, #22
 8004c08:	d85a      	bhi.n	8004cc0 <_dtoa_r+0x240>
 8004c0a:	9a00      	ldr	r2, [sp, #0]
 8004c0c:	4b57      	ldr	r3, [pc, #348]	; (8004d6c <_dtoa_r+0x2ec>)
 8004c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	ec51 0b19 	vmov	r0, r1, d9
 8004c1a:	f7fb ff67 	bl	8000aec <__aeabi_dcmplt>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d050      	beq.n	8004cc4 <_dtoa_r+0x244>
 8004c22:	9b00      	ldr	r3, [sp, #0]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c2e:	1b5d      	subs	r5, r3, r5
 8004c30:	1e6b      	subs	r3, r5, #1
 8004c32:	9305      	str	r3, [sp, #20]
 8004c34:	bf45      	ittet	mi
 8004c36:	f1c5 0301 	rsbmi	r3, r5, #1
 8004c3a:	9304      	strmi	r3, [sp, #16]
 8004c3c:	2300      	movpl	r3, #0
 8004c3e:	2300      	movmi	r3, #0
 8004c40:	bf4c      	ite	mi
 8004c42:	9305      	strmi	r3, [sp, #20]
 8004c44:	9304      	strpl	r3, [sp, #16]
 8004c46:	9b00      	ldr	r3, [sp, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db3d      	blt.n	8004cc8 <_dtoa_r+0x248>
 8004c4c:	9b05      	ldr	r3, [sp, #20]
 8004c4e:	9a00      	ldr	r2, [sp, #0]
 8004c50:	920a      	str	r2, [sp, #40]	; 0x28
 8004c52:	4413      	add	r3, r2
 8004c54:	9305      	str	r3, [sp, #20]
 8004c56:	2300      	movs	r3, #0
 8004c58:	9307      	str	r3, [sp, #28]
 8004c5a:	9b06      	ldr	r3, [sp, #24]
 8004c5c:	2b09      	cmp	r3, #9
 8004c5e:	f200 8089 	bhi.w	8004d74 <_dtoa_r+0x2f4>
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	bfc4      	itt	gt
 8004c66:	3b04      	subgt	r3, #4
 8004c68:	9306      	strgt	r3, [sp, #24]
 8004c6a:	9b06      	ldr	r3, [sp, #24]
 8004c6c:	f1a3 0302 	sub.w	r3, r3, #2
 8004c70:	bfcc      	ite	gt
 8004c72:	2500      	movgt	r5, #0
 8004c74:	2501      	movle	r5, #1
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	f200 8087 	bhi.w	8004d8a <_dtoa_r+0x30a>
 8004c7c:	e8df f003 	tbb	[pc, r3]
 8004c80:	59383a2d 	.word	0x59383a2d
 8004c84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004c88:	441d      	add	r5, r3
 8004c8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	bfc1      	itttt	gt
 8004c92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004c9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004c9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004ca2:	bfda      	itte	le
 8004ca4:	f1c3 0320 	rsble	r3, r3, #32
 8004ca8:	fa06 f003 	lslle.w	r0, r6, r3
 8004cac:	4318      	orrgt	r0, r3
 8004cae:	f7fb fc31 	bl	8000514 <__aeabi_ui2d>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004cba:	3d01      	subs	r5, #1
 8004cbc:	930e      	str	r3, [sp, #56]	; 0x38
 8004cbe:	e76a      	b.n	8004b96 <_dtoa_r+0x116>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e7b2      	b.n	8004c2a <_dtoa_r+0x1aa>
 8004cc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004cc6:	e7b1      	b.n	8004c2c <_dtoa_r+0x1ac>
 8004cc8:	9b04      	ldr	r3, [sp, #16]
 8004cca:	9a00      	ldr	r2, [sp, #0]
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	9304      	str	r3, [sp, #16]
 8004cd0:	4253      	negs	r3, r2
 8004cd2:	9307      	str	r3, [sp, #28]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8004cd8:	e7bf      	b.n	8004c5a <_dtoa_r+0x1da>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9308      	str	r3, [sp, #32]
 8004cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	dc55      	bgt.n	8004d90 <_dtoa_r+0x310>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004cea:	461a      	mov	r2, r3
 8004cec:	9209      	str	r2, [sp, #36]	; 0x24
 8004cee:	e00c      	b.n	8004d0a <_dtoa_r+0x28a>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e7f3      	b.n	8004cdc <_dtoa_r+0x25c>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf8:	9308      	str	r3, [sp, #32]
 8004cfa:	9b00      	ldr	r3, [sp, #0]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	9302      	str	r3, [sp, #8]
 8004d00:	3301      	adds	r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	9303      	str	r3, [sp, #12]
 8004d06:	bfb8      	it	lt
 8004d08:	2301      	movlt	r3, #1
 8004d0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	6042      	str	r2, [r0, #4]
 8004d10:	2204      	movs	r2, #4
 8004d12:	f102 0614 	add.w	r6, r2, #20
 8004d16:	429e      	cmp	r6, r3
 8004d18:	6841      	ldr	r1, [r0, #4]
 8004d1a:	d93d      	bls.n	8004d98 <_dtoa_r+0x318>
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 fcb7 	bl	8005690 <_Balloc>
 8004d22:	9001      	str	r0, [sp, #4]
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d13b      	bne.n	8004da0 <_dtoa_r+0x320>
 8004d28:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <_dtoa_r+0x2f0>)
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d30:	e6c0      	b.n	8004ab4 <_dtoa_r+0x34>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e7df      	b.n	8004cf6 <_dtoa_r+0x276>
 8004d36:	bf00      	nop
 8004d38:	636f4361 	.word	0x636f4361
 8004d3c:	3fd287a7 	.word	0x3fd287a7
 8004d40:	8b60c8b3 	.word	0x8b60c8b3
 8004d44:	3fc68a28 	.word	0x3fc68a28
 8004d48:	509f79fb 	.word	0x509f79fb
 8004d4c:	3fd34413 	.word	0x3fd34413
 8004d50:	08006ed5 	.word	0x08006ed5
 8004d54:	08006eec 	.word	0x08006eec
 8004d58:	7ff00000 	.word	0x7ff00000
 8004d5c:	08006ed1 	.word	0x08006ed1
 8004d60:	08006ec8 	.word	0x08006ec8
 8004d64:	08006ea5 	.word	0x08006ea5
 8004d68:	3ff80000 	.word	0x3ff80000
 8004d6c:	08006fe0 	.word	0x08006fe0
 8004d70:	08006f47 	.word	0x08006f47
 8004d74:	2501      	movs	r5, #1
 8004d76:	2300      	movs	r3, #0
 8004d78:	9306      	str	r3, [sp, #24]
 8004d7a:	9508      	str	r5, [sp, #32]
 8004d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	2312      	movs	r3, #18
 8004d88:	e7b0      	b.n	8004cec <_dtoa_r+0x26c>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	9308      	str	r3, [sp, #32]
 8004d8e:	e7f5      	b.n	8004d7c <_dtoa_r+0x2fc>
 8004d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d96:	e7b8      	b.n	8004d0a <_dtoa_r+0x28a>
 8004d98:	3101      	adds	r1, #1
 8004d9a:	6041      	str	r1, [r0, #4]
 8004d9c:	0052      	lsls	r2, r2, #1
 8004d9e:	e7b8      	b.n	8004d12 <_dtoa_r+0x292>
 8004da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004da2:	9a01      	ldr	r2, [sp, #4]
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	9b03      	ldr	r3, [sp, #12]
 8004da8:	2b0e      	cmp	r3, #14
 8004daa:	f200 809d 	bhi.w	8004ee8 <_dtoa_r+0x468>
 8004dae:	2d00      	cmp	r5, #0
 8004db0:	f000 809a 	beq.w	8004ee8 <_dtoa_r+0x468>
 8004db4:	9b00      	ldr	r3, [sp, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	dd32      	ble.n	8004e20 <_dtoa_r+0x3a0>
 8004dba:	4ab7      	ldr	r2, [pc, #732]	; (8005098 <_dtoa_r+0x618>)
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004dc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004dc8:	9b00      	ldr	r3, [sp, #0]
 8004dca:	05d8      	lsls	r0, r3, #23
 8004dcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004dd0:	d516      	bpl.n	8004e00 <_dtoa_r+0x380>
 8004dd2:	4bb2      	ldr	r3, [pc, #712]	; (800509c <_dtoa_r+0x61c>)
 8004dd4:	ec51 0b19 	vmov	r0, r1, d9
 8004dd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ddc:	f7fb fd3e 	bl	800085c <__aeabi_ddiv>
 8004de0:	f007 070f 	and.w	r7, r7, #15
 8004de4:	4682      	mov	sl, r0
 8004de6:	468b      	mov	fp, r1
 8004de8:	2503      	movs	r5, #3
 8004dea:	4eac      	ldr	r6, [pc, #688]	; (800509c <_dtoa_r+0x61c>)
 8004dec:	b957      	cbnz	r7, 8004e04 <_dtoa_r+0x384>
 8004dee:	4642      	mov	r2, r8
 8004df0:	464b      	mov	r3, r9
 8004df2:	4650      	mov	r0, sl
 8004df4:	4659      	mov	r1, fp
 8004df6:	f7fb fd31 	bl	800085c <__aeabi_ddiv>
 8004dfa:	4682      	mov	sl, r0
 8004dfc:	468b      	mov	fp, r1
 8004dfe:	e028      	b.n	8004e52 <_dtoa_r+0x3d2>
 8004e00:	2502      	movs	r5, #2
 8004e02:	e7f2      	b.n	8004dea <_dtoa_r+0x36a>
 8004e04:	07f9      	lsls	r1, r7, #31
 8004e06:	d508      	bpl.n	8004e1a <_dtoa_r+0x39a>
 8004e08:	4640      	mov	r0, r8
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e10:	f7fb fbfa 	bl	8000608 <__aeabi_dmul>
 8004e14:	3501      	adds	r5, #1
 8004e16:	4680      	mov	r8, r0
 8004e18:	4689      	mov	r9, r1
 8004e1a:	107f      	asrs	r7, r7, #1
 8004e1c:	3608      	adds	r6, #8
 8004e1e:	e7e5      	b.n	8004dec <_dtoa_r+0x36c>
 8004e20:	f000 809b 	beq.w	8004f5a <_dtoa_r+0x4da>
 8004e24:	9b00      	ldr	r3, [sp, #0]
 8004e26:	4f9d      	ldr	r7, [pc, #628]	; (800509c <_dtoa_r+0x61c>)
 8004e28:	425e      	negs	r6, r3
 8004e2a:	4b9b      	ldr	r3, [pc, #620]	; (8005098 <_dtoa_r+0x618>)
 8004e2c:	f006 020f 	and.w	r2, r6, #15
 8004e30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	ec51 0b19 	vmov	r0, r1, d9
 8004e3c:	f7fb fbe4 	bl	8000608 <__aeabi_dmul>
 8004e40:	1136      	asrs	r6, r6, #4
 8004e42:	4682      	mov	sl, r0
 8004e44:	468b      	mov	fp, r1
 8004e46:	2300      	movs	r3, #0
 8004e48:	2502      	movs	r5, #2
 8004e4a:	2e00      	cmp	r6, #0
 8004e4c:	d17a      	bne.n	8004f44 <_dtoa_r+0x4c4>
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1d3      	bne.n	8004dfa <_dtoa_r+0x37a>
 8004e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8082 	beq.w	8004f5e <_dtoa_r+0x4de>
 8004e5a:	4b91      	ldr	r3, [pc, #580]	; (80050a0 <_dtoa_r+0x620>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	4650      	mov	r0, sl
 8004e60:	4659      	mov	r1, fp
 8004e62:	f7fb fe43 	bl	8000aec <__aeabi_dcmplt>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d079      	beq.n	8004f5e <_dtoa_r+0x4de>
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d076      	beq.n	8004f5e <_dtoa_r+0x4de>
 8004e70:	9b02      	ldr	r3, [sp, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	dd36      	ble.n	8004ee4 <_dtoa_r+0x464>
 8004e76:	9b00      	ldr	r3, [sp, #0]
 8004e78:	4650      	mov	r0, sl
 8004e7a:	4659      	mov	r1, fp
 8004e7c:	1e5f      	subs	r7, r3, #1
 8004e7e:	2200      	movs	r2, #0
 8004e80:	4b88      	ldr	r3, [pc, #544]	; (80050a4 <_dtoa_r+0x624>)
 8004e82:	f7fb fbc1 	bl	8000608 <__aeabi_dmul>
 8004e86:	9e02      	ldr	r6, [sp, #8]
 8004e88:	4682      	mov	sl, r0
 8004e8a:	468b      	mov	fp, r1
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f7fb fb50 	bl	8000534 <__aeabi_i2d>
 8004e94:	4652      	mov	r2, sl
 8004e96:	465b      	mov	r3, fp
 8004e98:	f7fb fbb6 	bl	8000608 <__aeabi_dmul>
 8004e9c:	4b82      	ldr	r3, [pc, #520]	; (80050a8 <_dtoa_r+0x628>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f7fb f9fc 	bl	800029c <__adddf3>
 8004ea4:	46d0      	mov	r8, sl
 8004ea6:	46d9      	mov	r9, fp
 8004ea8:	4682      	mov	sl, r0
 8004eaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004eae:	2e00      	cmp	r6, #0
 8004eb0:	d158      	bne.n	8004f64 <_dtoa_r+0x4e4>
 8004eb2:	4b7e      	ldr	r3, [pc, #504]	; (80050ac <_dtoa_r+0x62c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	f7fb f9ed 	bl	8000298 <__aeabi_dsub>
 8004ebe:	4652      	mov	r2, sl
 8004ec0:	465b      	mov	r3, fp
 8004ec2:	4680      	mov	r8, r0
 8004ec4:	4689      	mov	r9, r1
 8004ec6:	f7fb fe2f 	bl	8000b28 <__aeabi_dcmpgt>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	f040 8295 	bne.w	80053fa <_dtoa_r+0x97a>
 8004ed0:	4652      	mov	r2, sl
 8004ed2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	4649      	mov	r1, r9
 8004eda:	f7fb fe07 	bl	8000aec <__aeabi_dcmplt>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	f040 8289 	bne.w	80053f6 <_dtoa_r+0x976>
 8004ee4:	ec5b ab19 	vmov	sl, fp, d9
 8004ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f2c0 8148 	blt.w	8005180 <_dtoa_r+0x700>
 8004ef0:	9a00      	ldr	r2, [sp, #0]
 8004ef2:	2a0e      	cmp	r2, #14
 8004ef4:	f300 8144 	bgt.w	8005180 <_dtoa_r+0x700>
 8004ef8:	4b67      	ldr	r3, [pc, #412]	; (8005098 <_dtoa_r+0x618>)
 8004efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004efe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f280 80d5 	bge.w	80050b4 <_dtoa_r+0x634>
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f300 80d1 	bgt.w	80050b4 <_dtoa_r+0x634>
 8004f12:	f040 826f 	bne.w	80053f4 <_dtoa_r+0x974>
 8004f16:	4b65      	ldr	r3, [pc, #404]	; (80050ac <_dtoa_r+0x62c>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	f7fb fb73 	bl	8000608 <__aeabi_dmul>
 8004f22:	4652      	mov	r2, sl
 8004f24:	465b      	mov	r3, fp
 8004f26:	f7fb fdf5 	bl	8000b14 <__aeabi_dcmpge>
 8004f2a:	9e03      	ldr	r6, [sp, #12]
 8004f2c:	4637      	mov	r7, r6
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	f040 8245 	bne.w	80053be <_dtoa_r+0x93e>
 8004f34:	9d01      	ldr	r5, [sp, #4]
 8004f36:	2331      	movs	r3, #49	; 0x31
 8004f38:	f805 3b01 	strb.w	r3, [r5], #1
 8004f3c:	9b00      	ldr	r3, [sp, #0]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	e240      	b.n	80053c6 <_dtoa_r+0x946>
 8004f44:	07f2      	lsls	r2, r6, #31
 8004f46:	d505      	bpl.n	8004f54 <_dtoa_r+0x4d4>
 8004f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f4c:	f7fb fb5c 	bl	8000608 <__aeabi_dmul>
 8004f50:	3501      	adds	r5, #1
 8004f52:	2301      	movs	r3, #1
 8004f54:	1076      	asrs	r6, r6, #1
 8004f56:	3708      	adds	r7, #8
 8004f58:	e777      	b.n	8004e4a <_dtoa_r+0x3ca>
 8004f5a:	2502      	movs	r5, #2
 8004f5c:	e779      	b.n	8004e52 <_dtoa_r+0x3d2>
 8004f5e:	9f00      	ldr	r7, [sp, #0]
 8004f60:	9e03      	ldr	r6, [sp, #12]
 8004f62:	e794      	b.n	8004e8e <_dtoa_r+0x40e>
 8004f64:	9901      	ldr	r1, [sp, #4]
 8004f66:	4b4c      	ldr	r3, [pc, #304]	; (8005098 <_dtoa_r+0x618>)
 8004f68:	4431      	add	r1, r6
 8004f6a:	910d      	str	r1, [sp, #52]	; 0x34
 8004f6c:	9908      	ldr	r1, [sp, #32]
 8004f6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004f72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f76:	2900      	cmp	r1, #0
 8004f78:	d043      	beq.n	8005002 <_dtoa_r+0x582>
 8004f7a:	494d      	ldr	r1, [pc, #308]	; (80050b0 <_dtoa_r+0x630>)
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f7fb fc6d 	bl	800085c <__aeabi_ddiv>
 8004f82:	4652      	mov	r2, sl
 8004f84:	465b      	mov	r3, fp
 8004f86:	f7fb f987 	bl	8000298 <__aeabi_dsub>
 8004f8a:	9d01      	ldr	r5, [sp, #4]
 8004f8c:	4682      	mov	sl, r0
 8004f8e:	468b      	mov	fp, r1
 8004f90:	4649      	mov	r1, r9
 8004f92:	4640      	mov	r0, r8
 8004f94:	f7fb fde8 	bl	8000b68 <__aeabi_d2iz>
 8004f98:	4606      	mov	r6, r0
 8004f9a:	f7fb facb 	bl	8000534 <__aeabi_i2d>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	f7fb f977 	bl	8000298 <__aeabi_dsub>
 8004faa:	3630      	adds	r6, #48	; 0x30
 8004fac:	f805 6b01 	strb.w	r6, [r5], #1
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	465b      	mov	r3, fp
 8004fb4:	4680      	mov	r8, r0
 8004fb6:	4689      	mov	r9, r1
 8004fb8:	f7fb fd98 	bl	8000aec <__aeabi_dcmplt>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d163      	bne.n	8005088 <_dtoa_r+0x608>
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	4936      	ldr	r1, [pc, #216]	; (80050a0 <_dtoa_r+0x620>)
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	f7fb f966 	bl	8000298 <__aeabi_dsub>
 8004fcc:	4652      	mov	r2, sl
 8004fce:	465b      	mov	r3, fp
 8004fd0:	f7fb fd8c 	bl	8000aec <__aeabi_dcmplt>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	f040 80b5 	bne.w	8005144 <_dtoa_r+0x6c4>
 8004fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fdc:	429d      	cmp	r5, r3
 8004fde:	d081      	beq.n	8004ee4 <_dtoa_r+0x464>
 8004fe0:	4b30      	ldr	r3, [pc, #192]	; (80050a4 <_dtoa_r+0x624>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4650      	mov	r0, sl
 8004fe6:	4659      	mov	r1, fp
 8004fe8:	f7fb fb0e 	bl	8000608 <__aeabi_dmul>
 8004fec:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <_dtoa_r+0x624>)
 8004fee:	4682      	mov	sl, r0
 8004ff0:	468b      	mov	fp, r1
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f7fb fb06 	bl	8000608 <__aeabi_dmul>
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	4689      	mov	r9, r1
 8005000:	e7c6      	b.n	8004f90 <_dtoa_r+0x510>
 8005002:	4650      	mov	r0, sl
 8005004:	4659      	mov	r1, fp
 8005006:	f7fb faff 	bl	8000608 <__aeabi_dmul>
 800500a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800500c:	9d01      	ldr	r5, [sp, #4]
 800500e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005010:	4682      	mov	sl, r0
 8005012:	468b      	mov	fp, r1
 8005014:	4649      	mov	r1, r9
 8005016:	4640      	mov	r0, r8
 8005018:	f7fb fda6 	bl	8000b68 <__aeabi_d2iz>
 800501c:	4606      	mov	r6, r0
 800501e:	f7fb fa89 	bl	8000534 <__aeabi_i2d>
 8005022:	3630      	adds	r6, #48	; 0x30
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4640      	mov	r0, r8
 800502a:	4649      	mov	r1, r9
 800502c:	f7fb f934 	bl	8000298 <__aeabi_dsub>
 8005030:	f805 6b01 	strb.w	r6, [r5], #1
 8005034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005036:	429d      	cmp	r5, r3
 8005038:	4680      	mov	r8, r0
 800503a:	4689      	mov	r9, r1
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	d124      	bne.n	800508c <_dtoa_r+0x60c>
 8005042:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <_dtoa_r+0x630>)
 8005044:	4650      	mov	r0, sl
 8005046:	4659      	mov	r1, fp
 8005048:	f7fb f928 	bl	800029c <__adddf3>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4640      	mov	r0, r8
 8005052:	4649      	mov	r1, r9
 8005054:	f7fb fd68 	bl	8000b28 <__aeabi_dcmpgt>
 8005058:	2800      	cmp	r0, #0
 800505a:	d173      	bne.n	8005144 <_dtoa_r+0x6c4>
 800505c:	4652      	mov	r2, sl
 800505e:	465b      	mov	r3, fp
 8005060:	4913      	ldr	r1, [pc, #76]	; (80050b0 <_dtoa_r+0x630>)
 8005062:	2000      	movs	r0, #0
 8005064:	f7fb f918 	bl	8000298 <__aeabi_dsub>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4640      	mov	r0, r8
 800506e:	4649      	mov	r1, r9
 8005070:	f7fb fd3c 	bl	8000aec <__aeabi_dcmplt>
 8005074:	2800      	cmp	r0, #0
 8005076:	f43f af35 	beq.w	8004ee4 <_dtoa_r+0x464>
 800507a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800507c:	1e6b      	subs	r3, r5, #1
 800507e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005080:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005084:	2b30      	cmp	r3, #48	; 0x30
 8005086:	d0f8      	beq.n	800507a <_dtoa_r+0x5fa>
 8005088:	9700      	str	r7, [sp, #0]
 800508a:	e049      	b.n	8005120 <_dtoa_r+0x6a0>
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <_dtoa_r+0x624>)
 800508e:	f7fb fabb 	bl	8000608 <__aeabi_dmul>
 8005092:	4680      	mov	r8, r0
 8005094:	4689      	mov	r9, r1
 8005096:	e7bd      	b.n	8005014 <_dtoa_r+0x594>
 8005098:	08006fe0 	.word	0x08006fe0
 800509c:	08006fb8 	.word	0x08006fb8
 80050a0:	3ff00000 	.word	0x3ff00000
 80050a4:	40240000 	.word	0x40240000
 80050a8:	401c0000 	.word	0x401c0000
 80050ac:	40140000 	.word	0x40140000
 80050b0:	3fe00000 	.word	0x3fe00000
 80050b4:	9d01      	ldr	r5, [sp, #4]
 80050b6:	4656      	mov	r6, sl
 80050b8:	465f      	mov	r7, fp
 80050ba:	4642      	mov	r2, r8
 80050bc:	464b      	mov	r3, r9
 80050be:	4630      	mov	r0, r6
 80050c0:	4639      	mov	r1, r7
 80050c2:	f7fb fbcb 	bl	800085c <__aeabi_ddiv>
 80050c6:	f7fb fd4f 	bl	8000b68 <__aeabi_d2iz>
 80050ca:	4682      	mov	sl, r0
 80050cc:	f7fb fa32 	bl	8000534 <__aeabi_i2d>
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	f7fb fa98 	bl	8000608 <__aeabi_dmul>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4630      	mov	r0, r6
 80050de:	4639      	mov	r1, r7
 80050e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80050e4:	f7fb f8d8 	bl	8000298 <__aeabi_dsub>
 80050e8:	f805 6b01 	strb.w	r6, [r5], #1
 80050ec:	9e01      	ldr	r6, [sp, #4]
 80050ee:	9f03      	ldr	r7, [sp, #12]
 80050f0:	1bae      	subs	r6, r5, r6
 80050f2:	42b7      	cmp	r7, r6
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	d135      	bne.n	8005166 <_dtoa_r+0x6e6>
 80050fa:	f7fb f8cf 	bl	800029c <__adddf3>
 80050fe:	4642      	mov	r2, r8
 8005100:	464b      	mov	r3, r9
 8005102:	4606      	mov	r6, r0
 8005104:	460f      	mov	r7, r1
 8005106:	f7fb fd0f 	bl	8000b28 <__aeabi_dcmpgt>
 800510a:	b9d0      	cbnz	r0, 8005142 <_dtoa_r+0x6c2>
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb fce0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005118:	b110      	cbz	r0, 8005120 <_dtoa_r+0x6a0>
 800511a:	f01a 0f01 	tst.w	sl, #1
 800511e:	d110      	bne.n	8005142 <_dtoa_r+0x6c2>
 8005120:	4620      	mov	r0, r4
 8005122:	ee18 1a10 	vmov	r1, s16
 8005126:	f000 faf3 	bl	8005710 <_Bfree>
 800512a:	2300      	movs	r3, #0
 800512c:	9800      	ldr	r0, [sp, #0]
 800512e:	702b      	strb	r3, [r5, #0]
 8005130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005132:	3001      	adds	r0, #1
 8005134:	6018      	str	r0, [r3, #0]
 8005136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005138:	2b00      	cmp	r3, #0
 800513a:	f43f acf1 	beq.w	8004b20 <_dtoa_r+0xa0>
 800513e:	601d      	str	r5, [r3, #0]
 8005140:	e4ee      	b.n	8004b20 <_dtoa_r+0xa0>
 8005142:	9f00      	ldr	r7, [sp, #0]
 8005144:	462b      	mov	r3, r5
 8005146:	461d      	mov	r5, r3
 8005148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800514c:	2a39      	cmp	r2, #57	; 0x39
 800514e:	d106      	bne.n	800515e <_dtoa_r+0x6de>
 8005150:	9a01      	ldr	r2, [sp, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d1f7      	bne.n	8005146 <_dtoa_r+0x6c6>
 8005156:	9901      	ldr	r1, [sp, #4]
 8005158:	2230      	movs	r2, #48	; 0x30
 800515a:	3701      	adds	r7, #1
 800515c:	700a      	strb	r2, [r1, #0]
 800515e:	781a      	ldrb	r2, [r3, #0]
 8005160:	3201      	adds	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e790      	b.n	8005088 <_dtoa_r+0x608>
 8005166:	4ba6      	ldr	r3, [pc, #664]	; (8005400 <_dtoa_r+0x980>)
 8005168:	2200      	movs	r2, #0
 800516a:	f7fb fa4d 	bl	8000608 <__aeabi_dmul>
 800516e:	2200      	movs	r2, #0
 8005170:	2300      	movs	r3, #0
 8005172:	4606      	mov	r6, r0
 8005174:	460f      	mov	r7, r1
 8005176:	f7fb fcaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800517a:	2800      	cmp	r0, #0
 800517c:	d09d      	beq.n	80050ba <_dtoa_r+0x63a>
 800517e:	e7cf      	b.n	8005120 <_dtoa_r+0x6a0>
 8005180:	9a08      	ldr	r2, [sp, #32]
 8005182:	2a00      	cmp	r2, #0
 8005184:	f000 80d7 	beq.w	8005336 <_dtoa_r+0x8b6>
 8005188:	9a06      	ldr	r2, [sp, #24]
 800518a:	2a01      	cmp	r2, #1
 800518c:	f300 80ba 	bgt.w	8005304 <_dtoa_r+0x884>
 8005190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005192:	2a00      	cmp	r2, #0
 8005194:	f000 80b2 	beq.w	80052fc <_dtoa_r+0x87c>
 8005198:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800519c:	9e07      	ldr	r6, [sp, #28]
 800519e:	9d04      	ldr	r5, [sp, #16]
 80051a0:	9a04      	ldr	r2, [sp, #16]
 80051a2:	441a      	add	r2, r3
 80051a4:	9204      	str	r2, [sp, #16]
 80051a6:	9a05      	ldr	r2, [sp, #20]
 80051a8:	2101      	movs	r1, #1
 80051aa:	441a      	add	r2, r3
 80051ac:	4620      	mov	r0, r4
 80051ae:	9205      	str	r2, [sp, #20]
 80051b0:	f000 fb66 	bl	8005880 <__i2b>
 80051b4:	4607      	mov	r7, r0
 80051b6:	2d00      	cmp	r5, #0
 80051b8:	dd0c      	ble.n	80051d4 <_dtoa_r+0x754>
 80051ba:	9b05      	ldr	r3, [sp, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dd09      	ble.n	80051d4 <_dtoa_r+0x754>
 80051c0:	42ab      	cmp	r3, r5
 80051c2:	9a04      	ldr	r2, [sp, #16]
 80051c4:	bfa8      	it	ge
 80051c6:	462b      	movge	r3, r5
 80051c8:	1ad2      	subs	r2, r2, r3
 80051ca:	9204      	str	r2, [sp, #16]
 80051cc:	9a05      	ldr	r2, [sp, #20]
 80051ce:	1aed      	subs	r5, r5, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	9305      	str	r3, [sp, #20]
 80051d4:	9b07      	ldr	r3, [sp, #28]
 80051d6:	b31b      	cbz	r3, 8005220 <_dtoa_r+0x7a0>
 80051d8:	9b08      	ldr	r3, [sp, #32]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 80af 	beq.w	800533e <_dtoa_r+0x8be>
 80051e0:	2e00      	cmp	r6, #0
 80051e2:	dd13      	ble.n	800520c <_dtoa_r+0x78c>
 80051e4:	4639      	mov	r1, r7
 80051e6:	4632      	mov	r2, r6
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 fc09 	bl	8005a00 <__pow5mult>
 80051ee:	ee18 2a10 	vmov	r2, s16
 80051f2:	4601      	mov	r1, r0
 80051f4:	4607      	mov	r7, r0
 80051f6:	4620      	mov	r0, r4
 80051f8:	f000 fb58 	bl	80058ac <__multiply>
 80051fc:	ee18 1a10 	vmov	r1, s16
 8005200:	4680      	mov	r8, r0
 8005202:	4620      	mov	r0, r4
 8005204:	f000 fa84 	bl	8005710 <_Bfree>
 8005208:	ee08 8a10 	vmov	s16, r8
 800520c:	9b07      	ldr	r3, [sp, #28]
 800520e:	1b9a      	subs	r2, r3, r6
 8005210:	d006      	beq.n	8005220 <_dtoa_r+0x7a0>
 8005212:	ee18 1a10 	vmov	r1, s16
 8005216:	4620      	mov	r0, r4
 8005218:	f000 fbf2 	bl	8005a00 <__pow5mult>
 800521c:	ee08 0a10 	vmov	s16, r0
 8005220:	2101      	movs	r1, #1
 8005222:	4620      	mov	r0, r4
 8005224:	f000 fb2c 	bl	8005880 <__i2b>
 8005228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800522a:	2b00      	cmp	r3, #0
 800522c:	4606      	mov	r6, r0
 800522e:	f340 8088 	ble.w	8005342 <_dtoa_r+0x8c2>
 8005232:	461a      	mov	r2, r3
 8005234:	4601      	mov	r1, r0
 8005236:	4620      	mov	r0, r4
 8005238:	f000 fbe2 	bl	8005a00 <__pow5mult>
 800523c:	9b06      	ldr	r3, [sp, #24]
 800523e:	2b01      	cmp	r3, #1
 8005240:	4606      	mov	r6, r0
 8005242:	f340 8081 	ble.w	8005348 <_dtoa_r+0x8c8>
 8005246:	f04f 0800 	mov.w	r8, #0
 800524a:	6933      	ldr	r3, [r6, #16]
 800524c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005250:	6918      	ldr	r0, [r3, #16]
 8005252:	f000 fac5 	bl	80057e0 <__hi0bits>
 8005256:	f1c0 0020 	rsb	r0, r0, #32
 800525a:	9b05      	ldr	r3, [sp, #20]
 800525c:	4418      	add	r0, r3
 800525e:	f010 001f 	ands.w	r0, r0, #31
 8005262:	f000 8092 	beq.w	800538a <_dtoa_r+0x90a>
 8005266:	f1c0 0320 	rsb	r3, r0, #32
 800526a:	2b04      	cmp	r3, #4
 800526c:	f340 808a 	ble.w	8005384 <_dtoa_r+0x904>
 8005270:	f1c0 001c 	rsb	r0, r0, #28
 8005274:	9b04      	ldr	r3, [sp, #16]
 8005276:	4403      	add	r3, r0
 8005278:	9304      	str	r3, [sp, #16]
 800527a:	9b05      	ldr	r3, [sp, #20]
 800527c:	4403      	add	r3, r0
 800527e:	4405      	add	r5, r0
 8005280:	9305      	str	r3, [sp, #20]
 8005282:	9b04      	ldr	r3, [sp, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	dd07      	ble.n	8005298 <_dtoa_r+0x818>
 8005288:	ee18 1a10 	vmov	r1, s16
 800528c:	461a      	mov	r2, r3
 800528e:	4620      	mov	r0, r4
 8005290:	f000 fc10 	bl	8005ab4 <__lshift>
 8005294:	ee08 0a10 	vmov	s16, r0
 8005298:	9b05      	ldr	r3, [sp, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	dd05      	ble.n	80052aa <_dtoa_r+0x82a>
 800529e:	4631      	mov	r1, r6
 80052a0:	461a      	mov	r2, r3
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 fc06 	bl	8005ab4 <__lshift>
 80052a8:	4606      	mov	r6, r0
 80052aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d06e      	beq.n	800538e <_dtoa_r+0x90e>
 80052b0:	ee18 0a10 	vmov	r0, s16
 80052b4:	4631      	mov	r1, r6
 80052b6:	f000 fc6d 	bl	8005b94 <__mcmp>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	da67      	bge.n	800538e <_dtoa_r+0x90e>
 80052be:	9b00      	ldr	r3, [sp, #0]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	ee18 1a10 	vmov	r1, s16
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	220a      	movs	r2, #10
 80052ca:	2300      	movs	r3, #0
 80052cc:	4620      	mov	r0, r4
 80052ce:	f000 fa41 	bl	8005754 <__multadd>
 80052d2:	9b08      	ldr	r3, [sp, #32]
 80052d4:	ee08 0a10 	vmov	s16, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 81b1 	beq.w	8005640 <_dtoa_r+0xbc0>
 80052de:	2300      	movs	r3, #0
 80052e0:	4639      	mov	r1, r7
 80052e2:	220a      	movs	r2, #10
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 fa35 	bl	8005754 <__multadd>
 80052ea:	9b02      	ldr	r3, [sp, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	4607      	mov	r7, r0
 80052f0:	f300 808e 	bgt.w	8005410 <_dtoa_r+0x990>
 80052f4:	9b06      	ldr	r3, [sp, #24]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	dc51      	bgt.n	800539e <_dtoa_r+0x91e>
 80052fa:	e089      	b.n	8005410 <_dtoa_r+0x990>
 80052fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005302:	e74b      	b.n	800519c <_dtoa_r+0x71c>
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	1e5e      	subs	r6, r3, #1
 8005308:	9b07      	ldr	r3, [sp, #28]
 800530a:	42b3      	cmp	r3, r6
 800530c:	bfbf      	itttt	lt
 800530e:	9b07      	ldrlt	r3, [sp, #28]
 8005310:	9607      	strlt	r6, [sp, #28]
 8005312:	1af2      	sublt	r2, r6, r3
 8005314:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005316:	bfb6      	itet	lt
 8005318:	189b      	addlt	r3, r3, r2
 800531a:	1b9e      	subge	r6, r3, r6
 800531c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	bfb8      	it	lt
 8005322:	2600      	movlt	r6, #0
 8005324:	2b00      	cmp	r3, #0
 8005326:	bfb7      	itett	lt
 8005328:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800532c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005330:	1a9d      	sublt	r5, r3, r2
 8005332:	2300      	movlt	r3, #0
 8005334:	e734      	b.n	80051a0 <_dtoa_r+0x720>
 8005336:	9e07      	ldr	r6, [sp, #28]
 8005338:	9d04      	ldr	r5, [sp, #16]
 800533a:	9f08      	ldr	r7, [sp, #32]
 800533c:	e73b      	b.n	80051b6 <_dtoa_r+0x736>
 800533e:	9a07      	ldr	r2, [sp, #28]
 8005340:	e767      	b.n	8005212 <_dtoa_r+0x792>
 8005342:	9b06      	ldr	r3, [sp, #24]
 8005344:	2b01      	cmp	r3, #1
 8005346:	dc18      	bgt.n	800537a <_dtoa_r+0x8fa>
 8005348:	f1ba 0f00 	cmp.w	sl, #0
 800534c:	d115      	bne.n	800537a <_dtoa_r+0x8fa>
 800534e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005352:	b993      	cbnz	r3, 800537a <_dtoa_r+0x8fa>
 8005354:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005358:	0d1b      	lsrs	r3, r3, #20
 800535a:	051b      	lsls	r3, r3, #20
 800535c:	b183      	cbz	r3, 8005380 <_dtoa_r+0x900>
 800535e:	9b04      	ldr	r3, [sp, #16]
 8005360:	3301      	adds	r3, #1
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	9b05      	ldr	r3, [sp, #20]
 8005366:	3301      	adds	r3, #1
 8005368:	9305      	str	r3, [sp, #20]
 800536a:	f04f 0801 	mov.w	r8, #1
 800536e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005370:	2b00      	cmp	r3, #0
 8005372:	f47f af6a 	bne.w	800524a <_dtoa_r+0x7ca>
 8005376:	2001      	movs	r0, #1
 8005378:	e76f      	b.n	800525a <_dtoa_r+0x7da>
 800537a:	f04f 0800 	mov.w	r8, #0
 800537e:	e7f6      	b.n	800536e <_dtoa_r+0x8ee>
 8005380:	4698      	mov	r8, r3
 8005382:	e7f4      	b.n	800536e <_dtoa_r+0x8ee>
 8005384:	f43f af7d 	beq.w	8005282 <_dtoa_r+0x802>
 8005388:	4618      	mov	r0, r3
 800538a:	301c      	adds	r0, #28
 800538c:	e772      	b.n	8005274 <_dtoa_r+0x7f4>
 800538e:	9b03      	ldr	r3, [sp, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	dc37      	bgt.n	8005404 <_dtoa_r+0x984>
 8005394:	9b06      	ldr	r3, [sp, #24]
 8005396:	2b02      	cmp	r3, #2
 8005398:	dd34      	ble.n	8005404 <_dtoa_r+0x984>
 800539a:	9b03      	ldr	r3, [sp, #12]
 800539c:	9302      	str	r3, [sp, #8]
 800539e:	9b02      	ldr	r3, [sp, #8]
 80053a0:	b96b      	cbnz	r3, 80053be <_dtoa_r+0x93e>
 80053a2:	4631      	mov	r1, r6
 80053a4:	2205      	movs	r2, #5
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 f9d4 	bl	8005754 <__multadd>
 80053ac:	4601      	mov	r1, r0
 80053ae:	4606      	mov	r6, r0
 80053b0:	ee18 0a10 	vmov	r0, s16
 80053b4:	f000 fbee 	bl	8005b94 <__mcmp>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	f73f adbb 	bgt.w	8004f34 <_dtoa_r+0x4b4>
 80053be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c0:	9d01      	ldr	r5, [sp, #4]
 80053c2:	43db      	mvns	r3, r3
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	f04f 0800 	mov.w	r8, #0
 80053ca:	4631      	mov	r1, r6
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 f99f 	bl	8005710 <_Bfree>
 80053d2:	2f00      	cmp	r7, #0
 80053d4:	f43f aea4 	beq.w	8005120 <_dtoa_r+0x6a0>
 80053d8:	f1b8 0f00 	cmp.w	r8, #0
 80053dc:	d005      	beq.n	80053ea <_dtoa_r+0x96a>
 80053de:	45b8      	cmp	r8, r7
 80053e0:	d003      	beq.n	80053ea <_dtoa_r+0x96a>
 80053e2:	4641      	mov	r1, r8
 80053e4:	4620      	mov	r0, r4
 80053e6:	f000 f993 	bl	8005710 <_Bfree>
 80053ea:	4639      	mov	r1, r7
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f98f 	bl	8005710 <_Bfree>
 80053f2:	e695      	b.n	8005120 <_dtoa_r+0x6a0>
 80053f4:	2600      	movs	r6, #0
 80053f6:	4637      	mov	r7, r6
 80053f8:	e7e1      	b.n	80053be <_dtoa_r+0x93e>
 80053fa:	9700      	str	r7, [sp, #0]
 80053fc:	4637      	mov	r7, r6
 80053fe:	e599      	b.n	8004f34 <_dtoa_r+0x4b4>
 8005400:	40240000 	.word	0x40240000
 8005404:	9b08      	ldr	r3, [sp, #32]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80ca 	beq.w	80055a0 <_dtoa_r+0xb20>
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	9302      	str	r3, [sp, #8]
 8005410:	2d00      	cmp	r5, #0
 8005412:	dd05      	ble.n	8005420 <_dtoa_r+0x9a0>
 8005414:	4639      	mov	r1, r7
 8005416:	462a      	mov	r2, r5
 8005418:	4620      	mov	r0, r4
 800541a:	f000 fb4b 	bl	8005ab4 <__lshift>
 800541e:	4607      	mov	r7, r0
 8005420:	f1b8 0f00 	cmp.w	r8, #0
 8005424:	d05b      	beq.n	80054de <_dtoa_r+0xa5e>
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4620      	mov	r0, r4
 800542a:	f000 f931 	bl	8005690 <_Balloc>
 800542e:	4605      	mov	r5, r0
 8005430:	b928      	cbnz	r0, 800543e <_dtoa_r+0x9be>
 8005432:	4b87      	ldr	r3, [pc, #540]	; (8005650 <_dtoa_r+0xbd0>)
 8005434:	4602      	mov	r2, r0
 8005436:	f240 21ea 	movw	r1, #746	; 0x2ea
 800543a:	f7ff bb3b 	b.w	8004ab4 <_dtoa_r+0x34>
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	3202      	adds	r2, #2
 8005442:	0092      	lsls	r2, r2, #2
 8005444:	f107 010c 	add.w	r1, r7, #12
 8005448:	300c      	adds	r0, #12
 800544a:	f000 f913 	bl	8005674 <memcpy>
 800544e:	2201      	movs	r2, #1
 8005450:	4629      	mov	r1, r5
 8005452:	4620      	mov	r0, r4
 8005454:	f000 fb2e 	bl	8005ab4 <__lshift>
 8005458:	9b01      	ldr	r3, [sp, #4]
 800545a:	f103 0901 	add.w	r9, r3, #1
 800545e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005462:	4413      	add	r3, r2
 8005464:	9305      	str	r3, [sp, #20]
 8005466:	f00a 0301 	and.w	r3, sl, #1
 800546a:	46b8      	mov	r8, r7
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	4607      	mov	r7, r0
 8005470:	4631      	mov	r1, r6
 8005472:	ee18 0a10 	vmov	r0, s16
 8005476:	f7ff fa75 	bl	8004964 <quorem>
 800547a:	4641      	mov	r1, r8
 800547c:	9002      	str	r0, [sp, #8]
 800547e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005482:	ee18 0a10 	vmov	r0, s16
 8005486:	f000 fb85 	bl	8005b94 <__mcmp>
 800548a:	463a      	mov	r2, r7
 800548c:	9003      	str	r0, [sp, #12]
 800548e:	4631      	mov	r1, r6
 8005490:	4620      	mov	r0, r4
 8005492:	f000 fb9b 	bl	8005bcc <__mdiff>
 8005496:	68c2      	ldr	r2, [r0, #12]
 8005498:	f109 3bff 	add.w	fp, r9, #4294967295
 800549c:	4605      	mov	r5, r0
 800549e:	bb02      	cbnz	r2, 80054e2 <_dtoa_r+0xa62>
 80054a0:	4601      	mov	r1, r0
 80054a2:	ee18 0a10 	vmov	r0, s16
 80054a6:	f000 fb75 	bl	8005b94 <__mcmp>
 80054aa:	4602      	mov	r2, r0
 80054ac:	4629      	mov	r1, r5
 80054ae:	4620      	mov	r0, r4
 80054b0:	9207      	str	r2, [sp, #28]
 80054b2:	f000 f92d 	bl	8005710 <_Bfree>
 80054b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80054ba:	ea43 0102 	orr.w	r1, r3, r2
 80054be:	9b04      	ldr	r3, [sp, #16]
 80054c0:	430b      	orrs	r3, r1
 80054c2:	464d      	mov	r5, r9
 80054c4:	d10f      	bne.n	80054e6 <_dtoa_r+0xa66>
 80054c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80054ca:	d02a      	beq.n	8005522 <_dtoa_r+0xaa2>
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	dd02      	ble.n	80054d8 <_dtoa_r+0xa58>
 80054d2:	9b02      	ldr	r3, [sp, #8]
 80054d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80054d8:	f88b a000 	strb.w	sl, [fp]
 80054dc:	e775      	b.n	80053ca <_dtoa_r+0x94a>
 80054de:	4638      	mov	r0, r7
 80054e0:	e7ba      	b.n	8005458 <_dtoa_r+0x9d8>
 80054e2:	2201      	movs	r2, #1
 80054e4:	e7e2      	b.n	80054ac <_dtoa_r+0xa2c>
 80054e6:	9b03      	ldr	r3, [sp, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	db04      	blt.n	80054f6 <_dtoa_r+0xa76>
 80054ec:	9906      	ldr	r1, [sp, #24]
 80054ee:	430b      	orrs	r3, r1
 80054f0:	9904      	ldr	r1, [sp, #16]
 80054f2:	430b      	orrs	r3, r1
 80054f4:	d122      	bne.n	800553c <_dtoa_r+0xabc>
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	ddee      	ble.n	80054d8 <_dtoa_r+0xa58>
 80054fa:	ee18 1a10 	vmov	r1, s16
 80054fe:	2201      	movs	r2, #1
 8005500:	4620      	mov	r0, r4
 8005502:	f000 fad7 	bl	8005ab4 <__lshift>
 8005506:	4631      	mov	r1, r6
 8005508:	ee08 0a10 	vmov	s16, r0
 800550c:	f000 fb42 	bl	8005b94 <__mcmp>
 8005510:	2800      	cmp	r0, #0
 8005512:	dc03      	bgt.n	800551c <_dtoa_r+0xa9c>
 8005514:	d1e0      	bne.n	80054d8 <_dtoa_r+0xa58>
 8005516:	f01a 0f01 	tst.w	sl, #1
 800551a:	d0dd      	beq.n	80054d8 <_dtoa_r+0xa58>
 800551c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005520:	d1d7      	bne.n	80054d2 <_dtoa_r+0xa52>
 8005522:	2339      	movs	r3, #57	; 0x39
 8005524:	f88b 3000 	strb.w	r3, [fp]
 8005528:	462b      	mov	r3, r5
 800552a:	461d      	mov	r5, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005532:	2a39      	cmp	r2, #57	; 0x39
 8005534:	d071      	beq.n	800561a <_dtoa_r+0xb9a>
 8005536:	3201      	adds	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e746      	b.n	80053ca <_dtoa_r+0x94a>
 800553c:	2a00      	cmp	r2, #0
 800553e:	dd07      	ble.n	8005550 <_dtoa_r+0xad0>
 8005540:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005544:	d0ed      	beq.n	8005522 <_dtoa_r+0xaa2>
 8005546:	f10a 0301 	add.w	r3, sl, #1
 800554a:	f88b 3000 	strb.w	r3, [fp]
 800554e:	e73c      	b.n	80053ca <_dtoa_r+0x94a>
 8005550:	9b05      	ldr	r3, [sp, #20]
 8005552:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005556:	4599      	cmp	r9, r3
 8005558:	d047      	beq.n	80055ea <_dtoa_r+0xb6a>
 800555a:	ee18 1a10 	vmov	r1, s16
 800555e:	2300      	movs	r3, #0
 8005560:	220a      	movs	r2, #10
 8005562:	4620      	mov	r0, r4
 8005564:	f000 f8f6 	bl	8005754 <__multadd>
 8005568:	45b8      	cmp	r8, r7
 800556a:	ee08 0a10 	vmov	s16, r0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	f04f 020a 	mov.w	r2, #10
 8005576:	4641      	mov	r1, r8
 8005578:	4620      	mov	r0, r4
 800557a:	d106      	bne.n	800558a <_dtoa_r+0xb0a>
 800557c:	f000 f8ea 	bl	8005754 <__multadd>
 8005580:	4680      	mov	r8, r0
 8005582:	4607      	mov	r7, r0
 8005584:	f109 0901 	add.w	r9, r9, #1
 8005588:	e772      	b.n	8005470 <_dtoa_r+0x9f0>
 800558a:	f000 f8e3 	bl	8005754 <__multadd>
 800558e:	4639      	mov	r1, r7
 8005590:	4680      	mov	r8, r0
 8005592:	2300      	movs	r3, #0
 8005594:	220a      	movs	r2, #10
 8005596:	4620      	mov	r0, r4
 8005598:	f000 f8dc 	bl	8005754 <__multadd>
 800559c:	4607      	mov	r7, r0
 800559e:	e7f1      	b.n	8005584 <_dtoa_r+0xb04>
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	9302      	str	r3, [sp, #8]
 80055a4:	9d01      	ldr	r5, [sp, #4]
 80055a6:	ee18 0a10 	vmov	r0, s16
 80055aa:	4631      	mov	r1, r6
 80055ac:	f7ff f9da 	bl	8004964 <quorem>
 80055b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80055b4:	9b01      	ldr	r3, [sp, #4]
 80055b6:	f805 ab01 	strb.w	sl, [r5], #1
 80055ba:	1aea      	subs	r2, r5, r3
 80055bc:	9b02      	ldr	r3, [sp, #8]
 80055be:	4293      	cmp	r3, r2
 80055c0:	dd09      	ble.n	80055d6 <_dtoa_r+0xb56>
 80055c2:	ee18 1a10 	vmov	r1, s16
 80055c6:	2300      	movs	r3, #0
 80055c8:	220a      	movs	r2, #10
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 f8c2 	bl	8005754 <__multadd>
 80055d0:	ee08 0a10 	vmov	s16, r0
 80055d4:	e7e7      	b.n	80055a6 <_dtoa_r+0xb26>
 80055d6:	9b02      	ldr	r3, [sp, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bfc8      	it	gt
 80055dc:	461d      	movgt	r5, r3
 80055de:	9b01      	ldr	r3, [sp, #4]
 80055e0:	bfd8      	it	le
 80055e2:	2501      	movle	r5, #1
 80055e4:	441d      	add	r5, r3
 80055e6:	f04f 0800 	mov.w	r8, #0
 80055ea:	ee18 1a10 	vmov	r1, s16
 80055ee:	2201      	movs	r2, #1
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 fa5f 	bl	8005ab4 <__lshift>
 80055f6:	4631      	mov	r1, r6
 80055f8:	ee08 0a10 	vmov	s16, r0
 80055fc:	f000 faca 	bl	8005b94 <__mcmp>
 8005600:	2800      	cmp	r0, #0
 8005602:	dc91      	bgt.n	8005528 <_dtoa_r+0xaa8>
 8005604:	d102      	bne.n	800560c <_dtoa_r+0xb8c>
 8005606:	f01a 0f01 	tst.w	sl, #1
 800560a:	d18d      	bne.n	8005528 <_dtoa_r+0xaa8>
 800560c:	462b      	mov	r3, r5
 800560e:	461d      	mov	r5, r3
 8005610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005614:	2a30      	cmp	r2, #48	; 0x30
 8005616:	d0fa      	beq.n	800560e <_dtoa_r+0xb8e>
 8005618:	e6d7      	b.n	80053ca <_dtoa_r+0x94a>
 800561a:	9a01      	ldr	r2, [sp, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d184      	bne.n	800552a <_dtoa_r+0xaaa>
 8005620:	9b00      	ldr	r3, [sp, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	2331      	movs	r3, #49	; 0x31
 8005628:	7013      	strb	r3, [r2, #0]
 800562a:	e6ce      	b.n	80053ca <_dtoa_r+0x94a>
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <_dtoa_r+0xbd4>)
 800562e:	f7ff ba95 	b.w	8004b5c <_dtoa_r+0xdc>
 8005632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005634:	2b00      	cmp	r3, #0
 8005636:	f47f aa6e 	bne.w	8004b16 <_dtoa_r+0x96>
 800563a:	4b07      	ldr	r3, [pc, #28]	; (8005658 <_dtoa_r+0xbd8>)
 800563c:	f7ff ba8e 	b.w	8004b5c <_dtoa_r+0xdc>
 8005640:	9b02      	ldr	r3, [sp, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	dcae      	bgt.n	80055a4 <_dtoa_r+0xb24>
 8005646:	9b06      	ldr	r3, [sp, #24]
 8005648:	2b02      	cmp	r3, #2
 800564a:	f73f aea8 	bgt.w	800539e <_dtoa_r+0x91e>
 800564e:	e7a9      	b.n	80055a4 <_dtoa_r+0xb24>
 8005650:	08006f47 	.word	0x08006f47
 8005654:	08006ea4 	.word	0x08006ea4
 8005658:	08006ec8 	.word	0x08006ec8

0800565c <_localeconv_r>:
 800565c:	4800      	ldr	r0, [pc, #0]	; (8005660 <_localeconv_r+0x4>)
 800565e:	4770      	bx	lr
 8005660:	20000164 	.word	0x20000164

08005664 <malloc>:
 8005664:	4b02      	ldr	r3, [pc, #8]	; (8005670 <malloc+0xc>)
 8005666:	4601      	mov	r1, r0
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	f000 bc17 	b.w	8005e9c <_malloc_r>
 800566e:	bf00      	nop
 8005670:	20000010 	.word	0x20000010

08005674 <memcpy>:
 8005674:	440a      	add	r2, r1
 8005676:	4291      	cmp	r1, r2
 8005678:	f100 33ff 	add.w	r3, r0, #4294967295
 800567c:	d100      	bne.n	8005680 <memcpy+0xc>
 800567e:	4770      	bx	lr
 8005680:	b510      	push	{r4, lr}
 8005682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568a:	4291      	cmp	r1, r2
 800568c:	d1f9      	bne.n	8005682 <memcpy+0xe>
 800568e:	bd10      	pop	{r4, pc}

08005690 <_Balloc>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005694:	4604      	mov	r4, r0
 8005696:	460d      	mov	r5, r1
 8005698:	b976      	cbnz	r6, 80056b8 <_Balloc+0x28>
 800569a:	2010      	movs	r0, #16
 800569c:	f7ff ffe2 	bl	8005664 <malloc>
 80056a0:	4602      	mov	r2, r0
 80056a2:	6260      	str	r0, [r4, #36]	; 0x24
 80056a4:	b920      	cbnz	r0, 80056b0 <_Balloc+0x20>
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <_Balloc+0x78>)
 80056a8:	4818      	ldr	r0, [pc, #96]	; (800570c <_Balloc+0x7c>)
 80056aa:	2166      	movs	r1, #102	; 0x66
 80056ac:	f000 fdd6 	bl	800625c <__assert_func>
 80056b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056b4:	6006      	str	r6, [r0, #0]
 80056b6:	60c6      	str	r6, [r0, #12]
 80056b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056ba:	68f3      	ldr	r3, [r6, #12]
 80056bc:	b183      	cbz	r3, 80056e0 <_Balloc+0x50>
 80056be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056c6:	b9b8      	cbnz	r0, 80056f8 <_Balloc+0x68>
 80056c8:	2101      	movs	r1, #1
 80056ca:	fa01 f605 	lsl.w	r6, r1, r5
 80056ce:	1d72      	adds	r2, r6, #5
 80056d0:	0092      	lsls	r2, r2, #2
 80056d2:	4620      	mov	r0, r4
 80056d4:	f000 fb60 	bl	8005d98 <_calloc_r>
 80056d8:	b160      	cbz	r0, 80056f4 <_Balloc+0x64>
 80056da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056de:	e00e      	b.n	80056fe <_Balloc+0x6e>
 80056e0:	2221      	movs	r2, #33	; 0x21
 80056e2:	2104      	movs	r1, #4
 80056e4:	4620      	mov	r0, r4
 80056e6:	f000 fb57 	bl	8005d98 <_calloc_r>
 80056ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ec:	60f0      	str	r0, [r6, #12]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e4      	bne.n	80056be <_Balloc+0x2e>
 80056f4:	2000      	movs	r0, #0
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
 80056f8:	6802      	ldr	r2, [r0, #0]
 80056fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056fe:	2300      	movs	r3, #0
 8005700:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005704:	e7f7      	b.n	80056f6 <_Balloc+0x66>
 8005706:	bf00      	nop
 8005708:	08006ed5 	.word	0x08006ed5
 800570c:	08006f58 	.word	0x08006f58

08005710 <_Bfree>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005714:	4605      	mov	r5, r0
 8005716:	460c      	mov	r4, r1
 8005718:	b976      	cbnz	r6, 8005738 <_Bfree+0x28>
 800571a:	2010      	movs	r0, #16
 800571c:	f7ff ffa2 	bl	8005664 <malloc>
 8005720:	4602      	mov	r2, r0
 8005722:	6268      	str	r0, [r5, #36]	; 0x24
 8005724:	b920      	cbnz	r0, 8005730 <_Bfree+0x20>
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <_Bfree+0x3c>)
 8005728:	4809      	ldr	r0, [pc, #36]	; (8005750 <_Bfree+0x40>)
 800572a:	218a      	movs	r1, #138	; 0x8a
 800572c:	f000 fd96 	bl	800625c <__assert_func>
 8005730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005734:	6006      	str	r6, [r0, #0]
 8005736:	60c6      	str	r6, [r0, #12]
 8005738:	b13c      	cbz	r4, 800574a <_Bfree+0x3a>
 800573a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800573c:	6862      	ldr	r2, [r4, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005744:	6021      	str	r1, [r4, #0]
 8005746:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	08006ed5 	.word	0x08006ed5
 8005750:	08006f58 	.word	0x08006f58

08005754 <__multadd>:
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005758:	690d      	ldr	r5, [r1, #16]
 800575a:	4607      	mov	r7, r0
 800575c:	460c      	mov	r4, r1
 800575e:	461e      	mov	r6, r3
 8005760:	f101 0c14 	add.w	ip, r1, #20
 8005764:	2000      	movs	r0, #0
 8005766:	f8dc 3000 	ldr.w	r3, [ip]
 800576a:	b299      	uxth	r1, r3
 800576c:	fb02 6101 	mla	r1, r2, r1, r6
 8005770:	0c1e      	lsrs	r6, r3, #16
 8005772:	0c0b      	lsrs	r3, r1, #16
 8005774:	fb02 3306 	mla	r3, r2, r6, r3
 8005778:	b289      	uxth	r1, r1
 800577a:	3001      	adds	r0, #1
 800577c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005780:	4285      	cmp	r5, r0
 8005782:	f84c 1b04 	str.w	r1, [ip], #4
 8005786:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800578a:	dcec      	bgt.n	8005766 <__multadd+0x12>
 800578c:	b30e      	cbz	r6, 80057d2 <__multadd+0x7e>
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	42ab      	cmp	r3, r5
 8005792:	dc19      	bgt.n	80057c8 <__multadd+0x74>
 8005794:	6861      	ldr	r1, [r4, #4]
 8005796:	4638      	mov	r0, r7
 8005798:	3101      	adds	r1, #1
 800579a:	f7ff ff79 	bl	8005690 <_Balloc>
 800579e:	4680      	mov	r8, r0
 80057a0:	b928      	cbnz	r0, 80057ae <__multadd+0x5a>
 80057a2:	4602      	mov	r2, r0
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <__multadd+0x84>)
 80057a6:	480d      	ldr	r0, [pc, #52]	; (80057dc <__multadd+0x88>)
 80057a8:	21b5      	movs	r1, #181	; 0xb5
 80057aa:	f000 fd57 	bl	800625c <__assert_func>
 80057ae:	6922      	ldr	r2, [r4, #16]
 80057b0:	3202      	adds	r2, #2
 80057b2:	f104 010c 	add.w	r1, r4, #12
 80057b6:	0092      	lsls	r2, r2, #2
 80057b8:	300c      	adds	r0, #12
 80057ba:	f7ff ff5b 	bl	8005674 <memcpy>
 80057be:	4621      	mov	r1, r4
 80057c0:	4638      	mov	r0, r7
 80057c2:	f7ff ffa5 	bl	8005710 <_Bfree>
 80057c6:	4644      	mov	r4, r8
 80057c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057cc:	3501      	adds	r5, #1
 80057ce:	615e      	str	r6, [r3, #20]
 80057d0:	6125      	str	r5, [r4, #16]
 80057d2:	4620      	mov	r0, r4
 80057d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d8:	08006f47 	.word	0x08006f47
 80057dc:	08006f58 	.word	0x08006f58

080057e0 <__hi0bits>:
 80057e0:	0c03      	lsrs	r3, r0, #16
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	b9d3      	cbnz	r3, 800581c <__hi0bits+0x3c>
 80057e6:	0400      	lsls	r0, r0, #16
 80057e8:	2310      	movs	r3, #16
 80057ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80057ee:	bf04      	itt	eq
 80057f0:	0200      	lsleq	r0, r0, #8
 80057f2:	3308      	addeq	r3, #8
 80057f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80057f8:	bf04      	itt	eq
 80057fa:	0100      	lsleq	r0, r0, #4
 80057fc:	3304      	addeq	r3, #4
 80057fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005802:	bf04      	itt	eq
 8005804:	0080      	lsleq	r0, r0, #2
 8005806:	3302      	addeq	r3, #2
 8005808:	2800      	cmp	r0, #0
 800580a:	db05      	blt.n	8005818 <__hi0bits+0x38>
 800580c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005810:	f103 0301 	add.w	r3, r3, #1
 8005814:	bf08      	it	eq
 8005816:	2320      	moveq	r3, #32
 8005818:	4618      	mov	r0, r3
 800581a:	4770      	bx	lr
 800581c:	2300      	movs	r3, #0
 800581e:	e7e4      	b.n	80057ea <__hi0bits+0xa>

08005820 <__lo0bits>:
 8005820:	6803      	ldr	r3, [r0, #0]
 8005822:	f013 0207 	ands.w	r2, r3, #7
 8005826:	4601      	mov	r1, r0
 8005828:	d00b      	beq.n	8005842 <__lo0bits+0x22>
 800582a:	07da      	lsls	r2, r3, #31
 800582c:	d423      	bmi.n	8005876 <__lo0bits+0x56>
 800582e:	0798      	lsls	r0, r3, #30
 8005830:	bf49      	itett	mi
 8005832:	085b      	lsrmi	r3, r3, #1
 8005834:	089b      	lsrpl	r3, r3, #2
 8005836:	2001      	movmi	r0, #1
 8005838:	600b      	strmi	r3, [r1, #0]
 800583a:	bf5c      	itt	pl
 800583c:	600b      	strpl	r3, [r1, #0]
 800583e:	2002      	movpl	r0, #2
 8005840:	4770      	bx	lr
 8005842:	b298      	uxth	r0, r3
 8005844:	b9a8      	cbnz	r0, 8005872 <__lo0bits+0x52>
 8005846:	0c1b      	lsrs	r3, r3, #16
 8005848:	2010      	movs	r0, #16
 800584a:	b2da      	uxtb	r2, r3
 800584c:	b90a      	cbnz	r2, 8005852 <__lo0bits+0x32>
 800584e:	3008      	adds	r0, #8
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	071a      	lsls	r2, r3, #28
 8005854:	bf04      	itt	eq
 8005856:	091b      	lsreq	r3, r3, #4
 8005858:	3004      	addeq	r0, #4
 800585a:	079a      	lsls	r2, r3, #30
 800585c:	bf04      	itt	eq
 800585e:	089b      	lsreq	r3, r3, #2
 8005860:	3002      	addeq	r0, #2
 8005862:	07da      	lsls	r2, r3, #31
 8005864:	d403      	bmi.n	800586e <__lo0bits+0x4e>
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	f100 0001 	add.w	r0, r0, #1
 800586c:	d005      	beq.n	800587a <__lo0bits+0x5a>
 800586e:	600b      	str	r3, [r1, #0]
 8005870:	4770      	bx	lr
 8005872:	4610      	mov	r0, r2
 8005874:	e7e9      	b.n	800584a <__lo0bits+0x2a>
 8005876:	2000      	movs	r0, #0
 8005878:	4770      	bx	lr
 800587a:	2020      	movs	r0, #32
 800587c:	4770      	bx	lr
	...

08005880 <__i2b>:
 8005880:	b510      	push	{r4, lr}
 8005882:	460c      	mov	r4, r1
 8005884:	2101      	movs	r1, #1
 8005886:	f7ff ff03 	bl	8005690 <_Balloc>
 800588a:	4602      	mov	r2, r0
 800588c:	b928      	cbnz	r0, 800589a <__i2b+0x1a>
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <__i2b+0x24>)
 8005890:	4805      	ldr	r0, [pc, #20]	; (80058a8 <__i2b+0x28>)
 8005892:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005896:	f000 fce1 	bl	800625c <__assert_func>
 800589a:	2301      	movs	r3, #1
 800589c:	6144      	str	r4, [r0, #20]
 800589e:	6103      	str	r3, [r0, #16]
 80058a0:	bd10      	pop	{r4, pc}
 80058a2:	bf00      	nop
 80058a4:	08006f47 	.word	0x08006f47
 80058a8:	08006f58 	.word	0x08006f58

080058ac <__multiply>:
 80058ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b0:	4691      	mov	r9, r2
 80058b2:	690a      	ldr	r2, [r1, #16]
 80058b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	bfb8      	it	lt
 80058bc:	460b      	movlt	r3, r1
 80058be:	460c      	mov	r4, r1
 80058c0:	bfbc      	itt	lt
 80058c2:	464c      	movlt	r4, r9
 80058c4:	4699      	movlt	r9, r3
 80058c6:	6927      	ldr	r7, [r4, #16]
 80058c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80058cc:	68a3      	ldr	r3, [r4, #8]
 80058ce:	6861      	ldr	r1, [r4, #4]
 80058d0:	eb07 060a 	add.w	r6, r7, sl
 80058d4:	42b3      	cmp	r3, r6
 80058d6:	b085      	sub	sp, #20
 80058d8:	bfb8      	it	lt
 80058da:	3101      	addlt	r1, #1
 80058dc:	f7ff fed8 	bl	8005690 <_Balloc>
 80058e0:	b930      	cbnz	r0, 80058f0 <__multiply+0x44>
 80058e2:	4602      	mov	r2, r0
 80058e4:	4b44      	ldr	r3, [pc, #272]	; (80059f8 <__multiply+0x14c>)
 80058e6:	4845      	ldr	r0, [pc, #276]	; (80059fc <__multiply+0x150>)
 80058e8:	f240 115d 	movw	r1, #349	; 0x15d
 80058ec:	f000 fcb6 	bl	800625c <__assert_func>
 80058f0:	f100 0514 	add.w	r5, r0, #20
 80058f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80058f8:	462b      	mov	r3, r5
 80058fa:	2200      	movs	r2, #0
 80058fc:	4543      	cmp	r3, r8
 80058fe:	d321      	bcc.n	8005944 <__multiply+0x98>
 8005900:	f104 0314 	add.w	r3, r4, #20
 8005904:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005908:	f109 0314 	add.w	r3, r9, #20
 800590c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005910:	9202      	str	r2, [sp, #8]
 8005912:	1b3a      	subs	r2, r7, r4
 8005914:	3a15      	subs	r2, #21
 8005916:	f022 0203 	bic.w	r2, r2, #3
 800591a:	3204      	adds	r2, #4
 800591c:	f104 0115 	add.w	r1, r4, #21
 8005920:	428f      	cmp	r7, r1
 8005922:	bf38      	it	cc
 8005924:	2204      	movcc	r2, #4
 8005926:	9201      	str	r2, [sp, #4]
 8005928:	9a02      	ldr	r2, [sp, #8]
 800592a:	9303      	str	r3, [sp, #12]
 800592c:	429a      	cmp	r2, r3
 800592e:	d80c      	bhi.n	800594a <__multiply+0x9e>
 8005930:	2e00      	cmp	r6, #0
 8005932:	dd03      	ble.n	800593c <__multiply+0x90>
 8005934:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005938:	2b00      	cmp	r3, #0
 800593a:	d05a      	beq.n	80059f2 <__multiply+0x146>
 800593c:	6106      	str	r6, [r0, #16]
 800593e:	b005      	add	sp, #20
 8005940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005944:	f843 2b04 	str.w	r2, [r3], #4
 8005948:	e7d8      	b.n	80058fc <__multiply+0x50>
 800594a:	f8b3 a000 	ldrh.w	sl, [r3]
 800594e:	f1ba 0f00 	cmp.w	sl, #0
 8005952:	d024      	beq.n	800599e <__multiply+0xf2>
 8005954:	f104 0e14 	add.w	lr, r4, #20
 8005958:	46a9      	mov	r9, r5
 800595a:	f04f 0c00 	mov.w	ip, #0
 800595e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005962:	f8d9 1000 	ldr.w	r1, [r9]
 8005966:	fa1f fb82 	uxth.w	fp, r2
 800596a:	b289      	uxth	r1, r1
 800596c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005970:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005974:	f8d9 2000 	ldr.w	r2, [r9]
 8005978:	4461      	add	r1, ip
 800597a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800597e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005982:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005986:	b289      	uxth	r1, r1
 8005988:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800598c:	4577      	cmp	r7, lr
 800598e:	f849 1b04 	str.w	r1, [r9], #4
 8005992:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005996:	d8e2      	bhi.n	800595e <__multiply+0xb2>
 8005998:	9a01      	ldr	r2, [sp, #4]
 800599a:	f845 c002 	str.w	ip, [r5, r2]
 800599e:	9a03      	ldr	r2, [sp, #12]
 80059a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059a4:	3304      	adds	r3, #4
 80059a6:	f1b9 0f00 	cmp.w	r9, #0
 80059aa:	d020      	beq.n	80059ee <__multiply+0x142>
 80059ac:	6829      	ldr	r1, [r5, #0]
 80059ae:	f104 0c14 	add.w	ip, r4, #20
 80059b2:	46ae      	mov	lr, r5
 80059b4:	f04f 0a00 	mov.w	sl, #0
 80059b8:	f8bc b000 	ldrh.w	fp, [ip]
 80059bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80059c0:	fb09 220b 	mla	r2, r9, fp, r2
 80059c4:	4492      	add	sl, r2
 80059c6:	b289      	uxth	r1, r1
 80059c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80059cc:	f84e 1b04 	str.w	r1, [lr], #4
 80059d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80059d4:	f8be 1000 	ldrh.w	r1, [lr]
 80059d8:	0c12      	lsrs	r2, r2, #16
 80059da:	fb09 1102 	mla	r1, r9, r2, r1
 80059de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80059e2:	4567      	cmp	r7, ip
 80059e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80059e8:	d8e6      	bhi.n	80059b8 <__multiply+0x10c>
 80059ea:	9a01      	ldr	r2, [sp, #4]
 80059ec:	50a9      	str	r1, [r5, r2]
 80059ee:	3504      	adds	r5, #4
 80059f0:	e79a      	b.n	8005928 <__multiply+0x7c>
 80059f2:	3e01      	subs	r6, #1
 80059f4:	e79c      	b.n	8005930 <__multiply+0x84>
 80059f6:	bf00      	nop
 80059f8:	08006f47 	.word	0x08006f47
 80059fc:	08006f58 	.word	0x08006f58

08005a00 <__pow5mult>:
 8005a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a04:	4615      	mov	r5, r2
 8005a06:	f012 0203 	ands.w	r2, r2, #3
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	460f      	mov	r7, r1
 8005a0e:	d007      	beq.n	8005a20 <__pow5mult+0x20>
 8005a10:	4c25      	ldr	r4, [pc, #148]	; (8005aa8 <__pow5mult+0xa8>)
 8005a12:	3a01      	subs	r2, #1
 8005a14:	2300      	movs	r3, #0
 8005a16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a1a:	f7ff fe9b 	bl	8005754 <__multadd>
 8005a1e:	4607      	mov	r7, r0
 8005a20:	10ad      	asrs	r5, r5, #2
 8005a22:	d03d      	beq.n	8005aa0 <__pow5mult+0xa0>
 8005a24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a26:	b97c      	cbnz	r4, 8005a48 <__pow5mult+0x48>
 8005a28:	2010      	movs	r0, #16
 8005a2a:	f7ff fe1b 	bl	8005664 <malloc>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	6270      	str	r0, [r6, #36]	; 0x24
 8005a32:	b928      	cbnz	r0, 8005a40 <__pow5mult+0x40>
 8005a34:	4b1d      	ldr	r3, [pc, #116]	; (8005aac <__pow5mult+0xac>)
 8005a36:	481e      	ldr	r0, [pc, #120]	; (8005ab0 <__pow5mult+0xb0>)
 8005a38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a3c:	f000 fc0e 	bl	800625c <__assert_func>
 8005a40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a44:	6004      	str	r4, [r0, #0]
 8005a46:	60c4      	str	r4, [r0, #12]
 8005a48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a50:	b94c      	cbnz	r4, 8005a66 <__pow5mult+0x66>
 8005a52:	f240 2171 	movw	r1, #625	; 0x271
 8005a56:	4630      	mov	r0, r6
 8005a58:	f7ff ff12 	bl	8005880 <__i2b>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a62:	4604      	mov	r4, r0
 8005a64:	6003      	str	r3, [r0, #0]
 8005a66:	f04f 0900 	mov.w	r9, #0
 8005a6a:	07eb      	lsls	r3, r5, #31
 8005a6c:	d50a      	bpl.n	8005a84 <__pow5mult+0x84>
 8005a6e:	4639      	mov	r1, r7
 8005a70:	4622      	mov	r2, r4
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff ff1a 	bl	80058ac <__multiply>
 8005a78:	4639      	mov	r1, r7
 8005a7a:	4680      	mov	r8, r0
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f7ff fe47 	bl	8005710 <_Bfree>
 8005a82:	4647      	mov	r7, r8
 8005a84:	106d      	asrs	r5, r5, #1
 8005a86:	d00b      	beq.n	8005aa0 <__pow5mult+0xa0>
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	b938      	cbnz	r0, 8005a9c <__pow5mult+0x9c>
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	4621      	mov	r1, r4
 8005a90:	4630      	mov	r0, r6
 8005a92:	f7ff ff0b 	bl	80058ac <__multiply>
 8005a96:	6020      	str	r0, [r4, #0]
 8005a98:	f8c0 9000 	str.w	r9, [r0]
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	e7e4      	b.n	8005a6a <__pow5mult+0x6a>
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aa6:	bf00      	nop
 8005aa8:	080070a8 	.word	0x080070a8
 8005aac:	08006ed5 	.word	0x08006ed5
 8005ab0:	08006f58 	.word	0x08006f58

08005ab4 <__lshift>:
 8005ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	460c      	mov	r4, r1
 8005aba:	6849      	ldr	r1, [r1, #4]
 8005abc:	6923      	ldr	r3, [r4, #16]
 8005abe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	4607      	mov	r7, r0
 8005ac6:	4691      	mov	r9, r2
 8005ac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005acc:	f108 0601 	add.w	r6, r8, #1
 8005ad0:	42b3      	cmp	r3, r6
 8005ad2:	db0b      	blt.n	8005aec <__lshift+0x38>
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	f7ff fddb 	bl	8005690 <_Balloc>
 8005ada:	4605      	mov	r5, r0
 8005adc:	b948      	cbnz	r0, 8005af2 <__lshift+0x3e>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	4b2a      	ldr	r3, [pc, #168]	; (8005b8c <__lshift+0xd8>)
 8005ae2:	482b      	ldr	r0, [pc, #172]	; (8005b90 <__lshift+0xdc>)
 8005ae4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ae8:	f000 fbb8 	bl	800625c <__assert_func>
 8005aec:	3101      	adds	r1, #1
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	e7ee      	b.n	8005ad0 <__lshift+0x1c>
 8005af2:	2300      	movs	r3, #0
 8005af4:	f100 0114 	add.w	r1, r0, #20
 8005af8:	f100 0210 	add.w	r2, r0, #16
 8005afc:	4618      	mov	r0, r3
 8005afe:	4553      	cmp	r3, sl
 8005b00:	db37      	blt.n	8005b72 <__lshift+0xbe>
 8005b02:	6920      	ldr	r0, [r4, #16]
 8005b04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b08:	f104 0314 	add.w	r3, r4, #20
 8005b0c:	f019 091f 	ands.w	r9, r9, #31
 8005b10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b18:	d02f      	beq.n	8005b7a <__lshift+0xc6>
 8005b1a:	f1c9 0e20 	rsb	lr, r9, #32
 8005b1e:	468a      	mov	sl, r1
 8005b20:	f04f 0c00 	mov.w	ip, #0
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	fa02 f209 	lsl.w	r2, r2, r9
 8005b2a:	ea42 020c 	orr.w	r2, r2, ip
 8005b2e:	f84a 2b04 	str.w	r2, [sl], #4
 8005b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b36:	4298      	cmp	r0, r3
 8005b38:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005b3c:	d8f2      	bhi.n	8005b24 <__lshift+0x70>
 8005b3e:	1b03      	subs	r3, r0, r4
 8005b40:	3b15      	subs	r3, #21
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	3304      	adds	r3, #4
 8005b48:	f104 0215 	add.w	r2, r4, #21
 8005b4c:	4290      	cmp	r0, r2
 8005b4e:	bf38      	it	cc
 8005b50:	2304      	movcc	r3, #4
 8005b52:	f841 c003 	str.w	ip, [r1, r3]
 8005b56:	f1bc 0f00 	cmp.w	ip, #0
 8005b5a:	d001      	beq.n	8005b60 <__lshift+0xac>
 8005b5c:	f108 0602 	add.w	r6, r8, #2
 8005b60:	3e01      	subs	r6, #1
 8005b62:	4638      	mov	r0, r7
 8005b64:	612e      	str	r6, [r5, #16]
 8005b66:	4621      	mov	r1, r4
 8005b68:	f7ff fdd2 	bl	8005710 <_Bfree>
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b72:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b76:	3301      	adds	r3, #1
 8005b78:	e7c1      	b.n	8005afe <__lshift+0x4a>
 8005b7a:	3904      	subs	r1, #4
 8005b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b80:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b84:	4298      	cmp	r0, r3
 8005b86:	d8f9      	bhi.n	8005b7c <__lshift+0xc8>
 8005b88:	e7ea      	b.n	8005b60 <__lshift+0xac>
 8005b8a:	bf00      	nop
 8005b8c:	08006f47 	.word	0x08006f47
 8005b90:	08006f58 	.word	0x08006f58

08005b94 <__mcmp>:
 8005b94:	b530      	push	{r4, r5, lr}
 8005b96:	6902      	ldr	r2, [r0, #16]
 8005b98:	690c      	ldr	r4, [r1, #16]
 8005b9a:	1b12      	subs	r2, r2, r4
 8005b9c:	d10e      	bne.n	8005bbc <__mcmp+0x28>
 8005b9e:	f100 0314 	add.w	r3, r0, #20
 8005ba2:	3114      	adds	r1, #20
 8005ba4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005ba8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005bac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005bb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005bb4:	42a5      	cmp	r5, r4
 8005bb6:	d003      	beq.n	8005bc0 <__mcmp+0x2c>
 8005bb8:	d305      	bcc.n	8005bc6 <__mcmp+0x32>
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	bd30      	pop	{r4, r5, pc}
 8005bc0:	4283      	cmp	r3, r0
 8005bc2:	d3f3      	bcc.n	8005bac <__mcmp+0x18>
 8005bc4:	e7fa      	b.n	8005bbc <__mcmp+0x28>
 8005bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bca:	e7f7      	b.n	8005bbc <__mcmp+0x28>

08005bcc <__mdiff>:
 8005bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	4690      	mov	r8, r2
 8005bda:	f7ff ffdb 	bl	8005b94 <__mcmp>
 8005bde:	1e05      	subs	r5, r0, #0
 8005be0:	d110      	bne.n	8005c04 <__mdiff+0x38>
 8005be2:	4629      	mov	r1, r5
 8005be4:	4630      	mov	r0, r6
 8005be6:	f7ff fd53 	bl	8005690 <_Balloc>
 8005bea:	b930      	cbnz	r0, 8005bfa <__mdiff+0x2e>
 8005bec:	4b3a      	ldr	r3, [pc, #232]	; (8005cd8 <__mdiff+0x10c>)
 8005bee:	4602      	mov	r2, r0
 8005bf0:	f240 2132 	movw	r1, #562	; 0x232
 8005bf4:	4839      	ldr	r0, [pc, #228]	; (8005cdc <__mdiff+0x110>)
 8005bf6:	f000 fb31 	bl	800625c <__assert_func>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c04:	bfa4      	itt	ge
 8005c06:	4643      	movge	r3, r8
 8005c08:	46a0      	movge	r8, r4
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c10:	bfa6      	itte	ge
 8005c12:	461c      	movge	r4, r3
 8005c14:	2500      	movge	r5, #0
 8005c16:	2501      	movlt	r5, #1
 8005c18:	f7ff fd3a 	bl	8005690 <_Balloc>
 8005c1c:	b920      	cbnz	r0, 8005c28 <__mdiff+0x5c>
 8005c1e:	4b2e      	ldr	r3, [pc, #184]	; (8005cd8 <__mdiff+0x10c>)
 8005c20:	4602      	mov	r2, r0
 8005c22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c26:	e7e5      	b.n	8005bf4 <__mdiff+0x28>
 8005c28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c2c:	6926      	ldr	r6, [r4, #16]
 8005c2e:	60c5      	str	r5, [r0, #12]
 8005c30:	f104 0914 	add.w	r9, r4, #20
 8005c34:	f108 0514 	add.w	r5, r8, #20
 8005c38:	f100 0e14 	add.w	lr, r0, #20
 8005c3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005c40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c44:	f108 0210 	add.w	r2, r8, #16
 8005c48:	46f2      	mov	sl, lr
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005c54:	fa1f f883 	uxth.w	r8, r3
 8005c58:	fa11 f18b 	uxtah	r1, r1, fp
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	eba1 0808 	sub.w	r8, r1, r8
 8005c62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005c6a:	fa1f f888 	uxth.w	r8, r8
 8005c6e:	1419      	asrs	r1, r3, #16
 8005c70:	454e      	cmp	r6, r9
 8005c72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005c76:	f84a 3b04 	str.w	r3, [sl], #4
 8005c7a:	d8e7      	bhi.n	8005c4c <__mdiff+0x80>
 8005c7c:	1b33      	subs	r3, r6, r4
 8005c7e:	3b15      	subs	r3, #21
 8005c80:	f023 0303 	bic.w	r3, r3, #3
 8005c84:	3304      	adds	r3, #4
 8005c86:	3415      	adds	r4, #21
 8005c88:	42a6      	cmp	r6, r4
 8005c8a:	bf38      	it	cc
 8005c8c:	2304      	movcc	r3, #4
 8005c8e:	441d      	add	r5, r3
 8005c90:	4473      	add	r3, lr
 8005c92:	469e      	mov	lr, r3
 8005c94:	462e      	mov	r6, r5
 8005c96:	4566      	cmp	r6, ip
 8005c98:	d30e      	bcc.n	8005cb8 <__mdiff+0xec>
 8005c9a:	f10c 0203 	add.w	r2, ip, #3
 8005c9e:	1b52      	subs	r2, r2, r5
 8005ca0:	f022 0203 	bic.w	r2, r2, #3
 8005ca4:	3d03      	subs	r5, #3
 8005ca6:	45ac      	cmp	ip, r5
 8005ca8:	bf38      	it	cc
 8005caa:	2200      	movcc	r2, #0
 8005cac:	441a      	add	r2, r3
 8005cae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005cb2:	b17b      	cbz	r3, 8005cd4 <__mdiff+0x108>
 8005cb4:	6107      	str	r7, [r0, #16]
 8005cb6:	e7a3      	b.n	8005c00 <__mdiff+0x34>
 8005cb8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005cbc:	fa11 f288 	uxtah	r2, r1, r8
 8005cc0:	1414      	asrs	r4, r2, #16
 8005cc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005cc6:	b292      	uxth	r2, r2
 8005cc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005ccc:	f84e 2b04 	str.w	r2, [lr], #4
 8005cd0:	1421      	asrs	r1, r4, #16
 8005cd2:	e7e0      	b.n	8005c96 <__mdiff+0xca>
 8005cd4:	3f01      	subs	r7, #1
 8005cd6:	e7ea      	b.n	8005cae <__mdiff+0xe2>
 8005cd8:	08006f47 	.word	0x08006f47
 8005cdc:	08006f58 	.word	0x08006f58

08005ce0 <__d2b>:
 8005ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ce4:	4689      	mov	r9, r1
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	ec57 6b10 	vmov	r6, r7, d0
 8005cec:	4690      	mov	r8, r2
 8005cee:	f7ff fccf 	bl	8005690 <_Balloc>
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	b930      	cbnz	r0, 8005d04 <__d2b+0x24>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <__d2b+0xb0>)
 8005cfa:	4826      	ldr	r0, [pc, #152]	; (8005d94 <__d2b+0xb4>)
 8005cfc:	f240 310a 	movw	r1, #778	; 0x30a
 8005d00:	f000 faac 	bl	800625c <__assert_func>
 8005d04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d0c:	bb35      	cbnz	r5, 8005d5c <__d2b+0x7c>
 8005d0e:	2e00      	cmp	r6, #0
 8005d10:	9301      	str	r3, [sp, #4]
 8005d12:	d028      	beq.n	8005d66 <__d2b+0x86>
 8005d14:	4668      	mov	r0, sp
 8005d16:	9600      	str	r6, [sp, #0]
 8005d18:	f7ff fd82 	bl	8005820 <__lo0bits>
 8005d1c:	9900      	ldr	r1, [sp, #0]
 8005d1e:	b300      	cbz	r0, 8005d62 <__d2b+0x82>
 8005d20:	9a01      	ldr	r2, [sp, #4]
 8005d22:	f1c0 0320 	rsb	r3, r0, #32
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	430b      	orrs	r3, r1
 8005d2c:	40c2      	lsrs	r2, r0
 8005d2e:	6163      	str	r3, [r4, #20]
 8005d30:	9201      	str	r2, [sp, #4]
 8005d32:	9b01      	ldr	r3, [sp, #4]
 8005d34:	61a3      	str	r3, [r4, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bf14      	ite	ne
 8005d3a:	2202      	movne	r2, #2
 8005d3c:	2201      	moveq	r2, #1
 8005d3e:	6122      	str	r2, [r4, #16]
 8005d40:	b1d5      	cbz	r5, 8005d78 <__d2b+0x98>
 8005d42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d46:	4405      	add	r5, r0
 8005d48:	f8c9 5000 	str.w	r5, [r9]
 8005d4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d50:	f8c8 0000 	str.w	r0, [r8]
 8005d54:	4620      	mov	r0, r4
 8005d56:	b003      	add	sp, #12
 8005d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d60:	e7d5      	b.n	8005d0e <__d2b+0x2e>
 8005d62:	6161      	str	r1, [r4, #20]
 8005d64:	e7e5      	b.n	8005d32 <__d2b+0x52>
 8005d66:	a801      	add	r0, sp, #4
 8005d68:	f7ff fd5a 	bl	8005820 <__lo0bits>
 8005d6c:	9b01      	ldr	r3, [sp, #4]
 8005d6e:	6163      	str	r3, [r4, #20]
 8005d70:	2201      	movs	r2, #1
 8005d72:	6122      	str	r2, [r4, #16]
 8005d74:	3020      	adds	r0, #32
 8005d76:	e7e3      	b.n	8005d40 <__d2b+0x60>
 8005d78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d80:	f8c9 0000 	str.w	r0, [r9]
 8005d84:	6918      	ldr	r0, [r3, #16]
 8005d86:	f7ff fd2b 	bl	80057e0 <__hi0bits>
 8005d8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005d8e:	e7df      	b.n	8005d50 <__d2b+0x70>
 8005d90:	08006f47 	.word	0x08006f47
 8005d94:	08006f58 	.word	0x08006f58

08005d98 <_calloc_r>:
 8005d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d9a:	fba1 2402 	umull	r2, r4, r1, r2
 8005d9e:	b94c      	cbnz	r4, 8005db4 <_calloc_r+0x1c>
 8005da0:	4611      	mov	r1, r2
 8005da2:	9201      	str	r2, [sp, #4]
 8005da4:	f000 f87a 	bl	8005e9c <_malloc_r>
 8005da8:	9a01      	ldr	r2, [sp, #4]
 8005daa:	4605      	mov	r5, r0
 8005dac:	b930      	cbnz	r0, 8005dbc <_calloc_r+0x24>
 8005dae:	4628      	mov	r0, r5
 8005db0:	b003      	add	sp, #12
 8005db2:	bd30      	pop	{r4, r5, pc}
 8005db4:	220c      	movs	r2, #12
 8005db6:	6002      	str	r2, [r0, #0]
 8005db8:	2500      	movs	r5, #0
 8005dba:	e7f8      	b.n	8005dae <_calloc_r+0x16>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	f7fe f93f 	bl	8004040 <memset>
 8005dc2:	e7f4      	b.n	8005dae <_calloc_r+0x16>

08005dc4 <_free_r>:
 8005dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dc6:	2900      	cmp	r1, #0
 8005dc8:	d044      	beq.n	8005e54 <_free_r+0x90>
 8005dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dce:	9001      	str	r0, [sp, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005dd6:	bfb8      	it	lt
 8005dd8:	18e4      	addlt	r4, r4, r3
 8005dda:	f000 fa9b 	bl	8006314 <__malloc_lock>
 8005dde:	4a1e      	ldr	r2, [pc, #120]	; (8005e58 <_free_r+0x94>)
 8005de0:	9801      	ldr	r0, [sp, #4]
 8005de2:	6813      	ldr	r3, [r2, #0]
 8005de4:	b933      	cbnz	r3, 8005df4 <_free_r+0x30>
 8005de6:	6063      	str	r3, [r4, #4]
 8005de8:	6014      	str	r4, [r2, #0]
 8005dea:	b003      	add	sp, #12
 8005dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005df0:	f000 ba96 	b.w	8006320 <__malloc_unlock>
 8005df4:	42a3      	cmp	r3, r4
 8005df6:	d908      	bls.n	8005e0a <_free_r+0x46>
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	1961      	adds	r1, r4, r5
 8005dfc:	428b      	cmp	r3, r1
 8005dfe:	bf01      	itttt	eq
 8005e00:	6819      	ldreq	r1, [r3, #0]
 8005e02:	685b      	ldreq	r3, [r3, #4]
 8005e04:	1949      	addeq	r1, r1, r5
 8005e06:	6021      	streq	r1, [r4, #0]
 8005e08:	e7ed      	b.n	8005de6 <_free_r+0x22>
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	b10b      	cbz	r3, 8005e14 <_free_r+0x50>
 8005e10:	42a3      	cmp	r3, r4
 8005e12:	d9fa      	bls.n	8005e0a <_free_r+0x46>
 8005e14:	6811      	ldr	r1, [r2, #0]
 8005e16:	1855      	adds	r5, r2, r1
 8005e18:	42a5      	cmp	r5, r4
 8005e1a:	d10b      	bne.n	8005e34 <_free_r+0x70>
 8005e1c:	6824      	ldr	r4, [r4, #0]
 8005e1e:	4421      	add	r1, r4
 8005e20:	1854      	adds	r4, r2, r1
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	6011      	str	r1, [r2, #0]
 8005e26:	d1e0      	bne.n	8005dea <_free_r+0x26>
 8005e28:	681c      	ldr	r4, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	6053      	str	r3, [r2, #4]
 8005e2e:	4421      	add	r1, r4
 8005e30:	6011      	str	r1, [r2, #0]
 8005e32:	e7da      	b.n	8005dea <_free_r+0x26>
 8005e34:	d902      	bls.n	8005e3c <_free_r+0x78>
 8005e36:	230c      	movs	r3, #12
 8005e38:	6003      	str	r3, [r0, #0]
 8005e3a:	e7d6      	b.n	8005dea <_free_r+0x26>
 8005e3c:	6825      	ldr	r5, [r4, #0]
 8005e3e:	1961      	adds	r1, r4, r5
 8005e40:	428b      	cmp	r3, r1
 8005e42:	bf04      	itt	eq
 8005e44:	6819      	ldreq	r1, [r3, #0]
 8005e46:	685b      	ldreq	r3, [r3, #4]
 8005e48:	6063      	str	r3, [r4, #4]
 8005e4a:	bf04      	itt	eq
 8005e4c:	1949      	addeq	r1, r1, r5
 8005e4e:	6021      	streq	r1, [r4, #0]
 8005e50:	6054      	str	r4, [r2, #4]
 8005e52:	e7ca      	b.n	8005dea <_free_r+0x26>
 8005e54:	b003      	add	sp, #12
 8005e56:	bd30      	pop	{r4, r5, pc}
 8005e58:	200002b8 	.word	0x200002b8

08005e5c <sbrk_aligned>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	4e0e      	ldr	r6, [pc, #56]	; (8005e98 <sbrk_aligned+0x3c>)
 8005e60:	460c      	mov	r4, r1
 8005e62:	6831      	ldr	r1, [r6, #0]
 8005e64:	4605      	mov	r5, r0
 8005e66:	b911      	cbnz	r1, 8005e6e <sbrk_aligned+0x12>
 8005e68:	f000 f9e8 	bl	800623c <_sbrk_r>
 8005e6c:	6030      	str	r0, [r6, #0]
 8005e6e:	4621      	mov	r1, r4
 8005e70:	4628      	mov	r0, r5
 8005e72:	f000 f9e3 	bl	800623c <_sbrk_r>
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	d00a      	beq.n	8005e90 <sbrk_aligned+0x34>
 8005e7a:	1cc4      	adds	r4, r0, #3
 8005e7c:	f024 0403 	bic.w	r4, r4, #3
 8005e80:	42a0      	cmp	r0, r4
 8005e82:	d007      	beq.n	8005e94 <sbrk_aligned+0x38>
 8005e84:	1a21      	subs	r1, r4, r0
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 f9d8 	bl	800623c <_sbrk_r>
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d101      	bne.n	8005e94 <sbrk_aligned+0x38>
 8005e90:	f04f 34ff 	mov.w	r4, #4294967295
 8005e94:	4620      	mov	r0, r4
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	200002bc 	.word	0x200002bc

08005e9c <_malloc_r>:
 8005e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea0:	1ccd      	adds	r5, r1, #3
 8005ea2:	f025 0503 	bic.w	r5, r5, #3
 8005ea6:	3508      	adds	r5, #8
 8005ea8:	2d0c      	cmp	r5, #12
 8005eaa:	bf38      	it	cc
 8005eac:	250c      	movcc	r5, #12
 8005eae:	2d00      	cmp	r5, #0
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	db01      	blt.n	8005eb8 <_malloc_r+0x1c>
 8005eb4:	42a9      	cmp	r1, r5
 8005eb6:	d905      	bls.n	8005ec4 <_malloc_r+0x28>
 8005eb8:	230c      	movs	r3, #12
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	2600      	movs	r6, #0
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec4:	4e2e      	ldr	r6, [pc, #184]	; (8005f80 <_malloc_r+0xe4>)
 8005ec6:	f000 fa25 	bl	8006314 <__malloc_lock>
 8005eca:	6833      	ldr	r3, [r6, #0]
 8005ecc:	461c      	mov	r4, r3
 8005ece:	bb34      	cbnz	r4, 8005f1e <_malloc_r+0x82>
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	f7ff ffc2 	bl	8005e5c <sbrk_aligned>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	4604      	mov	r4, r0
 8005edc:	d14d      	bne.n	8005f7a <_malloc_r+0xde>
 8005ede:	6834      	ldr	r4, [r6, #0]
 8005ee0:	4626      	mov	r6, r4
 8005ee2:	2e00      	cmp	r6, #0
 8005ee4:	d140      	bne.n	8005f68 <_malloc_r+0xcc>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4638      	mov	r0, r7
 8005eec:	eb04 0803 	add.w	r8, r4, r3
 8005ef0:	f000 f9a4 	bl	800623c <_sbrk_r>
 8005ef4:	4580      	cmp	r8, r0
 8005ef6:	d13a      	bne.n	8005f6e <_malloc_r+0xd2>
 8005ef8:	6821      	ldr	r1, [r4, #0]
 8005efa:	3503      	adds	r5, #3
 8005efc:	1a6d      	subs	r5, r5, r1
 8005efe:	f025 0503 	bic.w	r5, r5, #3
 8005f02:	3508      	adds	r5, #8
 8005f04:	2d0c      	cmp	r5, #12
 8005f06:	bf38      	it	cc
 8005f08:	250c      	movcc	r5, #12
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f7ff ffa5 	bl	8005e5c <sbrk_aligned>
 8005f12:	3001      	adds	r0, #1
 8005f14:	d02b      	beq.n	8005f6e <_malloc_r+0xd2>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	442b      	add	r3, r5
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	e00e      	b.n	8005f3c <_malloc_r+0xa0>
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	1b52      	subs	r2, r2, r5
 8005f22:	d41e      	bmi.n	8005f62 <_malloc_r+0xc6>
 8005f24:	2a0b      	cmp	r2, #11
 8005f26:	d916      	bls.n	8005f56 <_malloc_r+0xba>
 8005f28:	1961      	adds	r1, r4, r5
 8005f2a:	42a3      	cmp	r3, r4
 8005f2c:	6025      	str	r5, [r4, #0]
 8005f2e:	bf18      	it	ne
 8005f30:	6059      	strne	r1, [r3, #4]
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	bf08      	it	eq
 8005f36:	6031      	streq	r1, [r6, #0]
 8005f38:	5162      	str	r2, [r4, r5]
 8005f3a:	604b      	str	r3, [r1, #4]
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	f104 060b 	add.w	r6, r4, #11
 8005f42:	f000 f9ed 	bl	8006320 <__malloc_unlock>
 8005f46:	f026 0607 	bic.w	r6, r6, #7
 8005f4a:	1d23      	adds	r3, r4, #4
 8005f4c:	1af2      	subs	r2, r6, r3
 8005f4e:	d0b6      	beq.n	8005ebe <_malloc_r+0x22>
 8005f50:	1b9b      	subs	r3, r3, r6
 8005f52:	50a3      	str	r3, [r4, r2]
 8005f54:	e7b3      	b.n	8005ebe <_malloc_r+0x22>
 8005f56:	6862      	ldr	r2, [r4, #4]
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	bf0c      	ite	eq
 8005f5c:	6032      	streq	r2, [r6, #0]
 8005f5e:	605a      	strne	r2, [r3, #4]
 8005f60:	e7ec      	b.n	8005f3c <_malloc_r+0xa0>
 8005f62:	4623      	mov	r3, r4
 8005f64:	6864      	ldr	r4, [r4, #4]
 8005f66:	e7b2      	b.n	8005ece <_malloc_r+0x32>
 8005f68:	4634      	mov	r4, r6
 8005f6a:	6876      	ldr	r6, [r6, #4]
 8005f6c:	e7b9      	b.n	8005ee2 <_malloc_r+0x46>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4638      	mov	r0, r7
 8005f74:	f000 f9d4 	bl	8006320 <__malloc_unlock>
 8005f78:	e7a1      	b.n	8005ebe <_malloc_r+0x22>
 8005f7a:	6025      	str	r5, [r4, #0]
 8005f7c:	e7de      	b.n	8005f3c <_malloc_r+0xa0>
 8005f7e:	bf00      	nop
 8005f80:	200002b8 	.word	0x200002b8

08005f84 <__ssputs_r>:
 8005f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	688e      	ldr	r6, [r1, #8]
 8005f8a:	429e      	cmp	r6, r3
 8005f8c:	4682      	mov	sl, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	4690      	mov	r8, r2
 8005f92:	461f      	mov	r7, r3
 8005f94:	d838      	bhi.n	8006008 <__ssputs_r+0x84>
 8005f96:	898a      	ldrh	r2, [r1, #12]
 8005f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f9c:	d032      	beq.n	8006004 <__ssputs_r+0x80>
 8005f9e:	6825      	ldr	r5, [r4, #0]
 8005fa0:	6909      	ldr	r1, [r1, #16]
 8005fa2:	eba5 0901 	sub.w	r9, r5, r1
 8005fa6:	6965      	ldr	r5, [r4, #20]
 8005fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	444b      	add	r3, r9
 8005fb4:	106d      	asrs	r5, r5, #1
 8005fb6:	429d      	cmp	r5, r3
 8005fb8:	bf38      	it	cc
 8005fba:	461d      	movcc	r5, r3
 8005fbc:	0553      	lsls	r3, r2, #21
 8005fbe:	d531      	bpl.n	8006024 <__ssputs_r+0xa0>
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	f7ff ff6b 	bl	8005e9c <_malloc_r>
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	b950      	cbnz	r0, 8005fe0 <__ssputs_r+0x5c>
 8005fca:	230c      	movs	r3, #12
 8005fcc:	f8ca 3000 	str.w	r3, [sl]
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd6:	81a3      	strh	r3, [r4, #12]
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe0:	6921      	ldr	r1, [r4, #16]
 8005fe2:	464a      	mov	r2, r9
 8005fe4:	f7ff fb46 	bl	8005674 <memcpy>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	6126      	str	r6, [r4, #16]
 8005ff6:	6165      	str	r5, [r4, #20]
 8005ff8:	444e      	add	r6, r9
 8005ffa:	eba5 0509 	sub.w	r5, r5, r9
 8005ffe:	6026      	str	r6, [r4, #0]
 8006000:	60a5      	str	r5, [r4, #8]
 8006002:	463e      	mov	r6, r7
 8006004:	42be      	cmp	r6, r7
 8006006:	d900      	bls.n	800600a <__ssputs_r+0x86>
 8006008:	463e      	mov	r6, r7
 800600a:	6820      	ldr	r0, [r4, #0]
 800600c:	4632      	mov	r2, r6
 800600e:	4641      	mov	r1, r8
 8006010:	f000 f966 	bl	80062e0 <memmove>
 8006014:	68a3      	ldr	r3, [r4, #8]
 8006016:	1b9b      	subs	r3, r3, r6
 8006018:	60a3      	str	r3, [r4, #8]
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	4433      	add	r3, r6
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	2000      	movs	r0, #0
 8006022:	e7db      	b.n	8005fdc <__ssputs_r+0x58>
 8006024:	462a      	mov	r2, r5
 8006026:	f000 f981 	bl	800632c <_realloc_r>
 800602a:	4606      	mov	r6, r0
 800602c:	2800      	cmp	r0, #0
 800602e:	d1e1      	bne.n	8005ff4 <__ssputs_r+0x70>
 8006030:	6921      	ldr	r1, [r4, #16]
 8006032:	4650      	mov	r0, sl
 8006034:	f7ff fec6 	bl	8005dc4 <_free_r>
 8006038:	e7c7      	b.n	8005fca <__ssputs_r+0x46>
	...

0800603c <_svfiprintf_r>:
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	4698      	mov	r8, r3
 8006042:	898b      	ldrh	r3, [r1, #12]
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	b09d      	sub	sp, #116	; 0x74
 8006048:	4607      	mov	r7, r0
 800604a:	460d      	mov	r5, r1
 800604c:	4614      	mov	r4, r2
 800604e:	d50e      	bpl.n	800606e <_svfiprintf_r+0x32>
 8006050:	690b      	ldr	r3, [r1, #16]
 8006052:	b963      	cbnz	r3, 800606e <_svfiprintf_r+0x32>
 8006054:	2140      	movs	r1, #64	; 0x40
 8006056:	f7ff ff21 	bl	8005e9c <_malloc_r>
 800605a:	6028      	str	r0, [r5, #0]
 800605c:	6128      	str	r0, [r5, #16]
 800605e:	b920      	cbnz	r0, 800606a <_svfiprintf_r+0x2e>
 8006060:	230c      	movs	r3, #12
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	e0d1      	b.n	800620e <_svfiprintf_r+0x1d2>
 800606a:	2340      	movs	r3, #64	; 0x40
 800606c:	616b      	str	r3, [r5, #20]
 800606e:	2300      	movs	r3, #0
 8006070:	9309      	str	r3, [sp, #36]	; 0x24
 8006072:	2320      	movs	r3, #32
 8006074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006078:	f8cd 800c 	str.w	r8, [sp, #12]
 800607c:	2330      	movs	r3, #48	; 0x30
 800607e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006228 <_svfiprintf_r+0x1ec>
 8006082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006086:	f04f 0901 	mov.w	r9, #1
 800608a:	4623      	mov	r3, r4
 800608c:	469a      	mov	sl, r3
 800608e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006092:	b10a      	cbz	r2, 8006098 <_svfiprintf_r+0x5c>
 8006094:	2a25      	cmp	r2, #37	; 0x25
 8006096:	d1f9      	bne.n	800608c <_svfiprintf_r+0x50>
 8006098:	ebba 0b04 	subs.w	fp, sl, r4
 800609c:	d00b      	beq.n	80060b6 <_svfiprintf_r+0x7a>
 800609e:	465b      	mov	r3, fp
 80060a0:	4622      	mov	r2, r4
 80060a2:	4629      	mov	r1, r5
 80060a4:	4638      	mov	r0, r7
 80060a6:	f7ff ff6d 	bl	8005f84 <__ssputs_r>
 80060aa:	3001      	adds	r0, #1
 80060ac:	f000 80aa 	beq.w	8006204 <_svfiprintf_r+0x1c8>
 80060b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060b2:	445a      	add	r2, fp
 80060b4:	9209      	str	r2, [sp, #36]	; 0x24
 80060b6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80a2 	beq.w	8006204 <_svfiprintf_r+0x1c8>
 80060c0:	2300      	movs	r3, #0
 80060c2:	f04f 32ff 	mov.w	r2, #4294967295
 80060c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060ca:	f10a 0a01 	add.w	sl, sl, #1
 80060ce:	9304      	str	r3, [sp, #16]
 80060d0:	9307      	str	r3, [sp, #28]
 80060d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060d6:	931a      	str	r3, [sp, #104]	; 0x68
 80060d8:	4654      	mov	r4, sl
 80060da:	2205      	movs	r2, #5
 80060dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e0:	4851      	ldr	r0, [pc, #324]	; (8006228 <_svfiprintf_r+0x1ec>)
 80060e2:	f7fa f885 	bl	80001f0 <memchr>
 80060e6:	9a04      	ldr	r2, [sp, #16]
 80060e8:	b9d8      	cbnz	r0, 8006122 <_svfiprintf_r+0xe6>
 80060ea:	06d0      	lsls	r0, r2, #27
 80060ec:	bf44      	itt	mi
 80060ee:	2320      	movmi	r3, #32
 80060f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060f4:	0711      	lsls	r1, r2, #28
 80060f6:	bf44      	itt	mi
 80060f8:	232b      	movmi	r3, #43	; 0x2b
 80060fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006102:	2b2a      	cmp	r3, #42	; 0x2a
 8006104:	d015      	beq.n	8006132 <_svfiprintf_r+0xf6>
 8006106:	9a07      	ldr	r2, [sp, #28]
 8006108:	4654      	mov	r4, sl
 800610a:	2000      	movs	r0, #0
 800610c:	f04f 0c0a 	mov.w	ip, #10
 8006110:	4621      	mov	r1, r4
 8006112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006116:	3b30      	subs	r3, #48	; 0x30
 8006118:	2b09      	cmp	r3, #9
 800611a:	d94e      	bls.n	80061ba <_svfiprintf_r+0x17e>
 800611c:	b1b0      	cbz	r0, 800614c <_svfiprintf_r+0x110>
 800611e:	9207      	str	r2, [sp, #28]
 8006120:	e014      	b.n	800614c <_svfiprintf_r+0x110>
 8006122:	eba0 0308 	sub.w	r3, r0, r8
 8006126:	fa09 f303 	lsl.w	r3, r9, r3
 800612a:	4313      	orrs	r3, r2
 800612c:	9304      	str	r3, [sp, #16]
 800612e:	46a2      	mov	sl, r4
 8006130:	e7d2      	b.n	80060d8 <_svfiprintf_r+0x9c>
 8006132:	9b03      	ldr	r3, [sp, #12]
 8006134:	1d19      	adds	r1, r3, #4
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	9103      	str	r1, [sp, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	bfbb      	ittet	lt
 800613e:	425b      	neglt	r3, r3
 8006140:	f042 0202 	orrlt.w	r2, r2, #2
 8006144:	9307      	strge	r3, [sp, #28]
 8006146:	9307      	strlt	r3, [sp, #28]
 8006148:	bfb8      	it	lt
 800614a:	9204      	strlt	r2, [sp, #16]
 800614c:	7823      	ldrb	r3, [r4, #0]
 800614e:	2b2e      	cmp	r3, #46	; 0x2e
 8006150:	d10c      	bne.n	800616c <_svfiprintf_r+0x130>
 8006152:	7863      	ldrb	r3, [r4, #1]
 8006154:	2b2a      	cmp	r3, #42	; 0x2a
 8006156:	d135      	bne.n	80061c4 <_svfiprintf_r+0x188>
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	1d1a      	adds	r2, r3, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	9203      	str	r2, [sp, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	bfb8      	it	lt
 8006164:	f04f 33ff 	movlt.w	r3, #4294967295
 8006168:	3402      	adds	r4, #2
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006238 <_svfiprintf_r+0x1fc>
 8006170:	7821      	ldrb	r1, [r4, #0]
 8006172:	2203      	movs	r2, #3
 8006174:	4650      	mov	r0, sl
 8006176:	f7fa f83b 	bl	80001f0 <memchr>
 800617a:	b140      	cbz	r0, 800618e <_svfiprintf_r+0x152>
 800617c:	2340      	movs	r3, #64	; 0x40
 800617e:	eba0 000a 	sub.w	r0, r0, sl
 8006182:	fa03 f000 	lsl.w	r0, r3, r0
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	4303      	orrs	r3, r0
 800618a:	3401      	adds	r4, #1
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006192:	4826      	ldr	r0, [pc, #152]	; (800622c <_svfiprintf_r+0x1f0>)
 8006194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006198:	2206      	movs	r2, #6
 800619a:	f7fa f829 	bl	80001f0 <memchr>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d038      	beq.n	8006214 <_svfiprintf_r+0x1d8>
 80061a2:	4b23      	ldr	r3, [pc, #140]	; (8006230 <_svfiprintf_r+0x1f4>)
 80061a4:	bb1b      	cbnz	r3, 80061ee <_svfiprintf_r+0x1b2>
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	3307      	adds	r3, #7
 80061aa:	f023 0307 	bic.w	r3, r3, #7
 80061ae:	3308      	adds	r3, #8
 80061b0:	9303      	str	r3, [sp, #12]
 80061b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b4:	4433      	add	r3, r6
 80061b6:	9309      	str	r3, [sp, #36]	; 0x24
 80061b8:	e767      	b.n	800608a <_svfiprintf_r+0x4e>
 80061ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80061be:	460c      	mov	r4, r1
 80061c0:	2001      	movs	r0, #1
 80061c2:	e7a5      	b.n	8006110 <_svfiprintf_r+0xd4>
 80061c4:	2300      	movs	r3, #0
 80061c6:	3401      	adds	r4, #1
 80061c8:	9305      	str	r3, [sp, #20]
 80061ca:	4619      	mov	r1, r3
 80061cc:	f04f 0c0a 	mov.w	ip, #10
 80061d0:	4620      	mov	r0, r4
 80061d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061d6:	3a30      	subs	r2, #48	; 0x30
 80061d8:	2a09      	cmp	r2, #9
 80061da:	d903      	bls.n	80061e4 <_svfiprintf_r+0x1a8>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0c5      	beq.n	800616c <_svfiprintf_r+0x130>
 80061e0:	9105      	str	r1, [sp, #20]
 80061e2:	e7c3      	b.n	800616c <_svfiprintf_r+0x130>
 80061e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061e8:	4604      	mov	r4, r0
 80061ea:	2301      	movs	r3, #1
 80061ec:	e7f0      	b.n	80061d0 <_svfiprintf_r+0x194>
 80061ee:	ab03      	add	r3, sp, #12
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	462a      	mov	r2, r5
 80061f4:	4b0f      	ldr	r3, [pc, #60]	; (8006234 <_svfiprintf_r+0x1f8>)
 80061f6:	a904      	add	r1, sp, #16
 80061f8:	4638      	mov	r0, r7
 80061fa:	f7fd ffc9 	bl	8004190 <_printf_float>
 80061fe:	1c42      	adds	r2, r0, #1
 8006200:	4606      	mov	r6, r0
 8006202:	d1d6      	bne.n	80061b2 <_svfiprintf_r+0x176>
 8006204:	89ab      	ldrh	r3, [r5, #12]
 8006206:	065b      	lsls	r3, r3, #25
 8006208:	f53f af2c 	bmi.w	8006064 <_svfiprintf_r+0x28>
 800620c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800620e:	b01d      	add	sp, #116	; 0x74
 8006210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006214:	ab03      	add	r3, sp, #12
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	462a      	mov	r2, r5
 800621a:	4b06      	ldr	r3, [pc, #24]	; (8006234 <_svfiprintf_r+0x1f8>)
 800621c:	a904      	add	r1, sp, #16
 800621e:	4638      	mov	r0, r7
 8006220:	f7fe fa5a 	bl	80046d8 <_printf_i>
 8006224:	e7eb      	b.n	80061fe <_svfiprintf_r+0x1c2>
 8006226:	bf00      	nop
 8006228:	080070b4 	.word	0x080070b4
 800622c:	080070be 	.word	0x080070be
 8006230:	08004191 	.word	0x08004191
 8006234:	08005f85 	.word	0x08005f85
 8006238:	080070ba 	.word	0x080070ba

0800623c <_sbrk_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4d06      	ldr	r5, [pc, #24]	; (8006258 <_sbrk_r+0x1c>)
 8006240:	2300      	movs	r3, #0
 8006242:	4604      	mov	r4, r0
 8006244:	4608      	mov	r0, r1
 8006246:	602b      	str	r3, [r5, #0]
 8006248:	f7fb f9da 	bl	8001600 <_sbrk>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d102      	bne.n	8006256 <_sbrk_r+0x1a>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	b103      	cbz	r3, 8006256 <_sbrk_r+0x1a>
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	bd38      	pop	{r3, r4, r5, pc}
 8006258:	200002c0 	.word	0x200002c0

0800625c <__assert_func>:
 800625c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800625e:	4614      	mov	r4, r2
 8006260:	461a      	mov	r2, r3
 8006262:	4b09      	ldr	r3, [pc, #36]	; (8006288 <__assert_func+0x2c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4605      	mov	r5, r0
 8006268:	68d8      	ldr	r0, [r3, #12]
 800626a:	b14c      	cbz	r4, 8006280 <__assert_func+0x24>
 800626c:	4b07      	ldr	r3, [pc, #28]	; (800628c <__assert_func+0x30>)
 800626e:	9100      	str	r1, [sp, #0]
 8006270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006274:	4906      	ldr	r1, [pc, #24]	; (8006290 <__assert_func+0x34>)
 8006276:	462b      	mov	r3, r5
 8006278:	f000 f80e 	bl	8006298 <fiprintf>
 800627c:	f000 faac 	bl	80067d8 <abort>
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <__assert_func+0x38>)
 8006282:	461c      	mov	r4, r3
 8006284:	e7f3      	b.n	800626e <__assert_func+0x12>
 8006286:	bf00      	nop
 8006288:	20000010 	.word	0x20000010
 800628c:	080070c5 	.word	0x080070c5
 8006290:	080070d2 	.word	0x080070d2
 8006294:	08007100 	.word	0x08007100

08006298 <fiprintf>:
 8006298:	b40e      	push	{r1, r2, r3}
 800629a:	b503      	push	{r0, r1, lr}
 800629c:	4601      	mov	r1, r0
 800629e:	ab03      	add	r3, sp, #12
 80062a0:	4805      	ldr	r0, [pc, #20]	; (80062b8 <fiprintf+0x20>)
 80062a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a6:	6800      	ldr	r0, [r0, #0]
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	f000 f897 	bl	80063dc <_vfiprintf_r>
 80062ae:	b002      	add	sp, #8
 80062b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b4:	b003      	add	sp, #12
 80062b6:	4770      	bx	lr
 80062b8:	20000010 	.word	0x20000010

080062bc <__ascii_mbtowc>:
 80062bc:	b082      	sub	sp, #8
 80062be:	b901      	cbnz	r1, 80062c2 <__ascii_mbtowc+0x6>
 80062c0:	a901      	add	r1, sp, #4
 80062c2:	b142      	cbz	r2, 80062d6 <__ascii_mbtowc+0x1a>
 80062c4:	b14b      	cbz	r3, 80062da <__ascii_mbtowc+0x1e>
 80062c6:	7813      	ldrb	r3, [r2, #0]
 80062c8:	600b      	str	r3, [r1, #0]
 80062ca:	7812      	ldrb	r2, [r2, #0]
 80062cc:	1e10      	subs	r0, r2, #0
 80062ce:	bf18      	it	ne
 80062d0:	2001      	movne	r0, #1
 80062d2:	b002      	add	sp, #8
 80062d4:	4770      	bx	lr
 80062d6:	4610      	mov	r0, r2
 80062d8:	e7fb      	b.n	80062d2 <__ascii_mbtowc+0x16>
 80062da:	f06f 0001 	mvn.w	r0, #1
 80062de:	e7f8      	b.n	80062d2 <__ascii_mbtowc+0x16>

080062e0 <memmove>:
 80062e0:	4288      	cmp	r0, r1
 80062e2:	b510      	push	{r4, lr}
 80062e4:	eb01 0402 	add.w	r4, r1, r2
 80062e8:	d902      	bls.n	80062f0 <memmove+0x10>
 80062ea:	4284      	cmp	r4, r0
 80062ec:	4623      	mov	r3, r4
 80062ee:	d807      	bhi.n	8006300 <memmove+0x20>
 80062f0:	1e43      	subs	r3, r0, #1
 80062f2:	42a1      	cmp	r1, r4
 80062f4:	d008      	beq.n	8006308 <memmove+0x28>
 80062f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062fe:	e7f8      	b.n	80062f2 <memmove+0x12>
 8006300:	4402      	add	r2, r0
 8006302:	4601      	mov	r1, r0
 8006304:	428a      	cmp	r2, r1
 8006306:	d100      	bne.n	800630a <memmove+0x2a>
 8006308:	bd10      	pop	{r4, pc}
 800630a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800630e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006312:	e7f7      	b.n	8006304 <memmove+0x24>

08006314 <__malloc_lock>:
 8006314:	4801      	ldr	r0, [pc, #4]	; (800631c <__malloc_lock+0x8>)
 8006316:	f000 bc1f 	b.w	8006b58 <__retarget_lock_acquire_recursive>
 800631a:	bf00      	nop
 800631c:	200002c4 	.word	0x200002c4

08006320 <__malloc_unlock>:
 8006320:	4801      	ldr	r0, [pc, #4]	; (8006328 <__malloc_unlock+0x8>)
 8006322:	f000 bc1a 	b.w	8006b5a <__retarget_lock_release_recursive>
 8006326:	bf00      	nop
 8006328:	200002c4 	.word	0x200002c4

0800632c <_realloc_r>:
 800632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006330:	4680      	mov	r8, r0
 8006332:	4614      	mov	r4, r2
 8006334:	460e      	mov	r6, r1
 8006336:	b921      	cbnz	r1, 8006342 <_realloc_r+0x16>
 8006338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800633c:	4611      	mov	r1, r2
 800633e:	f7ff bdad 	b.w	8005e9c <_malloc_r>
 8006342:	b92a      	cbnz	r2, 8006350 <_realloc_r+0x24>
 8006344:	f7ff fd3e 	bl	8005dc4 <_free_r>
 8006348:	4625      	mov	r5, r4
 800634a:	4628      	mov	r0, r5
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006350:	f000 fc6a 	bl	8006c28 <_malloc_usable_size_r>
 8006354:	4284      	cmp	r4, r0
 8006356:	4607      	mov	r7, r0
 8006358:	d802      	bhi.n	8006360 <_realloc_r+0x34>
 800635a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800635e:	d812      	bhi.n	8006386 <_realloc_r+0x5a>
 8006360:	4621      	mov	r1, r4
 8006362:	4640      	mov	r0, r8
 8006364:	f7ff fd9a 	bl	8005e9c <_malloc_r>
 8006368:	4605      	mov	r5, r0
 800636a:	2800      	cmp	r0, #0
 800636c:	d0ed      	beq.n	800634a <_realloc_r+0x1e>
 800636e:	42bc      	cmp	r4, r7
 8006370:	4622      	mov	r2, r4
 8006372:	4631      	mov	r1, r6
 8006374:	bf28      	it	cs
 8006376:	463a      	movcs	r2, r7
 8006378:	f7ff f97c 	bl	8005674 <memcpy>
 800637c:	4631      	mov	r1, r6
 800637e:	4640      	mov	r0, r8
 8006380:	f7ff fd20 	bl	8005dc4 <_free_r>
 8006384:	e7e1      	b.n	800634a <_realloc_r+0x1e>
 8006386:	4635      	mov	r5, r6
 8006388:	e7df      	b.n	800634a <_realloc_r+0x1e>

0800638a <__sfputc_r>:
 800638a:	6893      	ldr	r3, [r2, #8]
 800638c:	3b01      	subs	r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	b410      	push	{r4}
 8006392:	6093      	str	r3, [r2, #8]
 8006394:	da08      	bge.n	80063a8 <__sfputc_r+0x1e>
 8006396:	6994      	ldr	r4, [r2, #24]
 8006398:	42a3      	cmp	r3, r4
 800639a:	db01      	blt.n	80063a0 <__sfputc_r+0x16>
 800639c:	290a      	cmp	r1, #10
 800639e:	d103      	bne.n	80063a8 <__sfputc_r+0x1e>
 80063a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063a4:	f000 b94a 	b.w	800663c <__swbuf_r>
 80063a8:	6813      	ldr	r3, [r2, #0]
 80063aa:	1c58      	adds	r0, r3, #1
 80063ac:	6010      	str	r0, [r2, #0]
 80063ae:	7019      	strb	r1, [r3, #0]
 80063b0:	4608      	mov	r0, r1
 80063b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <__sfputs_r>:
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	4606      	mov	r6, r0
 80063bc:	460f      	mov	r7, r1
 80063be:	4614      	mov	r4, r2
 80063c0:	18d5      	adds	r5, r2, r3
 80063c2:	42ac      	cmp	r4, r5
 80063c4:	d101      	bne.n	80063ca <__sfputs_r+0x12>
 80063c6:	2000      	movs	r0, #0
 80063c8:	e007      	b.n	80063da <__sfputs_r+0x22>
 80063ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ce:	463a      	mov	r2, r7
 80063d0:	4630      	mov	r0, r6
 80063d2:	f7ff ffda 	bl	800638a <__sfputc_r>
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	d1f3      	bne.n	80063c2 <__sfputs_r+0xa>
 80063da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080063dc <_vfiprintf_r>:
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	460d      	mov	r5, r1
 80063e2:	b09d      	sub	sp, #116	; 0x74
 80063e4:	4614      	mov	r4, r2
 80063e6:	4698      	mov	r8, r3
 80063e8:	4606      	mov	r6, r0
 80063ea:	b118      	cbz	r0, 80063f4 <_vfiprintf_r+0x18>
 80063ec:	6983      	ldr	r3, [r0, #24]
 80063ee:	b90b      	cbnz	r3, 80063f4 <_vfiprintf_r+0x18>
 80063f0:	f000 fb14 	bl	8006a1c <__sinit>
 80063f4:	4b89      	ldr	r3, [pc, #548]	; (800661c <_vfiprintf_r+0x240>)
 80063f6:	429d      	cmp	r5, r3
 80063f8:	d11b      	bne.n	8006432 <_vfiprintf_r+0x56>
 80063fa:	6875      	ldr	r5, [r6, #4]
 80063fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063fe:	07d9      	lsls	r1, r3, #31
 8006400:	d405      	bmi.n	800640e <_vfiprintf_r+0x32>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	059a      	lsls	r2, r3, #22
 8006406:	d402      	bmi.n	800640e <_vfiprintf_r+0x32>
 8006408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800640a:	f000 fba5 	bl	8006b58 <__retarget_lock_acquire_recursive>
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	071b      	lsls	r3, r3, #28
 8006412:	d501      	bpl.n	8006418 <_vfiprintf_r+0x3c>
 8006414:	692b      	ldr	r3, [r5, #16]
 8006416:	b9eb      	cbnz	r3, 8006454 <_vfiprintf_r+0x78>
 8006418:	4629      	mov	r1, r5
 800641a:	4630      	mov	r0, r6
 800641c:	f000 f96e 	bl	80066fc <__swsetup_r>
 8006420:	b1c0      	cbz	r0, 8006454 <_vfiprintf_r+0x78>
 8006422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006424:	07dc      	lsls	r4, r3, #31
 8006426:	d50e      	bpl.n	8006446 <_vfiprintf_r+0x6a>
 8006428:	f04f 30ff 	mov.w	r0, #4294967295
 800642c:	b01d      	add	sp, #116	; 0x74
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006432:	4b7b      	ldr	r3, [pc, #492]	; (8006620 <_vfiprintf_r+0x244>)
 8006434:	429d      	cmp	r5, r3
 8006436:	d101      	bne.n	800643c <_vfiprintf_r+0x60>
 8006438:	68b5      	ldr	r5, [r6, #8]
 800643a:	e7df      	b.n	80063fc <_vfiprintf_r+0x20>
 800643c:	4b79      	ldr	r3, [pc, #484]	; (8006624 <_vfiprintf_r+0x248>)
 800643e:	429d      	cmp	r5, r3
 8006440:	bf08      	it	eq
 8006442:	68f5      	ldreq	r5, [r6, #12]
 8006444:	e7da      	b.n	80063fc <_vfiprintf_r+0x20>
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	0598      	lsls	r0, r3, #22
 800644a:	d4ed      	bmi.n	8006428 <_vfiprintf_r+0x4c>
 800644c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800644e:	f000 fb84 	bl	8006b5a <__retarget_lock_release_recursive>
 8006452:	e7e9      	b.n	8006428 <_vfiprintf_r+0x4c>
 8006454:	2300      	movs	r3, #0
 8006456:	9309      	str	r3, [sp, #36]	; 0x24
 8006458:	2320      	movs	r3, #32
 800645a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800645e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006462:	2330      	movs	r3, #48	; 0x30
 8006464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006628 <_vfiprintf_r+0x24c>
 8006468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800646c:	f04f 0901 	mov.w	r9, #1
 8006470:	4623      	mov	r3, r4
 8006472:	469a      	mov	sl, r3
 8006474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006478:	b10a      	cbz	r2, 800647e <_vfiprintf_r+0xa2>
 800647a:	2a25      	cmp	r2, #37	; 0x25
 800647c:	d1f9      	bne.n	8006472 <_vfiprintf_r+0x96>
 800647e:	ebba 0b04 	subs.w	fp, sl, r4
 8006482:	d00b      	beq.n	800649c <_vfiprintf_r+0xc0>
 8006484:	465b      	mov	r3, fp
 8006486:	4622      	mov	r2, r4
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff ff94 	bl	80063b8 <__sfputs_r>
 8006490:	3001      	adds	r0, #1
 8006492:	f000 80aa 	beq.w	80065ea <_vfiprintf_r+0x20e>
 8006496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006498:	445a      	add	r2, fp
 800649a:	9209      	str	r2, [sp, #36]	; 0x24
 800649c:	f89a 3000 	ldrb.w	r3, [sl]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a2 	beq.w	80065ea <_vfiprintf_r+0x20e>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b0:	f10a 0a01 	add.w	sl, sl, #1
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	9307      	str	r3, [sp, #28]
 80064b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064bc:	931a      	str	r3, [sp, #104]	; 0x68
 80064be:	4654      	mov	r4, sl
 80064c0:	2205      	movs	r2, #5
 80064c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c6:	4858      	ldr	r0, [pc, #352]	; (8006628 <_vfiprintf_r+0x24c>)
 80064c8:	f7f9 fe92 	bl	80001f0 <memchr>
 80064cc:	9a04      	ldr	r2, [sp, #16]
 80064ce:	b9d8      	cbnz	r0, 8006508 <_vfiprintf_r+0x12c>
 80064d0:	06d1      	lsls	r1, r2, #27
 80064d2:	bf44      	itt	mi
 80064d4:	2320      	movmi	r3, #32
 80064d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064da:	0713      	lsls	r3, r2, #28
 80064dc:	bf44      	itt	mi
 80064de:	232b      	movmi	r3, #43	; 0x2b
 80064e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e4:	f89a 3000 	ldrb.w	r3, [sl]
 80064e8:	2b2a      	cmp	r3, #42	; 0x2a
 80064ea:	d015      	beq.n	8006518 <_vfiprintf_r+0x13c>
 80064ec:	9a07      	ldr	r2, [sp, #28]
 80064ee:	4654      	mov	r4, sl
 80064f0:	2000      	movs	r0, #0
 80064f2:	f04f 0c0a 	mov.w	ip, #10
 80064f6:	4621      	mov	r1, r4
 80064f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fc:	3b30      	subs	r3, #48	; 0x30
 80064fe:	2b09      	cmp	r3, #9
 8006500:	d94e      	bls.n	80065a0 <_vfiprintf_r+0x1c4>
 8006502:	b1b0      	cbz	r0, 8006532 <_vfiprintf_r+0x156>
 8006504:	9207      	str	r2, [sp, #28]
 8006506:	e014      	b.n	8006532 <_vfiprintf_r+0x156>
 8006508:	eba0 0308 	sub.w	r3, r0, r8
 800650c:	fa09 f303 	lsl.w	r3, r9, r3
 8006510:	4313      	orrs	r3, r2
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	46a2      	mov	sl, r4
 8006516:	e7d2      	b.n	80064be <_vfiprintf_r+0xe2>
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	1d19      	adds	r1, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	9103      	str	r1, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfbb      	ittet	lt
 8006524:	425b      	neglt	r3, r3
 8006526:	f042 0202 	orrlt.w	r2, r2, #2
 800652a:	9307      	strge	r3, [sp, #28]
 800652c:	9307      	strlt	r3, [sp, #28]
 800652e:	bfb8      	it	lt
 8006530:	9204      	strlt	r2, [sp, #16]
 8006532:	7823      	ldrb	r3, [r4, #0]
 8006534:	2b2e      	cmp	r3, #46	; 0x2e
 8006536:	d10c      	bne.n	8006552 <_vfiprintf_r+0x176>
 8006538:	7863      	ldrb	r3, [r4, #1]
 800653a:	2b2a      	cmp	r3, #42	; 0x2a
 800653c:	d135      	bne.n	80065aa <_vfiprintf_r+0x1ce>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	1d1a      	adds	r2, r3, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	9203      	str	r2, [sp, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	bfb8      	it	lt
 800654a:	f04f 33ff 	movlt.w	r3, #4294967295
 800654e:	3402      	adds	r4, #2
 8006550:	9305      	str	r3, [sp, #20]
 8006552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006638 <_vfiprintf_r+0x25c>
 8006556:	7821      	ldrb	r1, [r4, #0]
 8006558:	2203      	movs	r2, #3
 800655a:	4650      	mov	r0, sl
 800655c:	f7f9 fe48 	bl	80001f0 <memchr>
 8006560:	b140      	cbz	r0, 8006574 <_vfiprintf_r+0x198>
 8006562:	2340      	movs	r3, #64	; 0x40
 8006564:	eba0 000a 	sub.w	r0, r0, sl
 8006568:	fa03 f000 	lsl.w	r0, r3, r0
 800656c:	9b04      	ldr	r3, [sp, #16]
 800656e:	4303      	orrs	r3, r0
 8006570:	3401      	adds	r4, #1
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006578:	482c      	ldr	r0, [pc, #176]	; (800662c <_vfiprintf_r+0x250>)
 800657a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800657e:	2206      	movs	r2, #6
 8006580:	f7f9 fe36 	bl	80001f0 <memchr>
 8006584:	2800      	cmp	r0, #0
 8006586:	d03f      	beq.n	8006608 <_vfiprintf_r+0x22c>
 8006588:	4b29      	ldr	r3, [pc, #164]	; (8006630 <_vfiprintf_r+0x254>)
 800658a:	bb1b      	cbnz	r3, 80065d4 <_vfiprintf_r+0x1f8>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	3307      	adds	r3, #7
 8006590:	f023 0307 	bic.w	r3, r3, #7
 8006594:	3308      	adds	r3, #8
 8006596:	9303      	str	r3, [sp, #12]
 8006598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659a:	443b      	add	r3, r7
 800659c:	9309      	str	r3, [sp, #36]	; 0x24
 800659e:	e767      	b.n	8006470 <_vfiprintf_r+0x94>
 80065a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a4:	460c      	mov	r4, r1
 80065a6:	2001      	movs	r0, #1
 80065a8:	e7a5      	b.n	80064f6 <_vfiprintf_r+0x11a>
 80065aa:	2300      	movs	r3, #0
 80065ac:	3401      	adds	r4, #1
 80065ae:	9305      	str	r3, [sp, #20]
 80065b0:	4619      	mov	r1, r3
 80065b2:	f04f 0c0a 	mov.w	ip, #10
 80065b6:	4620      	mov	r0, r4
 80065b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065bc:	3a30      	subs	r2, #48	; 0x30
 80065be:	2a09      	cmp	r2, #9
 80065c0:	d903      	bls.n	80065ca <_vfiprintf_r+0x1ee>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0c5      	beq.n	8006552 <_vfiprintf_r+0x176>
 80065c6:	9105      	str	r1, [sp, #20]
 80065c8:	e7c3      	b.n	8006552 <_vfiprintf_r+0x176>
 80065ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ce:	4604      	mov	r4, r0
 80065d0:	2301      	movs	r3, #1
 80065d2:	e7f0      	b.n	80065b6 <_vfiprintf_r+0x1da>
 80065d4:	ab03      	add	r3, sp, #12
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	462a      	mov	r2, r5
 80065da:	4b16      	ldr	r3, [pc, #88]	; (8006634 <_vfiprintf_r+0x258>)
 80065dc:	a904      	add	r1, sp, #16
 80065de:	4630      	mov	r0, r6
 80065e0:	f7fd fdd6 	bl	8004190 <_printf_float>
 80065e4:	4607      	mov	r7, r0
 80065e6:	1c78      	adds	r0, r7, #1
 80065e8:	d1d6      	bne.n	8006598 <_vfiprintf_r+0x1bc>
 80065ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ec:	07d9      	lsls	r1, r3, #31
 80065ee:	d405      	bmi.n	80065fc <_vfiprintf_r+0x220>
 80065f0:	89ab      	ldrh	r3, [r5, #12]
 80065f2:	059a      	lsls	r2, r3, #22
 80065f4:	d402      	bmi.n	80065fc <_vfiprintf_r+0x220>
 80065f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f8:	f000 faaf 	bl	8006b5a <__retarget_lock_release_recursive>
 80065fc:	89ab      	ldrh	r3, [r5, #12]
 80065fe:	065b      	lsls	r3, r3, #25
 8006600:	f53f af12 	bmi.w	8006428 <_vfiprintf_r+0x4c>
 8006604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006606:	e711      	b.n	800642c <_vfiprintf_r+0x50>
 8006608:	ab03      	add	r3, sp, #12
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	462a      	mov	r2, r5
 800660e:	4b09      	ldr	r3, [pc, #36]	; (8006634 <_vfiprintf_r+0x258>)
 8006610:	a904      	add	r1, sp, #16
 8006612:	4630      	mov	r0, r6
 8006614:	f7fe f860 	bl	80046d8 <_printf_i>
 8006618:	e7e4      	b.n	80065e4 <_vfiprintf_r+0x208>
 800661a:	bf00      	nop
 800661c:	0800722c 	.word	0x0800722c
 8006620:	0800724c 	.word	0x0800724c
 8006624:	0800720c 	.word	0x0800720c
 8006628:	080070b4 	.word	0x080070b4
 800662c:	080070be 	.word	0x080070be
 8006630:	08004191 	.word	0x08004191
 8006634:	080063b9 	.word	0x080063b9
 8006638:	080070ba 	.word	0x080070ba

0800663c <__swbuf_r>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	460e      	mov	r6, r1
 8006640:	4614      	mov	r4, r2
 8006642:	4605      	mov	r5, r0
 8006644:	b118      	cbz	r0, 800664e <__swbuf_r+0x12>
 8006646:	6983      	ldr	r3, [r0, #24]
 8006648:	b90b      	cbnz	r3, 800664e <__swbuf_r+0x12>
 800664a:	f000 f9e7 	bl	8006a1c <__sinit>
 800664e:	4b21      	ldr	r3, [pc, #132]	; (80066d4 <__swbuf_r+0x98>)
 8006650:	429c      	cmp	r4, r3
 8006652:	d12b      	bne.n	80066ac <__swbuf_r+0x70>
 8006654:	686c      	ldr	r4, [r5, #4]
 8006656:	69a3      	ldr	r3, [r4, #24]
 8006658:	60a3      	str	r3, [r4, #8]
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	071a      	lsls	r2, r3, #28
 800665e:	d52f      	bpl.n	80066c0 <__swbuf_r+0x84>
 8006660:	6923      	ldr	r3, [r4, #16]
 8006662:	b36b      	cbz	r3, 80066c0 <__swbuf_r+0x84>
 8006664:	6923      	ldr	r3, [r4, #16]
 8006666:	6820      	ldr	r0, [r4, #0]
 8006668:	1ac0      	subs	r0, r0, r3
 800666a:	6963      	ldr	r3, [r4, #20]
 800666c:	b2f6      	uxtb	r6, r6
 800666e:	4283      	cmp	r3, r0
 8006670:	4637      	mov	r7, r6
 8006672:	dc04      	bgt.n	800667e <__swbuf_r+0x42>
 8006674:	4621      	mov	r1, r4
 8006676:	4628      	mov	r0, r5
 8006678:	f000 f93c 	bl	80068f4 <_fflush_r>
 800667c:	bb30      	cbnz	r0, 80066cc <__swbuf_r+0x90>
 800667e:	68a3      	ldr	r3, [r4, #8]
 8006680:	3b01      	subs	r3, #1
 8006682:	60a3      	str	r3, [r4, #8]
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	6022      	str	r2, [r4, #0]
 800668a:	701e      	strb	r6, [r3, #0]
 800668c:	6963      	ldr	r3, [r4, #20]
 800668e:	3001      	adds	r0, #1
 8006690:	4283      	cmp	r3, r0
 8006692:	d004      	beq.n	800669e <__swbuf_r+0x62>
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	07db      	lsls	r3, r3, #31
 8006698:	d506      	bpl.n	80066a8 <__swbuf_r+0x6c>
 800669a:	2e0a      	cmp	r6, #10
 800669c:	d104      	bne.n	80066a8 <__swbuf_r+0x6c>
 800669e:	4621      	mov	r1, r4
 80066a0:	4628      	mov	r0, r5
 80066a2:	f000 f927 	bl	80068f4 <_fflush_r>
 80066a6:	b988      	cbnz	r0, 80066cc <__swbuf_r+0x90>
 80066a8:	4638      	mov	r0, r7
 80066aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <__swbuf_r+0x9c>)
 80066ae:	429c      	cmp	r4, r3
 80066b0:	d101      	bne.n	80066b6 <__swbuf_r+0x7a>
 80066b2:	68ac      	ldr	r4, [r5, #8]
 80066b4:	e7cf      	b.n	8006656 <__swbuf_r+0x1a>
 80066b6:	4b09      	ldr	r3, [pc, #36]	; (80066dc <__swbuf_r+0xa0>)
 80066b8:	429c      	cmp	r4, r3
 80066ba:	bf08      	it	eq
 80066bc:	68ec      	ldreq	r4, [r5, #12]
 80066be:	e7ca      	b.n	8006656 <__swbuf_r+0x1a>
 80066c0:	4621      	mov	r1, r4
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 f81a 	bl	80066fc <__swsetup_r>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d0cb      	beq.n	8006664 <__swbuf_r+0x28>
 80066cc:	f04f 37ff 	mov.w	r7, #4294967295
 80066d0:	e7ea      	b.n	80066a8 <__swbuf_r+0x6c>
 80066d2:	bf00      	nop
 80066d4:	0800722c 	.word	0x0800722c
 80066d8:	0800724c 	.word	0x0800724c
 80066dc:	0800720c 	.word	0x0800720c

080066e0 <__ascii_wctomb>:
 80066e0:	b149      	cbz	r1, 80066f6 <__ascii_wctomb+0x16>
 80066e2:	2aff      	cmp	r2, #255	; 0xff
 80066e4:	bf85      	ittet	hi
 80066e6:	238a      	movhi	r3, #138	; 0x8a
 80066e8:	6003      	strhi	r3, [r0, #0]
 80066ea:	700a      	strbls	r2, [r1, #0]
 80066ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80066f0:	bf98      	it	ls
 80066f2:	2001      	movls	r0, #1
 80066f4:	4770      	bx	lr
 80066f6:	4608      	mov	r0, r1
 80066f8:	4770      	bx	lr
	...

080066fc <__swsetup_r>:
 80066fc:	4b32      	ldr	r3, [pc, #200]	; (80067c8 <__swsetup_r+0xcc>)
 80066fe:	b570      	push	{r4, r5, r6, lr}
 8006700:	681d      	ldr	r5, [r3, #0]
 8006702:	4606      	mov	r6, r0
 8006704:	460c      	mov	r4, r1
 8006706:	b125      	cbz	r5, 8006712 <__swsetup_r+0x16>
 8006708:	69ab      	ldr	r3, [r5, #24]
 800670a:	b913      	cbnz	r3, 8006712 <__swsetup_r+0x16>
 800670c:	4628      	mov	r0, r5
 800670e:	f000 f985 	bl	8006a1c <__sinit>
 8006712:	4b2e      	ldr	r3, [pc, #184]	; (80067cc <__swsetup_r+0xd0>)
 8006714:	429c      	cmp	r4, r3
 8006716:	d10f      	bne.n	8006738 <__swsetup_r+0x3c>
 8006718:	686c      	ldr	r4, [r5, #4]
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006720:	0719      	lsls	r1, r3, #28
 8006722:	d42c      	bmi.n	800677e <__swsetup_r+0x82>
 8006724:	06dd      	lsls	r5, r3, #27
 8006726:	d411      	bmi.n	800674c <__swsetup_r+0x50>
 8006728:	2309      	movs	r3, #9
 800672a:	6033      	str	r3, [r6, #0]
 800672c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	f04f 30ff 	mov.w	r0, #4294967295
 8006736:	e03e      	b.n	80067b6 <__swsetup_r+0xba>
 8006738:	4b25      	ldr	r3, [pc, #148]	; (80067d0 <__swsetup_r+0xd4>)
 800673a:	429c      	cmp	r4, r3
 800673c:	d101      	bne.n	8006742 <__swsetup_r+0x46>
 800673e:	68ac      	ldr	r4, [r5, #8]
 8006740:	e7eb      	b.n	800671a <__swsetup_r+0x1e>
 8006742:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <__swsetup_r+0xd8>)
 8006744:	429c      	cmp	r4, r3
 8006746:	bf08      	it	eq
 8006748:	68ec      	ldreq	r4, [r5, #12]
 800674a:	e7e6      	b.n	800671a <__swsetup_r+0x1e>
 800674c:	0758      	lsls	r0, r3, #29
 800674e:	d512      	bpl.n	8006776 <__swsetup_r+0x7a>
 8006750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006752:	b141      	cbz	r1, 8006766 <__swsetup_r+0x6a>
 8006754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006758:	4299      	cmp	r1, r3
 800675a:	d002      	beq.n	8006762 <__swsetup_r+0x66>
 800675c:	4630      	mov	r0, r6
 800675e:	f7ff fb31 	bl	8005dc4 <_free_r>
 8006762:	2300      	movs	r3, #0
 8006764:	6363      	str	r3, [r4, #52]	; 0x34
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800676c:	81a3      	strh	r3, [r4, #12]
 800676e:	2300      	movs	r3, #0
 8006770:	6063      	str	r3, [r4, #4]
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	f043 0308 	orr.w	r3, r3, #8
 800677c:	81a3      	strh	r3, [r4, #12]
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	b94b      	cbnz	r3, 8006796 <__swsetup_r+0x9a>
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800678c:	d003      	beq.n	8006796 <__swsetup_r+0x9a>
 800678e:	4621      	mov	r1, r4
 8006790:	4630      	mov	r0, r6
 8006792:	f000 fa09 	bl	8006ba8 <__smakebuf_r>
 8006796:	89a0      	ldrh	r0, [r4, #12]
 8006798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800679c:	f010 0301 	ands.w	r3, r0, #1
 80067a0:	d00a      	beq.n	80067b8 <__swsetup_r+0xbc>
 80067a2:	2300      	movs	r3, #0
 80067a4:	60a3      	str	r3, [r4, #8]
 80067a6:	6963      	ldr	r3, [r4, #20]
 80067a8:	425b      	negs	r3, r3
 80067aa:	61a3      	str	r3, [r4, #24]
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	b943      	cbnz	r3, 80067c2 <__swsetup_r+0xc6>
 80067b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067b4:	d1ba      	bne.n	800672c <__swsetup_r+0x30>
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	0781      	lsls	r1, r0, #30
 80067ba:	bf58      	it	pl
 80067bc:	6963      	ldrpl	r3, [r4, #20]
 80067be:	60a3      	str	r3, [r4, #8]
 80067c0:	e7f4      	b.n	80067ac <__swsetup_r+0xb0>
 80067c2:	2000      	movs	r0, #0
 80067c4:	e7f7      	b.n	80067b6 <__swsetup_r+0xba>
 80067c6:	bf00      	nop
 80067c8:	20000010 	.word	0x20000010
 80067cc:	0800722c 	.word	0x0800722c
 80067d0:	0800724c 	.word	0x0800724c
 80067d4:	0800720c 	.word	0x0800720c

080067d8 <abort>:
 80067d8:	b508      	push	{r3, lr}
 80067da:	2006      	movs	r0, #6
 80067dc:	f000 fa54 	bl	8006c88 <raise>
 80067e0:	2001      	movs	r0, #1
 80067e2:	f7fa fe95 	bl	8001510 <_exit>
	...

080067e8 <__sflush_r>:
 80067e8:	898a      	ldrh	r2, [r1, #12]
 80067ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ee:	4605      	mov	r5, r0
 80067f0:	0710      	lsls	r0, r2, #28
 80067f2:	460c      	mov	r4, r1
 80067f4:	d458      	bmi.n	80068a8 <__sflush_r+0xc0>
 80067f6:	684b      	ldr	r3, [r1, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	dc05      	bgt.n	8006808 <__sflush_r+0x20>
 80067fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dc02      	bgt.n	8006808 <__sflush_r+0x20>
 8006802:	2000      	movs	r0, #0
 8006804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800680a:	2e00      	cmp	r6, #0
 800680c:	d0f9      	beq.n	8006802 <__sflush_r+0x1a>
 800680e:	2300      	movs	r3, #0
 8006810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006814:	682f      	ldr	r7, [r5, #0]
 8006816:	602b      	str	r3, [r5, #0]
 8006818:	d032      	beq.n	8006880 <__sflush_r+0x98>
 800681a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	075a      	lsls	r2, r3, #29
 8006820:	d505      	bpl.n	800682e <__sflush_r+0x46>
 8006822:	6863      	ldr	r3, [r4, #4]
 8006824:	1ac0      	subs	r0, r0, r3
 8006826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006828:	b10b      	cbz	r3, 800682e <__sflush_r+0x46>
 800682a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800682c:	1ac0      	subs	r0, r0, r3
 800682e:	2300      	movs	r3, #0
 8006830:	4602      	mov	r2, r0
 8006832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006834:	6a21      	ldr	r1, [r4, #32]
 8006836:	4628      	mov	r0, r5
 8006838:	47b0      	blx	r6
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	d106      	bne.n	800684e <__sflush_r+0x66>
 8006840:	6829      	ldr	r1, [r5, #0]
 8006842:	291d      	cmp	r1, #29
 8006844:	d82c      	bhi.n	80068a0 <__sflush_r+0xb8>
 8006846:	4a2a      	ldr	r2, [pc, #168]	; (80068f0 <__sflush_r+0x108>)
 8006848:	40ca      	lsrs	r2, r1
 800684a:	07d6      	lsls	r6, r2, #31
 800684c:	d528      	bpl.n	80068a0 <__sflush_r+0xb8>
 800684e:	2200      	movs	r2, #0
 8006850:	6062      	str	r2, [r4, #4]
 8006852:	04d9      	lsls	r1, r3, #19
 8006854:	6922      	ldr	r2, [r4, #16]
 8006856:	6022      	str	r2, [r4, #0]
 8006858:	d504      	bpl.n	8006864 <__sflush_r+0x7c>
 800685a:	1c42      	adds	r2, r0, #1
 800685c:	d101      	bne.n	8006862 <__sflush_r+0x7a>
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	b903      	cbnz	r3, 8006864 <__sflush_r+0x7c>
 8006862:	6560      	str	r0, [r4, #84]	; 0x54
 8006864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006866:	602f      	str	r7, [r5, #0]
 8006868:	2900      	cmp	r1, #0
 800686a:	d0ca      	beq.n	8006802 <__sflush_r+0x1a>
 800686c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006870:	4299      	cmp	r1, r3
 8006872:	d002      	beq.n	800687a <__sflush_r+0x92>
 8006874:	4628      	mov	r0, r5
 8006876:	f7ff faa5 	bl	8005dc4 <_free_r>
 800687a:	2000      	movs	r0, #0
 800687c:	6360      	str	r0, [r4, #52]	; 0x34
 800687e:	e7c1      	b.n	8006804 <__sflush_r+0x1c>
 8006880:	6a21      	ldr	r1, [r4, #32]
 8006882:	2301      	movs	r3, #1
 8006884:	4628      	mov	r0, r5
 8006886:	47b0      	blx	r6
 8006888:	1c41      	adds	r1, r0, #1
 800688a:	d1c7      	bne.n	800681c <__sflush_r+0x34>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0c4      	beq.n	800681c <__sflush_r+0x34>
 8006892:	2b1d      	cmp	r3, #29
 8006894:	d001      	beq.n	800689a <__sflush_r+0xb2>
 8006896:	2b16      	cmp	r3, #22
 8006898:	d101      	bne.n	800689e <__sflush_r+0xb6>
 800689a:	602f      	str	r7, [r5, #0]
 800689c:	e7b1      	b.n	8006802 <__sflush_r+0x1a>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	e7ad      	b.n	8006804 <__sflush_r+0x1c>
 80068a8:	690f      	ldr	r7, [r1, #16]
 80068aa:	2f00      	cmp	r7, #0
 80068ac:	d0a9      	beq.n	8006802 <__sflush_r+0x1a>
 80068ae:	0793      	lsls	r3, r2, #30
 80068b0:	680e      	ldr	r6, [r1, #0]
 80068b2:	bf08      	it	eq
 80068b4:	694b      	ldreq	r3, [r1, #20]
 80068b6:	600f      	str	r7, [r1, #0]
 80068b8:	bf18      	it	ne
 80068ba:	2300      	movne	r3, #0
 80068bc:	eba6 0807 	sub.w	r8, r6, r7
 80068c0:	608b      	str	r3, [r1, #8]
 80068c2:	f1b8 0f00 	cmp.w	r8, #0
 80068c6:	dd9c      	ble.n	8006802 <__sflush_r+0x1a>
 80068c8:	6a21      	ldr	r1, [r4, #32]
 80068ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068cc:	4643      	mov	r3, r8
 80068ce:	463a      	mov	r2, r7
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b0      	blx	r6
 80068d4:	2800      	cmp	r0, #0
 80068d6:	dc06      	bgt.n	80068e6 <__sflush_r+0xfe>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	e78e      	b.n	8006804 <__sflush_r+0x1c>
 80068e6:	4407      	add	r7, r0
 80068e8:	eba8 0800 	sub.w	r8, r8, r0
 80068ec:	e7e9      	b.n	80068c2 <__sflush_r+0xda>
 80068ee:	bf00      	nop
 80068f0:	20400001 	.word	0x20400001

080068f4 <_fflush_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	690b      	ldr	r3, [r1, #16]
 80068f8:	4605      	mov	r5, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	b913      	cbnz	r3, 8006904 <_fflush_r+0x10>
 80068fe:	2500      	movs	r5, #0
 8006900:	4628      	mov	r0, r5
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	b118      	cbz	r0, 800690e <_fflush_r+0x1a>
 8006906:	6983      	ldr	r3, [r0, #24]
 8006908:	b90b      	cbnz	r3, 800690e <_fflush_r+0x1a>
 800690a:	f000 f887 	bl	8006a1c <__sinit>
 800690e:	4b14      	ldr	r3, [pc, #80]	; (8006960 <_fflush_r+0x6c>)
 8006910:	429c      	cmp	r4, r3
 8006912:	d11b      	bne.n	800694c <_fflush_r+0x58>
 8006914:	686c      	ldr	r4, [r5, #4]
 8006916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0ef      	beq.n	80068fe <_fflush_r+0xa>
 800691e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006920:	07d0      	lsls	r0, r2, #31
 8006922:	d404      	bmi.n	800692e <_fflush_r+0x3a>
 8006924:	0599      	lsls	r1, r3, #22
 8006926:	d402      	bmi.n	800692e <_fflush_r+0x3a>
 8006928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800692a:	f000 f915 	bl	8006b58 <__retarget_lock_acquire_recursive>
 800692e:	4628      	mov	r0, r5
 8006930:	4621      	mov	r1, r4
 8006932:	f7ff ff59 	bl	80067e8 <__sflush_r>
 8006936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006938:	07da      	lsls	r2, r3, #31
 800693a:	4605      	mov	r5, r0
 800693c:	d4e0      	bmi.n	8006900 <_fflush_r+0xc>
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	059b      	lsls	r3, r3, #22
 8006942:	d4dd      	bmi.n	8006900 <_fflush_r+0xc>
 8006944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006946:	f000 f908 	bl	8006b5a <__retarget_lock_release_recursive>
 800694a:	e7d9      	b.n	8006900 <_fflush_r+0xc>
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <_fflush_r+0x70>)
 800694e:	429c      	cmp	r4, r3
 8006950:	d101      	bne.n	8006956 <_fflush_r+0x62>
 8006952:	68ac      	ldr	r4, [r5, #8]
 8006954:	e7df      	b.n	8006916 <_fflush_r+0x22>
 8006956:	4b04      	ldr	r3, [pc, #16]	; (8006968 <_fflush_r+0x74>)
 8006958:	429c      	cmp	r4, r3
 800695a:	bf08      	it	eq
 800695c:	68ec      	ldreq	r4, [r5, #12]
 800695e:	e7da      	b.n	8006916 <_fflush_r+0x22>
 8006960:	0800722c 	.word	0x0800722c
 8006964:	0800724c 	.word	0x0800724c
 8006968:	0800720c 	.word	0x0800720c

0800696c <std>:
 800696c:	2300      	movs	r3, #0
 800696e:	b510      	push	{r4, lr}
 8006970:	4604      	mov	r4, r0
 8006972:	e9c0 3300 	strd	r3, r3, [r0]
 8006976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800697a:	6083      	str	r3, [r0, #8]
 800697c:	8181      	strh	r1, [r0, #12]
 800697e:	6643      	str	r3, [r0, #100]	; 0x64
 8006980:	81c2      	strh	r2, [r0, #14]
 8006982:	6183      	str	r3, [r0, #24]
 8006984:	4619      	mov	r1, r3
 8006986:	2208      	movs	r2, #8
 8006988:	305c      	adds	r0, #92	; 0x5c
 800698a:	f7fd fb59 	bl	8004040 <memset>
 800698e:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <std+0x38>)
 8006990:	6263      	str	r3, [r4, #36]	; 0x24
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <std+0x3c>)
 8006994:	62a3      	str	r3, [r4, #40]	; 0x28
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <std+0x40>)
 8006998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800699a:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <std+0x44>)
 800699c:	6224      	str	r4, [r4, #32]
 800699e:	6323      	str	r3, [r4, #48]	; 0x30
 80069a0:	bd10      	pop	{r4, pc}
 80069a2:	bf00      	nop
 80069a4:	08006cc1 	.word	0x08006cc1
 80069a8:	08006ce3 	.word	0x08006ce3
 80069ac:	08006d1b 	.word	0x08006d1b
 80069b0:	08006d3f 	.word	0x08006d3f

080069b4 <_cleanup_r>:
 80069b4:	4901      	ldr	r1, [pc, #4]	; (80069bc <_cleanup_r+0x8>)
 80069b6:	f000 b8af 	b.w	8006b18 <_fwalk_reent>
 80069ba:	bf00      	nop
 80069bc:	080068f5 	.word	0x080068f5

080069c0 <__sfmoreglue>:
 80069c0:	b570      	push	{r4, r5, r6, lr}
 80069c2:	2268      	movs	r2, #104	; 0x68
 80069c4:	1e4d      	subs	r5, r1, #1
 80069c6:	4355      	muls	r5, r2
 80069c8:	460e      	mov	r6, r1
 80069ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069ce:	f7ff fa65 	bl	8005e9c <_malloc_r>
 80069d2:	4604      	mov	r4, r0
 80069d4:	b140      	cbz	r0, 80069e8 <__sfmoreglue+0x28>
 80069d6:	2100      	movs	r1, #0
 80069d8:	e9c0 1600 	strd	r1, r6, [r0]
 80069dc:	300c      	adds	r0, #12
 80069de:	60a0      	str	r0, [r4, #8]
 80069e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069e4:	f7fd fb2c 	bl	8004040 <memset>
 80069e8:	4620      	mov	r0, r4
 80069ea:	bd70      	pop	{r4, r5, r6, pc}

080069ec <__sfp_lock_acquire>:
 80069ec:	4801      	ldr	r0, [pc, #4]	; (80069f4 <__sfp_lock_acquire+0x8>)
 80069ee:	f000 b8b3 	b.w	8006b58 <__retarget_lock_acquire_recursive>
 80069f2:	bf00      	nop
 80069f4:	200002c5 	.word	0x200002c5

080069f8 <__sfp_lock_release>:
 80069f8:	4801      	ldr	r0, [pc, #4]	; (8006a00 <__sfp_lock_release+0x8>)
 80069fa:	f000 b8ae 	b.w	8006b5a <__retarget_lock_release_recursive>
 80069fe:	bf00      	nop
 8006a00:	200002c5 	.word	0x200002c5

08006a04 <__sinit_lock_acquire>:
 8006a04:	4801      	ldr	r0, [pc, #4]	; (8006a0c <__sinit_lock_acquire+0x8>)
 8006a06:	f000 b8a7 	b.w	8006b58 <__retarget_lock_acquire_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	200002c6 	.word	0x200002c6

08006a10 <__sinit_lock_release>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__sinit_lock_release+0x8>)
 8006a12:	f000 b8a2 	b.w	8006b5a <__retarget_lock_release_recursive>
 8006a16:	bf00      	nop
 8006a18:	200002c6 	.word	0x200002c6

08006a1c <__sinit>:
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	4604      	mov	r4, r0
 8006a20:	f7ff fff0 	bl	8006a04 <__sinit_lock_acquire>
 8006a24:	69a3      	ldr	r3, [r4, #24]
 8006a26:	b11b      	cbz	r3, 8006a30 <__sinit+0x14>
 8006a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a2c:	f7ff bff0 	b.w	8006a10 <__sinit_lock_release>
 8006a30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a34:	6523      	str	r3, [r4, #80]	; 0x50
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <__sinit+0x68>)
 8006a38:	4a13      	ldr	r2, [pc, #76]	; (8006a88 <__sinit+0x6c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a3e:	42a3      	cmp	r3, r4
 8006a40:	bf04      	itt	eq
 8006a42:	2301      	moveq	r3, #1
 8006a44:	61a3      	streq	r3, [r4, #24]
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 f820 	bl	8006a8c <__sfp>
 8006a4c:	6060      	str	r0, [r4, #4]
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 f81c 	bl	8006a8c <__sfp>
 8006a54:	60a0      	str	r0, [r4, #8]
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 f818 	bl	8006a8c <__sfp>
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	60e0      	str	r0, [r4, #12]
 8006a60:	2104      	movs	r1, #4
 8006a62:	6860      	ldr	r0, [r4, #4]
 8006a64:	f7ff ff82 	bl	800696c <std>
 8006a68:	68a0      	ldr	r0, [r4, #8]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	2109      	movs	r1, #9
 8006a6e:	f7ff ff7d 	bl	800696c <std>
 8006a72:	68e0      	ldr	r0, [r4, #12]
 8006a74:	2202      	movs	r2, #2
 8006a76:	2112      	movs	r1, #18
 8006a78:	f7ff ff78 	bl	800696c <std>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	61a3      	str	r3, [r4, #24]
 8006a80:	e7d2      	b.n	8006a28 <__sinit+0xc>
 8006a82:	bf00      	nop
 8006a84:	08006e90 	.word	0x08006e90
 8006a88:	080069b5 	.word	0x080069b5

08006a8c <__sfp>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	4607      	mov	r7, r0
 8006a90:	f7ff ffac 	bl	80069ec <__sfp_lock_acquire>
 8006a94:	4b1e      	ldr	r3, [pc, #120]	; (8006b10 <__sfp+0x84>)
 8006a96:	681e      	ldr	r6, [r3, #0]
 8006a98:	69b3      	ldr	r3, [r6, #24]
 8006a9a:	b913      	cbnz	r3, 8006aa2 <__sfp+0x16>
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7ff ffbd 	bl	8006a1c <__sinit>
 8006aa2:	3648      	adds	r6, #72	; 0x48
 8006aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	d503      	bpl.n	8006ab4 <__sfp+0x28>
 8006aac:	6833      	ldr	r3, [r6, #0]
 8006aae:	b30b      	cbz	r3, 8006af4 <__sfp+0x68>
 8006ab0:	6836      	ldr	r6, [r6, #0]
 8006ab2:	e7f7      	b.n	8006aa4 <__sfp+0x18>
 8006ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ab8:	b9d5      	cbnz	r5, 8006af0 <__sfp+0x64>
 8006aba:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <__sfp+0x88>)
 8006abc:	60e3      	str	r3, [r4, #12]
 8006abe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ac2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ac4:	f000 f847 	bl	8006b56 <__retarget_lock_init_recursive>
 8006ac8:	f7ff ff96 	bl	80069f8 <__sfp_lock_release>
 8006acc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ad4:	6025      	str	r5, [r4, #0]
 8006ad6:	61a5      	str	r5, [r4, #24]
 8006ad8:	2208      	movs	r2, #8
 8006ada:	4629      	mov	r1, r5
 8006adc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ae0:	f7fd faae 	bl	8004040 <memset>
 8006ae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006aec:	4620      	mov	r0, r4
 8006aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006af0:	3468      	adds	r4, #104	; 0x68
 8006af2:	e7d9      	b.n	8006aa8 <__sfp+0x1c>
 8006af4:	2104      	movs	r1, #4
 8006af6:	4638      	mov	r0, r7
 8006af8:	f7ff ff62 	bl	80069c0 <__sfmoreglue>
 8006afc:	4604      	mov	r4, r0
 8006afe:	6030      	str	r0, [r6, #0]
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d1d5      	bne.n	8006ab0 <__sfp+0x24>
 8006b04:	f7ff ff78 	bl	80069f8 <__sfp_lock_release>
 8006b08:	230c      	movs	r3, #12
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	e7ee      	b.n	8006aec <__sfp+0x60>
 8006b0e:	bf00      	nop
 8006b10:	08006e90 	.word	0x08006e90
 8006b14:	ffff0001 	.word	0xffff0001

08006b18 <_fwalk_reent>:
 8006b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	4688      	mov	r8, r1
 8006b20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b24:	2700      	movs	r7, #0
 8006b26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b2a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b2e:	d505      	bpl.n	8006b3c <_fwalk_reent+0x24>
 8006b30:	6824      	ldr	r4, [r4, #0]
 8006b32:	2c00      	cmp	r4, #0
 8006b34:	d1f7      	bne.n	8006b26 <_fwalk_reent+0xe>
 8006b36:	4638      	mov	r0, r7
 8006b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3c:	89ab      	ldrh	r3, [r5, #12]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d907      	bls.n	8006b52 <_fwalk_reent+0x3a>
 8006b42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b46:	3301      	adds	r3, #1
 8006b48:	d003      	beq.n	8006b52 <_fwalk_reent+0x3a>
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	47c0      	blx	r8
 8006b50:	4307      	orrs	r7, r0
 8006b52:	3568      	adds	r5, #104	; 0x68
 8006b54:	e7e9      	b.n	8006b2a <_fwalk_reent+0x12>

08006b56 <__retarget_lock_init_recursive>:
 8006b56:	4770      	bx	lr

08006b58 <__retarget_lock_acquire_recursive>:
 8006b58:	4770      	bx	lr

08006b5a <__retarget_lock_release_recursive>:
 8006b5a:	4770      	bx	lr

08006b5c <__swhatbuf_r>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	460e      	mov	r6, r1
 8006b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b64:	2900      	cmp	r1, #0
 8006b66:	b096      	sub	sp, #88	; 0x58
 8006b68:	4614      	mov	r4, r2
 8006b6a:	461d      	mov	r5, r3
 8006b6c:	da08      	bge.n	8006b80 <__swhatbuf_r+0x24>
 8006b6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	602a      	str	r2, [r5, #0]
 8006b76:	061a      	lsls	r2, r3, #24
 8006b78:	d410      	bmi.n	8006b9c <__swhatbuf_r+0x40>
 8006b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b7e:	e00e      	b.n	8006b9e <__swhatbuf_r+0x42>
 8006b80:	466a      	mov	r2, sp
 8006b82:	f000 f903 	bl	8006d8c <_fstat_r>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	dbf1      	blt.n	8006b6e <__swhatbuf_r+0x12>
 8006b8a:	9a01      	ldr	r2, [sp, #4]
 8006b8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b94:	425a      	negs	r2, r3
 8006b96:	415a      	adcs	r2, r3
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	e7ee      	b.n	8006b7a <__swhatbuf_r+0x1e>
 8006b9c:	2340      	movs	r3, #64	; 0x40
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	b016      	add	sp, #88	; 0x58
 8006ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ba8 <__smakebuf_r>:
 8006ba8:	898b      	ldrh	r3, [r1, #12]
 8006baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bac:	079d      	lsls	r5, r3, #30
 8006bae:	4606      	mov	r6, r0
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	d507      	bpl.n	8006bc4 <__smakebuf_r+0x1c>
 8006bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	6123      	str	r3, [r4, #16]
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	6163      	str	r3, [r4, #20]
 8006bc0:	b002      	add	sp, #8
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
 8006bc4:	ab01      	add	r3, sp, #4
 8006bc6:	466a      	mov	r2, sp
 8006bc8:	f7ff ffc8 	bl	8006b5c <__swhatbuf_r>
 8006bcc:	9900      	ldr	r1, [sp, #0]
 8006bce:	4605      	mov	r5, r0
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f7ff f963 	bl	8005e9c <_malloc_r>
 8006bd6:	b948      	cbnz	r0, 8006bec <__smakebuf_r+0x44>
 8006bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bdc:	059a      	lsls	r2, r3, #22
 8006bde:	d4ef      	bmi.n	8006bc0 <__smakebuf_r+0x18>
 8006be0:	f023 0303 	bic.w	r3, r3, #3
 8006be4:	f043 0302 	orr.w	r3, r3, #2
 8006be8:	81a3      	strh	r3, [r4, #12]
 8006bea:	e7e3      	b.n	8006bb4 <__smakebuf_r+0xc>
 8006bec:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <__smakebuf_r+0x7c>)
 8006bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	6020      	str	r0, [r4, #0]
 8006bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	9b00      	ldr	r3, [sp, #0]
 8006bfc:	6163      	str	r3, [r4, #20]
 8006bfe:	9b01      	ldr	r3, [sp, #4]
 8006c00:	6120      	str	r0, [r4, #16]
 8006c02:	b15b      	cbz	r3, 8006c1c <__smakebuf_r+0x74>
 8006c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f000 f8d1 	bl	8006db0 <_isatty_r>
 8006c0e:	b128      	cbz	r0, 8006c1c <__smakebuf_r+0x74>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f023 0303 	bic.w	r3, r3, #3
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	81a3      	strh	r3, [r4, #12]
 8006c1c:	89a0      	ldrh	r0, [r4, #12]
 8006c1e:	4305      	orrs	r5, r0
 8006c20:	81a5      	strh	r5, [r4, #12]
 8006c22:	e7cd      	b.n	8006bc0 <__smakebuf_r+0x18>
 8006c24:	080069b5 	.word	0x080069b5

08006c28 <_malloc_usable_size_r>:
 8006c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c2c:	1f18      	subs	r0, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bfbc      	itt	lt
 8006c32:	580b      	ldrlt	r3, [r1, r0]
 8006c34:	18c0      	addlt	r0, r0, r3
 8006c36:	4770      	bx	lr

08006c38 <_raise_r>:
 8006c38:	291f      	cmp	r1, #31
 8006c3a:	b538      	push	{r3, r4, r5, lr}
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	d904      	bls.n	8006c4c <_raise_r+0x14>
 8006c42:	2316      	movs	r3, #22
 8006c44:	6003      	str	r3, [r0, #0]
 8006c46:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c4e:	b112      	cbz	r2, 8006c56 <_raise_r+0x1e>
 8006c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c54:	b94b      	cbnz	r3, 8006c6a <_raise_r+0x32>
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 f830 	bl	8006cbc <_getpid_r>
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	4601      	mov	r1, r0
 8006c60:	4620      	mov	r0, r4
 8006c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c66:	f000 b817 	b.w	8006c98 <_kill_r>
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d00a      	beq.n	8006c84 <_raise_r+0x4c>
 8006c6e:	1c59      	adds	r1, r3, #1
 8006c70:	d103      	bne.n	8006c7a <_raise_r+0x42>
 8006c72:	2316      	movs	r3, #22
 8006c74:	6003      	str	r3, [r0, #0]
 8006c76:	2001      	movs	r0, #1
 8006c78:	e7e7      	b.n	8006c4a <_raise_r+0x12>
 8006c7a:	2400      	movs	r4, #0
 8006c7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c80:	4628      	mov	r0, r5
 8006c82:	4798      	blx	r3
 8006c84:	2000      	movs	r0, #0
 8006c86:	e7e0      	b.n	8006c4a <_raise_r+0x12>

08006c88 <raise>:
 8006c88:	4b02      	ldr	r3, [pc, #8]	; (8006c94 <raise+0xc>)
 8006c8a:	4601      	mov	r1, r0
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	f7ff bfd3 	b.w	8006c38 <_raise_r>
 8006c92:	bf00      	nop
 8006c94:	20000010 	.word	0x20000010

08006c98 <_kill_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4d07      	ldr	r5, [pc, #28]	; (8006cb8 <_kill_r+0x20>)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	f7fa fc23 	bl	80014f0 <_kill>
 8006caa:	1c43      	adds	r3, r0, #1
 8006cac:	d102      	bne.n	8006cb4 <_kill_r+0x1c>
 8006cae:	682b      	ldr	r3, [r5, #0]
 8006cb0:	b103      	cbz	r3, 8006cb4 <_kill_r+0x1c>
 8006cb2:	6023      	str	r3, [r4, #0]
 8006cb4:	bd38      	pop	{r3, r4, r5, pc}
 8006cb6:	bf00      	nop
 8006cb8:	200002c0 	.word	0x200002c0

08006cbc <_getpid_r>:
 8006cbc:	f7fa bc10 	b.w	80014e0 <_getpid>

08006cc0 <__sread>:
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	f000 f894 	bl	8006df4 <_read_r>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	bfab      	itete	ge
 8006cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cd4:	181b      	addge	r3, r3, r0
 8006cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cda:	bfac      	ite	ge
 8006cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cde:	81a3      	strhlt	r3, [r4, #12]
 8006ce0:	bd10      	pop	{r4, pc}

08006ce2 <__swrite>:
 8006ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce6:	461f      	mov	r7, r3
 8006ce8:	898b      	ldrh	r3, [r1, #12]
 8006cea:	05db      	lsls	r3, r3, #23
 8006cec:	4605      	mov	r5, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	4616      	mov	r6, r2
 8006cf2:	d505      	bpl.n	8006d00 <__swrite+0x1e>
 8006cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f000 f868 	bl	8006dd0 <_lseek_r>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	463b      	mov	r3, r7
 8006d10:	4628      	mov	r0, r5
 8006d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d16:	f000 b817 	b.w	8006d48 <_write_r>

08006d1a <__sseek>:
 8006d1a:	b510      	push	{r4, lr}
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d22:	f000 f855 	bl	8006dd0 <_lseek_r>
 8006d26:	1c43      	adds	r3, r0, #1
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	bf15      	itete	ne
 8006d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d36:	81a3      	strheq	r3, [r4, #12]
 8006d38:	bf18      	it	ne
 8006d3a:	81a3      	strhne	r3, [r4, #12]
 8006d3c:	bd10      	pop	{r4, pc}

08006d3e <__sclose>:
 8006d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d42:	f000 b813 	b.w	8006d6c <_close_r>
	...

08006d48 <_write_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d07      	ldr	r5, [pc, #28]	; (8006d68 <_write_r+0x20>)
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	4608      	mov	r0, r1
 8006d50:	4611      	mov	r1, r2
 8006d52:	2200      	movs	r2, #0
 8006d54:	602a      	str	r2, [r5, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	f7fa fc01 	bl	800155e <_write>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_write_r+0x1e>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_write_r+0x1e>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	200002c0 	.word	0x200002c0

08006d6c <_close_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d06      	ldr	r5, [pc, #24]	; (8006d88 <_close_r+0x1c>)
 8006d70:	2300      	movs	r3, #0
 8006d72:	4604      	mov	r4, r0
 8006d74:	4608      	mov	r0, r1
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7fa fc0d 	bl	8001596 <_close>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_close_r+0x1a>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_close_r+0x1a>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	200002c0 	.word	0x200002c0

08006d8c <_fstat_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d07      	ldr	r5, [pc, #28]	; (8006dac <_fstat_r+0x20>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	4611      	mov	r1, r2
 8006d98:	602b      	str	r3, [r5, #0]
 8006d9a:	f7fa fc08 	bl	80015ae <_fstat>
 8006d9e:	1c43      	adds	r3, r0, #1
 8006da0:	d102      	bne.n	8006da8 <_fstat_r+0x1c>
 8006da2:	682b      	ldr	r3, [r5, #0]
 8006da4:	b103      	cbz	r3, 8006da8 <_fstat_r+0x1c>
 8006da6:	6023      	str	r3, [r4, #0]
 8006da8:	bd38      	pop	{r3, r4, r5, pc}
 8006daa:	bf00      	nop
 8006dac:	200002c0 	.word	0x200002c0

08006db0 <_isatty_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4d06      	ldr	r5, [pc, #24]	; (8006dcc <_isatty_r+0x1c>)
 8006db4:	2300      	movs	r3, #0
 8006db6:	4604      	mov	r4, r0
 8006db8:	4608      	mov	r0, r1
 8006dba:	602b      	str	r3, [r5, #0]
 8006dbc:	f7fa fc07 	bl	80015ce <_isatty>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d102      	bne.n	8006dca <_isatty_r+0x1a>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	b103      	cbz	r3, 8006dca <_isatty_r+0x1a>
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	200002c0 	.word	0x200002c0

08006dd0 <_lseek_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4d07      	ldr	r5, [pc, #28]	; (8006df0 <_lseek_r+0x20>)
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	4608      	mov	r0, r1
 8006dd8:	4611      	mov	r1, r2
 8006dda:	2200      	movs	r2, #0
 8006ddc:	602a      	str	r2, [r5, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	f7fa fc00 	bl	80015e4 <_lseek>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_lseek_r+0x1e>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_lseek_r+0x1e>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	200002c0 	.word	0x200002c0

08006df4 <_read_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4d07      	ldr	r5, [pc, #28]	; (8006e14 <_read_r+0x20>)
 8006df8:	4604      	mov	r4, r0
 8006dfa:	4608      	mov	r0, r1
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	2200      	movs	r2, #0
 8006e00:	602a      	str	r2, [r5, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f7fa fb8e 	bl	8001524 <_read>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_read_r+0x1e>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_read_r+0x1e>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	200002c0 	.word	0x200002c0

08006e18 <_init>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr

08006e24 <_fini>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	bf00      	nop
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr
